"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getAndroidBinaryPath", {
  enumerable: true,
  get: function () {
    return _index.getAndroidBinaryPath;
  }
});
Object.defineProperty(exports, "getSdkRootFromEnv", {
  enumerable: true,
  get: function () {
    return _helpers.getSdkRootFromEnv;
  }
});
exports.DEFAULT_ADB_PORT = exports.ADB = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _index = _interopRequireWildcard(require("./tools/index.js"));

var _helpers = require("./helpers");

var _logger = _interopRequireDefault(require("./logger.js"));

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;

const JAR_PATH = _path.default.resolve(_helpers.rootDir, 'jars');

const DEFAULT_OPTS = {
  sdkRoot: (0, _helpers.getSdkRootFromEnv)() || null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  helperJarPath: JAR_PATH,
  adbPort: DEFAULT_ADB_PORT,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null,
  allowOfflineDevices: false
};

class ADB {
  constructor(opts = {}) {
    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
    this.initJars();
  }

  initJars() {
    const tempJars = ['sign.jar', 'verify.jar'];

    for (const jarName of tempJars) {
      this.jars[jarName] = _path.default.resolve(JAR_PATH, jarName);
    }
  }

}

exports.ADB = ADB;

ADB.createADB = async function createADB(opts) {
  const adb = new ADB(opts);
  adb.sdkRoot = await (0, _helpers.requireSdkRoot)(adb.sdkRoot);
  await adb.getAdbWithCorrectAdbPath();

  try {
    await adb.adbExec(['start-server']);
  } catch (e) {
    _logger.default.warn(e.stderr || e.message);
  }

  return adb;
};

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZGIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9BREJfUE9SVCIsIkpBUl9QQVRIIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9PUFRTIiwic2RrUm9vdCIsInVkaWQiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJ1c2VLZXlzdG9yZSIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwidG1wRGlyIiwib3MiLCJ0bXBkaXIiLCJjdXJEZXZpY2VJZCIsImVtdWxhdG9yUG9ydCIsImxvZ2NhdCIsImJpbmFyaWVzIiwiaW5zdHJ1bWVudFByb2MiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJqYXJzIiwiaGVscGVySmFyUGF0aCIsImFkYlBvcnQiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInJlbW90ZUFwcHNDYWNoZUxpbWl0IiwiYnVpbGRUb29sc1ZlcnNpb24iLCJhbGxvd09mZmxpbmVEZXZpY2VzIiwiQURCIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwiXyIsImRlZmF1bHRzRGVlcCIsImNsb25lRGVlcCIsInJlbW90ZUFkYkhvc3QiLCJwdXNoIiwicmVtb3RlQWRiUG9ydCIsImluaXRKYXJzIiwidGVtcEphcnMiLCJqYXJOYW1lIiwiY3JlYXRlQURCIiwiYWRiIiwiZ2V0QWRiV2l0aENvcnJlY3RBZGJQYXRoIiwiYWRiRXhlYyIsImUiLCJsb2ciLCJ3YXJuIiwic3RkZXJyIiwibWVzc2FnZSIsImZuTmFtZSIsImZuIiwidG9QYWlycyIsIm1ldGhvZHMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRyxJQUF6Qjs7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LGNBQUQsQ0FBWixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWQyxvQkFBSUMsSUFBSixDQUFTRixDQUFDLENBQUNHLE1BQUYsSUFBWUgsQ0FBQyxDQUFDSSxPQUF2QjtBQUNEOztBQUNELFNBQU9QLEdBQVA7QUFDRCxDQVZEOztBQWFBLEtBQUssTUFBTSxDQUFDUSxNQUFELEVBQVNDLEVBQVQsQ0FBWCxJQUEyQm5CLGdCQUFFb0IsT0FBRixDQUFVQyxjQUFWLENBQTNCLEVBQStDO0FBQzdDMUIsRUFBQUEsR0FBRyxDQUFDMkIsU0FBSixDQUFjSixNQUFkLElBQXdCQyxFQUF4QjtBQUNEOztlQUVjeEIsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbWV0aG9kcywgeyBnZXRBbmRyb2lkQmluYXJ5UGF0aCB9IGZyb20gJy4vdG9vbHMvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgcm9vdERpciwgREVGQVVMVF9BREJfRVhFQ19USU1FT1VULCByZXF1aXJlU2RrUm9vdCwgZ2V0U2RrUm9vdEZyb21FbnZcbn0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXIuanMnO1xuXG5jb25zdCBERUZBVUxUX0FEQl9QT1JUID0gNTAzNztcbmNvbnN0IEpBUl9QQVRIID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdqYXJzJyk7XG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIHNka1Jvb3Q6IGdldFNka1Jvb3RGcm9tRW52KCkgfHwgbnVsbCxcbiAgdWRpZDogbnVsbCxcbiAgYXBwRGV2aWNlUmVhZHlUaW1lb3V0OiBudWxsLFxuICB1c2VLZXlzdG9yZTogbnVsbCxcbiAga2V5c3RvcmVQYXRoOiBudWxsLFxuICBrZXlzdG9yZVBhc3N3b3JkOiBudWxsLFxuICBrZXlBbGlhczogbnVsbCxcbiAga2V5UGFzc3dvcmQ6IG51bGwsXG4gIGV4ZWN1dGFibGU6IHtwYXRoOiAnYWRiJywgZGVmYXVsdEFyZ3M6IFtdfSxcbiAgdG1wRGlyOiBvcy50bXBkaXIoKSxcbiAgY3VyRGV2aWNlSWQ6IG51bGwsXG4gIGVtdWxhdG9yUG9ydDogbnVsbCxcbiAgbG9nY2F0OiBudWxsLFxuICBiaW5hcmllczoge30sXG4gIGluc3RydW1lbnRQcm9jOiBudWxsLFxuICBzdXBwcmVzc0tpbGxTZXJ2ZXI6IG51bGwsXG4gIGphcnM6IHt9LFxuICBoZWxwZXJKYXJQYXRoOiBKQVJfUEFUSCxcbiAgYWRiUG9ydDogREVGQVVMVF9BREJfUE9SVCxcbiAgYWRiRXhlY1RpbWVvdXQ6IERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCxcbiAgcmVtb3RlQXBwc0NhY2hlTGltaXQ6IDEwLFxuICBidWlsZFRvb2xzVmVyc2lvbjogbnVsbCxcbiAgYWxsb3dPZmZsaW5lRGV2aWNlczogZmFsc2UsXG59O1xuXG5jbGFzcyBBREIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcCh0aGlzLCBfLmNsb25lRGVlcChERUZBVUxUX09QVFMpKTtcblxuICAgIGlmIChvcHRzLnJlbW90ZUFkYkhvc3QpIHtcbiAgICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctSCcsIG9wdHMucmVtb3RlQWRiSG9zdCk7XG4gICAgfVxuICAgIC8vIFRPRE8gZmlndXJlIG91dCB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBhcyBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmVcbiAgICAvLyB1c2VkIGFueXdoZXJlLiBQcm9iYWJseSBkZXByZWNhdGUgaW4gZmF2b3Igb2Ygc2ltcGxlIG9wdHMuYWRiUG9ydFxuICAgIGlmIChvcHRzLnJlbW90ZUFkYlBvcnQpIHtcbiAgICAgIHRoaXMuYWRiUG9ydCA9IG9wdHMucmVtb3RlQWRiUG9ydDtcbiAgICB9XG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1QJywgdGhpcy5hZGJQb3J0KTtcblxuICAgIHRoaXMuaW5pdEphcnMoKTtcbiAgfVxuXG4gIGluaXRKYXJzICgpIHtcbiAgICBjb25zdCB0ZW1wSmFycyA9IFsnc2lnbi5qYXInLCAndmVyaWZ5LmphciddO1xuICAgIGZvciAoY29uc3QgamFyTmFtZSBvZiB0ZW1wSmFycykge1xuICAgICAgdGhpcy5qYXJzW2phck5hbWVdID0gcGF0aC5yZXNvbHZlKEpBUl9QQVRILCBqYXJOYW1lKTtcbiAgICB9XG4gIH1cbn1cblxuQURCLmNyZWF0ZUFEQiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFEQiAob3B0cykge1xuICBjb25zdCBhZGIgPSBuZXcgQURCKG9wdHMpO1xuICBhZGIuc2RrUm9vdCA9IGF3YWl0IHJlcXVpcmVTZGtSb290KGFkYi5zZGtSb290KTtcbiAgYXdhaXQgYWRiLmdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCgpO1xuICB0cnkge1xuICAgIGF3YWl0IGFkYi5hZGJFeGVjKFsnc3RhcnQtc2VydmVyJ10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLndhcm4oZS5zdGRlcnIgfHwgZS5tZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gYWRiO1xufTtcblxuLy8gYWRkIGFsbCB0aGUgbWV0aG9kcyB0byB0aGUgQURCIHByb3RvdHlwZVxuZm9yIChjb25zdCBbZm5OYW1lLCBmbl0gb2YgXy50b1BhaXJzKG1ldGhvZHMpKSB7XG4gIEFEQi5wcm90b3R5cGVbZm5OYW1lXSA9IGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBREI7XG5leHBvcnQgeyBBREIsIERFRkFVTFRfQURCX1BPUlQsIGdldEFuZHJvaWRCaW5hcnlQYXRoLCBnZXRTZGtSb290RnJvbUVudiB9O1xuIl0sImZpbGUiOiJsaWIvYWRiLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
