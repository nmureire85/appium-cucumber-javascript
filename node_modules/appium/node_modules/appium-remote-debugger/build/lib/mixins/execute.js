"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

var _atoms = require("../atoms");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const RPC_RESPONSE_TIMEOUT_MS = 5000;

async function executeAtom(atom, args, frames) {
  if (!this.rpcClient.isConnected) {
    throw new Error('Remote debugger is not connected');
  }

  _logger.default.debug(`Executing atom '${atom}'`);

  const script = await (0, _atoms.getScriptForAtom)(atom, args, frames);
  const value = await this.execute(script, true);

  _logger.default.debug(`Received result for atom '${atom}' execution: ${_lodash.default.truncate((0, _utils.simpleStringify)(value), {
    length: _utils.RESPONSE_LOG_LENGTH
  })}`);

  return value;
}

async function executeAtomAsync(atom, args, frames) {
  const evaluate = async (method, opts) => await this.rpcClient.send(method, Object.assign({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey,
    returnByValue: false
  }, opts));

  const promiseName = `appiumAsyncExecutePromise${_appiumSupport.util.uuidV4().replace(/-/g, '')}`;
  const script = `var res, rej;
    window.${promiseName} = new Promise(function (resolve, reject) {
      res = resolve;
      rej = reject;
    });
    window.${promiseName}.resolve = res;
    window.${promiseName}.reject = rej;
    window.${promiseName};`;
  const obj = await evaluate('Runtime.evaluate', {
    expression: script
  });
  const promiseObjectId = obj.result.objectId;
  const asyncCallBack = `function (res) {
      window.${promiseName}.resolve(res);
      window.${promiseName}Value = res;
    }`;
  await this.execute(await (0, _atoms.getScriptForAtom)(atom, args, frames, asyncCallBack));
  let res;
  const subcommandTimeout = 1000;

  try {
    res = await evaluate('Runtime.awaitPromise', {
      promiseObjectId,
      returnByValue: true,
      generatePreview: true,
      saveResult: true
    });
  } catch (err) {
    if (!err.message.includes(`'Runtime.awaitPromise' was not found`)) {
      throw err;
    }

    const retryWait = 100;
    const timeout = args.length >= 3 ? args[2] : RPC_RESPONSE_TIMEOUT_MS;
    const retries = parseInt(timeout / retryWait, 10) || 1;
    const timer = new _appiumSupport.timing.Timer().start();

    _logger.default.debug(`Waiting up to ${timeout}ms for async execute to finish`);

    res = await (0, _asyncbox.retryInterval)(retries, retryWait, async () => {
      const hasValue = await evaluate('Runtime.evaluate', {
        expression: `window.hasOwnProperty('${promiseName}Value');`,
        returnByValue: true
      });

      if (hasValue) {
        return await evaluate('Runtime.evaluate', {
          expression: `window.${promiseName}Value;`,
          returnByValue: true
        });
      }

      throw new _appiumBaseDriver.errors.TimeoutError(`Timed out waiting for asynchronous script ` + `result after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms'));`);
    });
  } finally {
    try {
      await this.executeAtom('execute_script', [`delete window.${promiseName};`, [null, null], subcommandTimeout], frames);
    } catch (ign) {}
  }

  return (0, _utils.convertResult)(res);
}

async function execute(command, override) {
  if (this.pageLoading && !override) {
    _logger.default.debug('Trying to execute but page is not loaded.');

    await this.waitForDom();
  }

  (0, _utils.checkParams)({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });

  if (this.garbageCollectOnExecute) {
    await this.garbageCollect();
  }

  _logger.default.debug(`Sending javascript command: '${_lodash.default.truncate(command, {
    length: 50
  })}'`);

  const res = await this.rpcClient.send('Runtime.evaluate', {
    expression: command,
    returnByValue: true,
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  return (0, _utils.convertResult)(res);
}

async function callFunction(objectId, fn, args) {
  (0, _utils.checkParams)({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });

  if (this.garbageCollectOnExecute) {
    await this.garbageCollect();
  }

  _logger.default.debug('Calling javascript function');

  const res = await this.rpcClient.send('Runtime.callFunctionOn', {
    objectId,
    functionDeclaration: fn,
    arguments: args,
    returnByValue: true,
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  return (0, _utils.convertResult)(res);
}

var _default = {
  executeAtom,
  executeAtomAsync,
  execute,
  callFunction
};
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
