"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

const commands = {};
exports.commands = commands;

function requireOptions(opts, requiredKeys = []) {
  const missingKeys = _lodash.default.difference(requiredKeys, _lodash.default.keys(opts));

  if (!_lodash.default.isEmpty(missingKeys)) {
    throw new Error(`The following options are required: ${missingKeys}`);
  }

  return opts;
}

commands.mobileStartService = async function mobileStartService(opts = {}) {
  const {
    intent,
    user,
    foreground
  } = requireOptions(opts, ['intent']);
  const cmd = ['am', foreground ? 'start-foreground-service' : 'start-service'];

  if (user) {
    cmd.push('--user', user);
  }

  cmd.push(intent);
  return await this.adb.shell(cmd);
};

commands.mobileStopService = async function mobileStopService(opts = {}) {
  const {
    intent,
    user
  } = requireOptions(opts, ['intent']);
  const cmd = ['am', 'stop-service'];

  if (user) {
    cmd.push('--user', user);
  }

  cmd.push(intent);
  return await this.adb.shell(cmd);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zZXJ2aWNlcy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsInJlcXVpcmVPcHRpb25zIiwib3B0cyIsInJlcXVpcmVkS2V5cyIsIm1pc3NpbmdLZXlzIiwiXyIsImRpZmZlcmVuY2UiLCJrZXlzIiwiaXNFbXB0eSIsIkVycm9yIiwibW9iaWxlU3RhcnRTZXJ2aWNlIiwiaW50ZW50IiwidXNlciIsImZvcmVncm91bmQiLCJjbWQiLCJwdXNoIiwiYWRiIiwic2hlbGwiLCJtb2JpbGVTdG9wU2VydmljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7OztBQUVBLFNBQVNDLGNBQVQsQ0FBeUJDLElBQXpCLEVBQStCQyxZQUFZLEdBQUcsRUFBOUMsRUFBa0Q7QUFDaEQsUUFBTUMsV0FBVyxHQUFHQyxnQkFBRUMsVUFBRixDQUFhSCxZQUFiLEVBQTJCRSxnQkFBRUUsSUFBRixDQUFPTCxJQUFQLENBQTNCLENBQXBCOztBQUNBLE1BQUksQ0FBQ0csZ0JBQUVHLE9BQUYsQ0FBVUosV0FBVixDQUFMLEVBQTZCO0FBQzNCLFVBQU0sSUFBSUssS0FBSixDQUFXLHVDQUFzQ0wsV0FBWSxFQUE3RCxDQUFOO0FBQ0Q7O0FBQ0QsU0FBT0YsSUFBUDtBQUNEOztBQW9CREYsUUFBUSxDQUFDVSxrQkFBVCxHQUE4QixlQUFlQSxrQkFBZixDQUFtQ1IsSUFBSSxHQUFHLEVBQTFDLEVBQThDO0FBQzFFLFFBQU07QUFDSlMsSUFBQUEsTUFESTtBQUVKQyxJQUFBQSxJQUZJO0FBR0pDLElBQUFBO0FBSEksTUFJRlosY0FBYyxDQUFDQyxJQUFELEVBQU8sQ0FBQyxRQUFELENBQVAsQ0FKbEI7QUFLQSxRQUFNWSxHQUFHLEdBQUcsQ0FDVixJQURVLEVBQ0pELFVBQVUsR0FBRywwQkFBSCxHQUFnQyxlQUR0QyxDQUFaOztBQUdBLE1BQUlELElBQUosRUFBVTtBQUNSRSxJQUFBQSxHQUFHLENBQUNDLElBQUosQ0FBUyxRQUFULEVBQW1CSCxJQUFuQjtBQUNEOztBQUNERSxFQUFBQSxHQUFHLENBQUNDLElBQUosQ0FBU0osTUFBVDtBQUNBLFNBQU8sTUFBTSxLQUFLSyxHQUFMLENBQVNDLEtBQVQsQ0FBZUgsR0FBZixDQUFiO0FBQ0QsQ0FkRDs7QUFnQ0FkLFFBQVEsQ0FBQ2tCLGlCQUFULEdBQTZCLGVBQWVBLGlCQUFmLENBQWtDaEIsSUFBSSxHQUFHLEVBQXpDLEVBQTZDO0FBQ3hFLFFBQU07QUFDSlMsSUFBQUEsTUFESTtBQUVKQyxJQUFBQTtBQUZJLE1BR0ZYLGNBQWMsQ0FBQ0MsSUFBRCxFQUFPLENBQUMsUUFBRCxDQUFQLENBSGxCO0FBSUEsUUFBTVksR0FBRyxHQUFHLENBQ1YsSUFEVSxFQUNKLGNBREksQ0FBWjs7QUFHQSxNQUFJRixJQUFKLEVBQVU7QUFDUkUsSUFBQUEsR0FBRyxDQUFDQyxJQUFKLENBQVMsUUFBVCxFQUFtQkgsSUFBbkI7QUFDRDs7QUFDREUsRUFBQUEsR0FBRyxDQUFDQyxJQUFKLENBQVNKLE1BQVQ7QUFDQSxTQUFPLE1BQU0sS0FBS0ssR0FBTCxDQUFTQyxLQUFULENBQWVILEdBQWYsQ0FBYjtBQUNELENBYkQ7O2VBaUJlZCxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuZnVuY3Rpb24gcmVxdWlyZU9wdGlvbnMgKG9wdHMsIHJlcXVpcmVkS2V5cyA9IFtdKSB7XG4gIGNvbnN0IG1pc3NpbmdLZXlzID0gXy5kaWZmZXJlbmNlKHJlcXVpcmVkS2V5cywgXy5rZXlzKG9wdHMpKTtcbiAgaWYgKCFfLmlzRW1wdHkobWlzc2luZ0tleXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIHJlcXVpcmVkOiAke21pc3NpbmdLZXlzfWApO1xuICB9XG4gIHJldHVybiBvcHRzO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXJ0U2VydmljZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gaW50ZW50IC0gVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgaW50ZW50IHRvIHN0YXJ0LCBmb3IgZXhhbXBsZVxuICogYGNvbS5zb21lLnBhY2thZ2UubmFtZS8uWW91clNlcnZpY2VTdWJDbGFzc05hbWVgLiBUaGlzIG9wdGlvbiBpcyBtYW5kYXRvcnkuXG4gKiBAcHJvcGVydHkge3N0cmluZ3xudW1iZXJ9IHVzZXIgWydjdXJyZW50J10gLSBUaGUgdXNlciBJRCBmb3Igd2hpY2ggdGhlIHNlcnZpY2UgaXMgc3RhcnRlZC5cbiAqIFRoZSBgY3VycmVudGAgdXNlciBpZCBpcyB1c2VkIGJ5IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZm9yZWdyb3VuZCBbZmFsc2VdIC0gU2V0IGl0IHRvIGB0cnVlYCBpZiB5b3VyIHNlcnZpY2UgbXVzdCBiZVxuICogc3RhcnRlZCBhcyBmb3JlZ3JvdW5kIHNlcnZpY2UuXG4gKi9cblxuLyoqXG4gKiBTdGFydHMgdGhlIGdpdmVuIHNlcnZpY2UgaW50ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RhcnRTZXJ2aWNlT3B0aW9uc30gb3B0c1xuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbW1hbmQgb3V0cHV0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGEgZmFpbHVyZSB3aGlsZSBzdGFydGluZyB0aGUgc2VydmljZVxuICogb3IgcmVxdWlyZWQgb3B0aW9ucyBhcmUgbWlzc2luZ1xuICovXG5jb21tYW5kcy5tb2JpbGVTdGFydFNlcnZpY2UgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTdGFydFNlcnZpY2UgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgaW50ZW50LFxuICAgIHVzZXIsXG4gICAgZm9yZWdyb3VuZCxcbiAgfSA9IHJlcXVpcmVPcHRpb25zKG9wdHMsIFsnaW50ZW50J10pO1xuICBjb25zdCBjbWQgPSBbXG4gICAgJ2FtJywgZm9yZWdyb3VuZCA/ICdzdGFydC1mb3JlZ3JvdW5kLXNlcnZpY2UnIDogJ3N0YXJ0LXNlcnZpY2UnLFxuICBdO1xuICBpZiAodXNlcikge1xuICAgIGNtZC5wdXNoKCctLXVzZXInLCB1c2VyKTtcbiAgfVxuICBjbWQucHVzaChpbnRlbnQpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5hZGIuc2hlbGwoY21kKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RvcFNlcnZpY2VPcHRpb25zXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IGludGVudCAtIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIGludGVudCB0byBzdG9wLCBmb3IgZXhhbXBsZVxuICogYGNvbS5zb21lLnBhY2thZ2UubmFtZS8uWW91clNlcnZpY2VTdWJDbGFzc05hbWVgLiBUaGlzIG9wdGlvbiBpcyBtYW5kYXRvcnkuXG4gKiBAcHJvcGVydHkge3N0cmluZ3xudW1iZXJ9IHVzZXIgWydjdXJyZW50J10gLSBUaGUgdXNlciBJRCBmb3Igd2hpY2ggdGhlIHNlcnZpY2UgaXMgcnVubmluZy5cbiAqIFRoZSBgY3VycmVudGAgdXNlciBpZCBpcyB1c2VkIGJ5IGRlZmF1bHRcbiAqL1xuXG4vKipcbiAqIFN0b3BzIHRoZSBnaXZlbiBzZXJ2aWNlIGludGVudC5cbiAqXG4gKiBAcGFyYW0ge1N0b3BTZXJ2aWNlT3B0aW9uc30gb3B0c1xuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbW1hbmQgb3V0cHV0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGEgZmFpbHVyZSB3aGlsZSBzdG9wcGluZyB0aGUgc2VydmljZVxuICogb3IgcmVxdWlyZWQgb3B0aW9ucyBhcmUgbWlzc2luZ1xuICovXG5jb21tYW5kcy5tb2JpbGVTdG9wU2VydmljZSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVN0b3BTZXJ2aWNlIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGludGVudCxcbiAgICB1c2VyLFxuICB9ID0gcmVxdWlyZU9wdGlvbnMob3B0cywgWydpbnRlbnQnXSk7XG4gIGNvbnN0IGNtZCA9IFtcbiAgICAnYW0nLCAnc3RvcC1zZXJ2aWNlJyxcbiAgXTtcbiAgaWYgKHVzZXIpIHtcbiAgICBjbWQucHVzaCgnLS11c2VyJywgdXNlcik7XG4gIH1cbiAgY21kLnB1c2goaW50ZW50KTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuYWRiLnNoZWxsKGNtZCk7XG59O1xuXG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3NlcnZpY2VzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
