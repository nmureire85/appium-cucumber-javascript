"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.INSTALLATION_PROXY_SERVICE_NAME = exports.InstallationProxyService = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseService = require("../base-service");

const INSTALLATION_PROXY_SERVICE_NAME = 'com.apple.mobile.installation_proxy';
exports.INSTALLATION_PROXY_SERVICE_NAME = INSTALLATION_PROXY_SERVICE_NAME;

class InstallationProxyService extends _baseService.BaseServicePlist {
  async installApplication(path, clientOptions = {}, timeout = 60000) {
    const request = {
      Command: 'Install',
      PackagePath: path,
      ClientOptions: clientOptions
    };

    this._plistService.sendPlist(request);

    return await this._waitMessageCompletion(timeout);
  }

  async listApplications(opts = {}) {
    const request = {
      Command: 'Browse',
      ClientOptions: {}
    };

    if (opts.applicationType) {
      request.ClientOptions.ApplicationType = opts.applicationType;
    }

    if (opts.returnAttributes) {
      request.ClientOptions.ReturnAttributes = opts.returnAttributes;
    }

    this._plistService.sendPlist(request);

    const messages = await this._waitMessageCompletion();
    return messages.reduce(function (acc, message) {
      if (!message.CurrentList) {
        return acc;
      }

      message.CurrentList.forEach(function (app) {
        acc[app.CFBundleIdentifier] = app;
      });
      return acc;
    }, {});
  }

  async lookupApplications(opts = {}) {
    const request = {
      Command: 'Lookup',
      ClientOptions: {}
    };

    if (opts.bundleIds) {
      request.ClientOptions.BundleIDs = _lodash.default.isString(opts.bundleIds) ? [opts.bundleIds] : opts.bundleIds;
    }

    if (opts.applicationType) {
      request.ClientOptions.ApplicationType = opts.applicationType;
    }

    if (opts.returnAttributes) {
      request.ClientOptions.ReturnAttributes = opts.returnAttributes;
    }

    this._plistService.sendPlist(request);

    const messages = await this._waitMessageCompletion();

    for (const message of messages) {
      if (message.LookupResult) {
        return message.LookupResult;
      }
    }

    throw new Error(`Could not find LookupResult in the response: Response: ${JSON.stringify(messages)}`);
  }

  async uninstallApplication(bundleId, timeout = 20000) {
    const request = {
      Command: 'Uninstall',
      ApplicationIdentifier: bundleId
    };

    this._plistService.sendPlist(request);

    return await this._waitMessageCompletion(timeout);
  }

  async _waitMessageCompletion(timeout) {
    let messages = [];

    for (let i = 0; i < Number.MAX_SAFE_INTEGER; i++) {
      const data = await this._plistService.receivePlist(timeout);
      messages.push(data);

      if (this._isFinished(data)) {
        return messages;
      }
    }
  }

  _isFinished(response) {
    if (response.Error) {
      throw new Error(`Unexpected data: ${JSON.stringify(response)}`);
    }

    if (!response.Status) {
      return false;
    }

    return response.Status === 'Complete';
  }

}

exports.InstallationProxyService = InstallationProxyService;
var _default = InstallationProxyService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
