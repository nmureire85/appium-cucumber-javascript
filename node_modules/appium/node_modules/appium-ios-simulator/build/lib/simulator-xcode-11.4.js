"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-11"));

class SimulatorXcode11_4 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this._locationMenu = 'Features';
  }

  async setAppearance(value) {
    await this.simctl.setAppearance(_lodash.default.toLower(value));
  }

  async getAppearance() {
    return await this.simctl.getAppearance();
  }

  async addCertificate(payload, opts = {}) {
    const {
      isRoot = true
    } = opts;
    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';
    await this.simctl[methodName](payload, {
      raw: true
    });
    return true;
  }

  async pushNotification(payload) {
    await this.simctl.pushNotification(payload);
  }

  async setPermissions(bundleId, permissionsMapping) {
    return await super.setPermissions(bundleId, permissionsMapping);
  }

  async clearKeychains() {
    await this.simctl.resetKeychain();
  }

  async launchWindow(isUiClientRunning, opts) {
    if (!isUiClientRunning) {
      await this.startUIClient(opts);
    }

    await this.boot();
  }

}

var _default = SimulatorXcode11_4;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTEuNC5qcyJdLCJuYW1lcyI6WyJTaW11bGF0b3JYY29kZTExXzQiLCJTaW11bGF0b3JYY29kZTExIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwieGNvZGVWZXJzaW9uIiwiX2xvY2F0aW9uTWVudSIsInNldEFwcGVhcmFuY2UiLCJ2YWx1ZSIsInNpbWN0bCIsIl8iLCJ0b0xvd2VyIiwiZ2V0QXBwZWFyYW5jZSIsImFkZENlcnRpZmljYXRlIiwicGF5bG9hZCIsIm9wdHMiLCJpc1Jvb3QiLCJtZXRob2ROYW1lIiwicmF3IiwicHVzaE5vdGlmaWNhdGlvbiIsInNldFBlcm1pc3Npb25zIiwiYnVuZGxlSWQiLCJwZXJtaXNzaW9uc01hcHBpbmciLCJjbGVhcktleWNoYWlucyIsInJlc2V0S2V5Y2hhaW4iLCJsYXVuY2hXaW5kb3ciLCJpc1VpQ2xpZW50UnVubmluZyIsInN0YXJ0VUlDbGllbnQiLCJib290Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLGtCQUFOLFNBQWlDQyx1QkFBakMsQ0FBa0Q7QUFDaERDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBRixFQUFRQyxZQUFSLEVBQXNCO0FBQy9CLFVBQU1ELElBQU4sRUFBWUMsWUFBWjtBQUlBLFNBQUtDLGFBQUwsR0FBcUIsVUFBckI7QUFDRDs7QUFZRCxRQUFNQyxhQUFOLENBQXFCQyxLQUFyQixFQUE0QjtBQUMxQixVQUFNLEtBQUtDLE1BQUwsQ0FBWUYsYUFBWixDQUEwQkcsZ0JBQUVDLE9BQUYsQ0FBVUgsS0FBVixDQUExQixDQUFOO0FBQ0Q7O0FBYUQsUUFBTUksYUFBTixHQUF1QjtBQUNyQixXQUFPLE1BQU0sS0FBS0gsTUFBTCxDQUFZRyxhQUFaLEVBQWI7QUFDRDs7QUFrQkQsUUFBTUMsY0FBTixDQUFzQkMsT0FBdEIsRUFBK0JDLElBQUksR0FBRyxFQUF0QyxFQUEwQztBQUN4QyxVQUFNO0FBQ0pDLE1BQUFBLE1BQU0sR0FBRztBQURMLFFBRUZELElBRko7QUFHQSxVQUFNRSxVQUFVLEdBQUdELE1BQU0sR0FBRyxvQkFBSCxHQUEwQixnQkFBbkQ7QUFDQSxVQUFNLEtBQUtQLE1BQUwsQ0FBWVEsVUFBWixFQUF3QkgsT0FBeEIsRUFBaUM7QUFBQ0ksTUFBQUEsR0FBRyxFQUFFO0FBQU4sS0FBakMsQ0FBTjtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQW9CRCxRQUFNQyxnQkFBTixDQUF3QkwsT0FBeEIsRUFBaUM7QUFDL0IsVUFBTSxLQUFLTCxNQUFMLENBQVlVLGdCQUFaLENBQTZCTCxPQUE3QixDQUFOO0FBQ0Q7O0FBS0QsUUFBTU0sY0FBTixDQUFzQkMsUUFBdEIsRUFBZ0NDLGtCQUFoQyxFQUFvRDtBQUNsRCxXQUFPLE1BQU0sTUFBTUYsY0FBTixDQUFxQkMsUUFBckIsRUFBK0JDLGtCQUEvQixDQUFiO0FBS0Q7O0FBS0QsUUFBTUMsY0FBTixHQUF3QjtBQUN0QixVQUFNLEtBQUtkLE1BQUwsQ0FBWWUsYUFBWixFQUFOO0FBQ0Q7O0FBTUQsUUFBTUMsWUFBTixDQUFvQkMsaUJBQXBCLEVBQXVDWCxJQUF2QyxFQUE2QztBQUczQyxRQUFJLENBQUNXLGlCQUFMLEVBQXdCO0FBQ3RCLFlBQU0sS0FBS0MsYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjtBQUNEOztBQUNELFVBQU0sS0FBS2EsSUFBTCxFQUFOO0FBQ0Q7O0FBbEgrQzs7ZUFzSG5DM0Isa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlMTEgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtMTEnO1xuXG5jbGFzcyBTaW11bGF0b3JYY29kZTExXzQgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTExIHtcbiAgY29uc3RydWN0b3IgKHVkaWQsIHhjb2RlVmVyc2lvbikge1xuICAgIHN1cGVyKHVkaWQsIHhjb2RlVmVyc2lvbik7XG5cbiAgICAvLyBmb3Igc2V0dGluZyB0aGUgbG9jYXRpb24gdXNpbmcgQXBwbGVTY3JpcHQsIHRoZSB0b3AtbGV2ZWwgbWVudSB0aHJvdWdoIHdoaWNoXG4gICAgLy8gdGhlICdMb2NhdGlvbicgb3B0aW9uIGlzIGZvdW5kXG4gICAgdGhpcy5fbG9jYXRpb25NZW51ID0gJ0ZlYXR1cmVzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogU2V0cyBVSSBhcHBlYXJhbmNlIHN0eWxlLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIGJvb3RlZCBzaW11bGF0b3IuXG4gICAqXG4gICAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb25lIG9mIHBvc3NpYmxlIGFwcGVhcmFuY2UgdmFsdWVzOlxuICAgKiAtIGRhcms6IHRvIHN3aXRjaCB0byB0aGUgRGFyayBtb2RlXG4gICAqIC0gbGlnaHQ6IHRvIHN3aXRjaCB0byB0aGUgTGlnaHQgbW9kZVxuICAgKi9cbiAgYXN5bmMgc2V0QXBwZWFyYW5jZSAodmFsdWUpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5zZXRBcHBlYXJhbmNlKF8udG9Mb3dlcih2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBHZXRzIHRoZSBjdXJyZW50IFVJIGFwcGVhcmFuY2Ugc3R5bGVcbiAgICogVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSBib290ZWQgc2ltdWxhdG9yLlxuICAgKlxuICAgKiBAc2luY2UgWGNvZGUgU0RLIDExLjRcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGN1cnJlbnQgVUkgYXBwZWFyYW5jZSBzdHlsZS5cbiAgICogUG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICogLSBkYXJrOiB0byBzd2l0Y2ggdG8gdGhlIERhcmsgbW9kZVxuICAgKiAtIGxpZ2h0OiB0byBzd2l0Y2ggdG8gdGhlIExpZ2h0IG1vZGVcbiAgICovXG4gIGFzeW5jIGdldEFwcGVhcmFuY2UgKCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNpbWN0bC5nZXRBcHBlYXJhbmNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gQ2VydGlmaWNhdGVPcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNSb290IFt0cnVlXSAtIFdoZXRoZXIgdG8gaW5zdGFsbCB0aGUgZ2l2ZW5cbiAgICogY2VydGlmaWNhdGUgaW50byB0aGUgVHJ1c3RlZCBSb290IHN0b3JlIChgdHJ1ZWApIG9yIHRvIHRoZSBrZXljaGFpblxuICAgKiAoYGZhbHNlYClcbiAgICovXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBBZGRzIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSB0byB0aGUgYm9vdGVkIHNpbXVsYXRvci5cbiAgICogVGhlIHNpbXVsYXRvciBjb3VsZCBiZSBpbiBib3RoIHJ1bm5pbmcgYW5kIHNodXRkb3duIHN0YXRlc1xuICAgKiBpbiBvcmRlciBmb3IgdGhpcyBtZXRob2QgdG8gcnVuIGFzIGV4cGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF5bG9hZCB0aGUgY29udGVudCBvZiB0aGUgUEVNIGNlcnRpZmljYXRlXG4gICAqIEBwYXJhbSB7Q2VydGlmaWNhdGVPcHRpb25zfSBvcHRzXG4gICAqL1xuICBhc3luYyBhZGRDZXJ0aWZpY2F0ZSAocGF5bG9hZCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNSb290ID0gdHJ1ZSxcbiAgICB9ID0gb3B0cztcbiAgICBjb25zdCBtZXRob2ROYW1lID0gaXNSb290ID8gJ2FkZFJvb3RDZXJ0aWZpY2F0ZScgOiAnYWRkQ2VydGlmaWNhdGUnO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsW21ldGhvZE5hbWVdKHBheWxvYWQsIHtyYXc6IHRydWV9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogU2ltdWxhdGVzIHB1c2ggbm90aWZpY2F0aW9uIGRlbGl2ZXJ5IHRvIHRoZSBib290ZWQgc2ltdWxhdG9yXG4gICAqXG4gICAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCAtIFRoZSBvYmplY3QgdGhhdCBkZXNjcmliZXMgQXBwbGUgcHVzaCBub3RpZmljYXRpb24gY29udGVudC5cbiAgICogSXQgbXVzdCBjb250YWluIGEgdG9wLWxldmVsIFwiU2ltdWxhdG9yIFRhcmdldCBCdW5kbGVcIiBrZXkgd2l0aCBhIHN0cmluZyB2YWx1ZSBtYXRjaGluZ1xuICAgKiB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9u4oCYcyBidW5kbGUgaWRlbnRpZmllciBhbmQgXCJhcHNcIiBrZXkgd2l0aCB2YWxpZCBBcHBsZSBQdXNoIE5vdGlmaWNhdGlvbiB2YWx1ZXMuXG4gICAqIEZvciBleGFtcGxlOlxuICAgKiB7XG4gICAqICAgXCJTaW11bGF0b3IgVGFyZ2V0IEJ1bmRsZVwiOiBcImNvbS5hcHBsZS5QcmVmZXJlbmNlc1wiLFxuICAgKiAgIFwiYXBzXCI6IHtcbiAgICogICAgIFwiYWxlcnRcIjogXCJUaGlzIGlzIGEgc2ltdWxhdGVkIG5vdGlmaWNhdGlvbiFcIixcbiAgICogICAgIFwiYmFkZ2VcIjogMyxcbiAgICogICAgIFwic291bmRcIjogXCJkZWZhdWx0XCJcbiAgICogICB9XG4gICAqIH1cbiAgICovXG4gIGFzeW5jIHB1c2hOb3RpZmljYXRpb24gKHBheWxvYWQpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5wdXNoTm90aWZpY2F0aW9uKHBheWxvYWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgc2V0UGVybWlzc2lvbnMgKGJ1bmRsZUlkLCBwZXJtaXNzaW9uc01hcHBpbmcpIHtcbiAgICByZXR1cm4gYXdhaXQgc3VwZXIuc2V0UGVybWlzc2lvbnMoYnVuZGxlSWQsIHBlcm1pc3Npb25zTWFwcGluZyk7XG5cbiAgICAvLyBUT0RPOiBTd2l0Y2ggdG8gYHNpbWN0bCBwcml2YWN5YCBjYWxsIGFmdGVyIEFwcGxlXG4gICAgLy8gZml4ZXMgdGhlIGNvbW1hbmQgKGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtL2lzc3Vlcy8xNDM1NSlcbiAgICAvLyBTb3VyY2UgUFI6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtLWlvcy1zaW11bGF0b3IvcHVsbC8yNzlcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGNsZWFyS2V5Y2hhaW5zICgpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5yZXNldEtleWNoYWluKCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICogQG92ZXJyaWRlXG4gICAqICovXG4gIGFzeW5jIGxhdW5jaFdpbmRvdyAoaXNVaUNsaWVudFJ1bm5pbmcsIG9wdHMpIHtcbiAgICAvLyBJbiB4Y29kZSAxMS40LCBVSSBDbGllbnQgbXVzdCBiZSBmaXJzdCBsYXVuY2hlZCwgb3RoZXJ3aXNlXG4gICAgLy8gc2ltIHdpbmRvdyBzdGF5cyBtaW5pbWl6ZWRcbiAgICBpZiAoIWlzVWlDbGllbnRSdW5uaW5nKSB7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0VUlDbGllbnQob3B0cyk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuYm9vdCgpO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yWGNvZGUxMV80O1xuIl0sImZpbGUiOiJsaWIvc2ltdWxhdG9yLXhjb2RlLTExLjQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
