"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SPRINGBOARD_BUNDLE_ID = exports.BOOT_COMPLETED_EVENT = exports.SimulatorXcode6 = exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _appiumXcode = _interopRequireWildcard(require("appium-xcode"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils.js");

var _asyncbox = require("asyncbox");

var settings = _interopRequireWildcard(require("./settings"));

var _teen_process = require("teen_process");

var _tailUntil = require("./tail-until.js");

var _index = _interopRequireDefault(require("./extensions/index"));

var _events = require("events");

var _calendar = _interopRequireDefault(require("./calendar"));

var _permissions = _interopRequireDefault(require("./permissions"));

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

const STARTUP_TIMEOUT = 60 * 1000;
const EXTRA_STARTUP_TIME = 2000;
const UI_CLIENT_ACCESS_GUARD = new _asyncLock.default();
const UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';
const SPRINGBOARD_BUNDLE_ID = 'com.apple.SpringBoard';
exports.SPRINGBOARD_BUNDLE_ID = SPRINGBOARD_BUNDLE_ID;
const BOOT_COMPLETED_EVENT = 'bootCompleted';
exports.BOOT_COMPLETED_EVENT = BOOT_COMPLETED_EVENT;

class SimulatorXcode6 extends _events.EventEmitter {
  constructor(udid, xcodeVersion) {
    super();
    this.udid = String(udid);
    this.simctl = new _nodeSimctl.default({
      udid: this.udid
    });
    this.xcodeVersion = xcodeVersion;
    this._platformVersion = null;
    this.keychainPath = _path.default.resolve(this.getDir(), 'Library', 'Keychains');
    this.simulatorApp = 'iOS Simulator.app';
    this.appDataBundlePaths = {};
    this.isFreshFiles = ['Library/ConfigurationProfiles', 'Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
    this.extraStartupTime = EXTRA_STARTUP_TIME;
    this.calendar = new _calendar.default(xcodeVersion, this.getDir());
    this.permissions = new _permissions.default(xcodeVersion, this.getDir(), this.udid);
  }

  get uiClientBundleId() {
    return UI_CLIENT_BUNDLE_ID;
  }

  async getUIClientPid() {
    let stdout;

    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('pgrep', ['-fn', `${this.simulatorApp}/Contents/MacOS/`]));
    } catch (e) {
      return null;
    }

    if (isNaN(parseInt(stdout, 10))) {
      return null;
    }

    stdout = stdout.trim();

    _logger.default.debug(`Got Simulator UI client PID: ${stdout}`);

    return stdout;
  }

  async isUIClientRunning() {
    return !_lodash.default.isNull(await this.getUIClientPid());
  }

  get startupTimeout() {
    return STARTUP_TIMEOUT;
  }

  async getPlatformVersion() {
    if (!this._platformVersion) {
      let {
        sdk
      } = await this.stat();
      this._platformVersion = sdk;
    }

    return this._platformVersion;
  }

  getRootDir() {
    let home = process.env.HOME;
    return _path.default.resolve(home, 'Library', 'Developer', 'CoreSimulator', 'Devices');
  }

  getDir() {
    return _path.default.resolve(this.getRootDir(), this.udid, 'data');
  }

  getLogDir() {
    let home = process.env.HOME;
    return _path.default.resolve(home, 'Library', 'Logs', 'CoreSimulator', this.udid);
  }

  async installApp(app) {
    return await this.simctl.installApp(app);
  }

  async isAppInstalled(bundleId, appFile = null) {
    let appDirs = await this.getAppDirs(appFile, bundleId);
    return appDirs.length !== 0;
  }

  async getUserInstalledBundleIdsByBundleName(bundleName) {
    const rootUserAppDir = await this.buildBundlePathMap('Bundle');
    const bundleIds = [];

    if (_lodash.default.isEmpty(rootUserAppDir)) {
      return bundleIds;
    }

    for (const [bundleId, userAppDirPath] of Object.entries(rootUserAppDir)) {
      const appFile = (await _appiumSupport.fs.readdir(userAppDirPath)).find(file => _path.default.extname(file).toLowerCase() === '.app');

      const infoPlistPath = _path.default.resolve(userAppDirPath, appFile, 'Info.plist');

      if (!(await _appiumSupport.fs.exists(infoPlistPath))) {
        continue;
      }

      try {
        const infoPlist = await _appiumSupport.plist.parsePlistFile(infoPlistPath, false);

        if (infoPlist.CFBundleName === bundleName) {
          bundleIds.push(bundleId);
        }
      } catch (err) {
        _logger.default.warn(`Failed to read plist ${infoPlistPath}. Original error '${err.message}'`);

        continue;
      }
    }

    _logger.default.debug(`The simulator has '${bundleIds.length}' bundles which have '${bundleName}' as their 'CFBundleName':`);

    for (const bundleId of bundleIds) {
      _logger.default.debug(`    '${bundleId}'`);
    }

    return bundleIds;
  }

  async getAppDir(id, subDir = 'Data') {
    this.appDataBundlePaths[subDir] = this.appDataBundlePaths[subDir] || {};

    if (_lodash.default.isEmpty(this.appDataBundlePaths[subDir]) && !(await this.isFresh())) {
      this.appDataBundlePaths[subDir] = await this.buildBundlePathMap(subDir);
    }

    return this.appDataBundlePaths[subDir][id];
  }

  async buildBundlePathMap(subDir = 'Data') {
    _logger.default.debug('Building bundle path map');

    let applicationList;
    let pathBundlePair;

    if ((await this.getPlatformVersion()) === '7.1') {
      applicationList = _path.default.resolve(this.getDir(), 'Applications');

      pathBundlePair = async dir => {
        dir = _path.default.resolve(applicationList, dir);
        let appFiles = await _appiumSupport.fs.glob(`${dir}/*.app`);
        let bundleId = appFiles[0].match(/.*\/(.*)\.app/)[1];
        return {
          path: dir,
          bundleId
        };
      };
    } else {
      applicationList = _path.default.resolve(this.getDir(), 'Containers', subDir, 'Application');

      let readBundleId = async dir => {
        let plist = _path.default.resolve(dir, '.com.apple.mobile_container_manager.metadata.plist');

        let metadata = await settings.read(plist);
        return metadata.MCMMetadataIdentifier;
      };

      pathBundlePair = async dir => {
        dir = _path.default.resolve(applicationList, dir);
        let bundleId = await readBundleId(dir);
        return {
          path: dir,
          bundleId
        };
      };
    }

    if (!(await _appiumSupport.fs.exists(applicationList))) {
      _logger.default.warn(`No directory path '${applicationList}'`);

      return {};
    }

    let bundlePathDirs = await _appiumSupport.fs.readdir(applicationList);
    let bundlePathPairs = await (0, _asyncbox.asyncmap)(bundlePathDirs, async function (dir) {
      return await pathBundlePair(dir);
    }, false);
    return bundlePathPairs.reduce((bundleMap, bundlePath) => {
      bundleMap[bundlePath.bundleId] = bundlePath.path;
      return bundleMap;
    }, {});
  }

  async stat() {
    for (let [sdk, deviceArr] of _lodash.default.toPairs(await this.simctl.getDevices())) {
      for (let device of deviceArr) {
        if (device.udid === this.udid) {
          device.sdk = sdk;
          return device;
        }
      }
    }

    return {};
  }

  async isFresh() {
    let files = this.isFreshFiles;
    let pv = await this.getPlatformVersion();

    if (pv !== '7.1') {
      files.push('Library/Preferences/com.apple.Preferences.plist');
    } else {
      files.push('Applications');
    }

    const dir = this.getDir();
    files = files.map(s => _path.default.resolve(dir, s));
    const existences = await (0, _asyncbox.asyncmap)(files, async f => await _appiumSupport.fs.hasAccess(f));
    const fresh = _lodash.default.compact(existences).length !== files.length;

    _logger.default.debug(`Checking whether simulator has been run before: ${fresh ? 'no' : 'yes'}`);

    return fresh;
  }

  async isRunning() {
    let stat = await this.stat();
    return stat.state === 'Booted';
  }

  async waitForBoot(startupTimeout) {
    let bootedIndicator = await this.getBootedIndicatorString();
    await this.tailLogsUntil(bootedIndicator, startupTimeout);

    _logger.default.debug(`Waiting an extra ${this.extraStartupTime}ms for the simulator to really finish booting`);

    await _bluebird.default.delay(this.extraStartupTime);

    _logger.default.debug('Done waiting extra time for simulator');

    this.emit(BOOT_COMPLETED_EVENT);
  }

  async getBootedIndicatorString() {
    let indicator;
    let platformVersion = await this.getPlatformVersion();

    switch (platformVersion) {
      case '7.1':
      case '8.1':
      case '8.2':
      case '8.3':
      case '8.4':
        indicator = 'profiled: Service starting...';
        break;

      case '9.0':
      case '9.1':
      case '9.2':
      case '9.3':
        indicator = 'System app "com.apple.springboard" finished startup';
        break;

      case '10.0':
        indicator = 'Switching to keyboard';
        break;

      default:
        _logger.default.warn(`No boot indicator case for platform version '${platformVersion}'`);

        indicator = 'no boot indicator string available';
    }

    return indicator;
  }

  async startUIClient(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, {
      scaleFactor: null,
      connectHardwareKeyboard: false,
      pasteboardAutomaticSync: 'off',
      tracePointer: false,
      startupTimeout: this.startupTimeout
    });

    const simulatorApp = _path.default.resolve(await (0, _appiumXcode.getPath)(), 'Applications', this.simulatorApp);

    const args = ['-Fn', simulatorApp, '--args', '-CurrentDeviceUDID', this.udid, '-RotateWindowWhenSignaledByGuest', '1'];

    if (opts.scaleFactor) {
      const stat = await this.stat();
      const formattedDeviceName = stat.name.replace(/\s+/g, '-');
      const argumentName = `-SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.${formattedDeviceName}`;
      args.push(argumentName, opts.scaleFactor);
    }

    if (_lodash.default.isBoolean(opts.connectHardwareKeyboard)) {
      args.push('-ConnectHardwareKeyboard', `${+opts.connectHardwareKeyboard}`);
    }

    if (opts.tracePointer === true) {
      args.push('-ShowSingleTouches', '1', '-ShowPinches', '1', '-ShowPinchPivotPoint', '1', '-HighlightEdgeGestures', '1');
    }

    switch (_lodash.default.lowerCase(opts.pasteboardAutomaticSync)) {
      case 'on':
        args.push('-PasteboardAutomaticSync', '1');
        break;

      case 'off':
        args.push('-PasteboardAutomaticSync', '0');
        break;

      case 'system':
        break;

      default:
        _logger.default.warn(`['on', 'off' or 'system'] are available as the pasteboard automatic sync option. Defaulting to 'off'.`);

        args.push('-PasteboardAutomaticSync', '0');
    }

    _logger.default.info(`Starting Simulator UI with command: open ${args.join(' ')}`);

    try {
      await (0, _teen_process.exec)('open', args, {
        timeout: opts.startupTimeout
      });
    } catch (err) {
      if (!(err.stdout || '').includes('-10825') && !(err.stderr || '').includes('-10825')) {
        throw err;
      }

      _logger.default.warn(`Error while opening UI: ${err.stdout || err.stderr}. Continuing`);
    }
  }

  async run(opts = {}) {
    opts = Object.assign({
      startupTimeout: this.startupTimeout
    }, opts);
    const {
      state
    } = await this.stat();
    const isServerRunning = state === 'Booted';
    const isUIClientRunning = await this.isUIClientRunning();

    if (isServerRunning && isUIClientRunning) {
      _logger.default.info(`Both Simulator with UDID ${this.udid} and the UI client are currently running`);

      return;
    }

    const timer = new _appiumSupport.timing.Timer().start();

    try {
      await this.shutdown();
    } catch (err) {
      _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
    }

    await this.startUIClient(opts);
    await this.waitForBoot(opts.startupTimeout);

    _logger.default.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }

  async clean() {
    await this.endSimulatorDaemon();

    _logger.default.info(`Cleaning simulator ${this.udid}`);

    await this.simctl.eraseDevice(10000);
  }

  async scrubCustomApp(appFile, appBundleId) {
    return await this.cleanCustomApp(appFile, appBundleId, true);
  }

  async cleanCustomApp(appFile, appBundleId, scrub = false) {
    _logger.default.debug(`Cleaning app data files for '${appFile}', '${appBundleId}'`);

    if (!scrub) {
      _logger.default.debug(`Deleting app altogether`);
    }

    let appDirs = await this.getAppDirs(appFile, appBundleId, scrub);

    if (appDirs.length === 0) {
      _logger.default.debug('Could not find app directories to delete. It is probably not installed');

      return;
    }

    let deletePromises = [];

    for (let dir of appDirs) {
      _logger.default.debug(`Deleting directory: '${dir}'`);

      deletePromises.push(_appiumSupport.fs.rimraf(dir));
    }

    if ((await this.getPlatformVersion()) >= 8) {
      let relRmPath = `Library/Preferences/${appBundleId}.plist`;

      let rmPath = _path.default.resolve(this.getRootDir(), relRmPath);

      _logger.default.debug(`Deleting file: '${rmPath}'`);

      deletePromises.push(_appiumSupport.fs.rimraf(rmPath));
    }

    await _bluebird.default.all(deletePromises);
  }

  async getAppDirs(appFile, appBundleId, scrub = false) {
    let dirs = [];

    if ((await this.getPlatformVersion()) >= 8) {
      let data = await this.getAppDir(appBundleId);
      if (!data) return dirs;
      let bundle = !scrub ? await this.getAppDir(appBundleId, 'Bundle') : undefined;

      for (let src of [data, bundle]) {
        if (src) {
          dirs.push(src);
        }
      }
    } else {
      let data = await this.getAppDir(appFile);

      if (data) {
        dirs.push(data);
      }
    }

    return dirs;
  }

  async launchAndQuit(safari = false, startupTimeout = this.startupTimeout) {
    _logger.default.debug('Attempting to launch and quit the simulator, to create directory structure');

    _logger.default.debug(`Will launch with Safari? ${safari}`);

    await this.run(startupTimeout);

    if (safari) {
      await this.openUrl('http://www.appium.io');
    }

    try {
      await (0, _asyncbox.retryInterval)(60, 250, async () => {
        if (await this.isFresh()) {
          throw new Error('Simulator files not fully created. Waiting a bit');
        }
      });
    } catch (err) {
      _logger.default.warn(`Timeout waiting for simulator files to be created. Continuing`);
    }

    await this.shutdown();
  }

  async endSimulatorDaemon() {
    _logger.default.debug(`Killing any simulator daemons for ${this.udid}`);

    let launchctlCmd = `launchctl list | grep ${this.udid} | cut -f 3 | xargs -n 1 launchctl`;

    try {
      let stopCmd = `${launchctlCmd} stop`;
      await (0, _teen_process.exec)('bash', ['-c', stopCmd]);
    } catch (err) {
      _logger.default.warn(`Could not stop simulator daemons: ${err.message}`);

      _logger.default.debug('Carrying on anyway!');
    }

    try {
      let removeCmd = `${launchctlCmd} remove`;
      await (0, _teen_process.exec)('bash', ['-c', removeCmd]);
    } catch (err) {
      _logger.default.warn(`Could not remove simulator daemons: ${err.message}`);

      _logger.default.debug('Carrying on anyway!');
    }

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        let {
          stdout
        } = await (0, _teen_process.exec)('bash', ['-c', `ps -e  | grep ${this.udid} | grep launchd_sim | grep -v bash | grep -v grep | awk {'print$1'}`]);
        return stdout.trim().length === 0;
      }, {
        waitMs: 10000,
        intervalMs: 500
      });
    } catch (err) {
      _logger.default.warn(`Could not end simulator daemon for ${this.udid}: ${err.message}`);

      _logger.default.debug('Carrying on anyway!');
    }
  }

  async shutdown() {
    await (0, _utils.killAllSimulators)();
  }

  async delete() {
    await this.simctl.deleteDevice();
  }

  async updateSettings(plist, updates) {
    return await settings.updateSettings(this, plist, updates);
  }

  async updateLocationSettings(bundleId, authorized) {
    return await settings.updateLocationSettings(this, bundleId, authorized);
  }

  async setReduceMotion(reduceMotion = true) {
    if (await this.isFresh()) {
      await this.launchAndQuit(false, STARTUP_TIMEOUT);
    }

    await settings.setReduceMotion(this, reduceMotion);
  }

  async setAppearance() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to set UI appearance`);
  }

  async getAppearance() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to get UI appearance`);
  }

  async updateSafariSettings(updates) {
    let updated = await settings.updateSafariUserSettings(this, updates);
    return (await settings.updateSettings(this, 'mobileSafari', updates)) || updated;
  }

  async updateSafariGlobalSettings(updates) {
    return await settings.updateSafariGlobalSettings(this, updates);
  }

  async updateLocale(language, locale, calendarFormat) {
    return await settings.updateLocale(this, language, locale, calendarFormat);
  }

  async deleteSafari() {
    _logger.default.debug('Deleting Safari apps from simulator');

    let dirs = [];
    dirs.push(await this.getAppDir('com.apple.mobilesafari'));
    let pv = await this.getPlatformVersion();

    if (pv >= 8) {
      dirs.push(await this.getAppDir('com.apple.mobilesafari', 'Bundle'));
    }

    let deletePromises = [];

    for (let dir of _lodash.default.compact(dirs)) {
      _logger.default.debug(`Deleting directory: '${dir}'`);

      deletePromises.push(_appiumSupport.fs.rimraf(dir));
    }

    await _bluebird.default.all(deletePromises);
  }

  async cleanSafari(keepPrefs = true) {
    _logger.default.debug('Cleaning mobile safari data files');

    if (await this.isFresh()) {
      _logger.default.info('Could not find Safari support directories to clean out old ' + 'data. Probably there is nothing to clean out');

      return;
    }

    let libraryDir = _path.default.resolve(this.getDir(), 'Library');

    let safariRoot = await this.getAppDir('com.apple.mobilesafari');

    if (!safariRoot) {
      _logger.default.info('Could not find Safari support directories to clean out old ' + 'data. Probably there is nothing to clean out');

      return;
    }

    let safariLibraryDir = _path.default.resolve(safariRoot, 'Library');

    let filesToDelete = ['Caches/Snapshots/com.apple.mobilesafari', 'Caches/com.apple.mobilesafari/*', 'Caches/com.apple.WebAppCache/*', 'Caches/com.apple.WebKit.Networking/*', 'Caches/com.apple.WebKit.WebContent/*', 'Image Cache/*', 'WebKit/com.apple.mobilesafari/*', 'WebKit/GeolocationSites.plist', 'WebKit/LocalStorage/*.*', 'Safari/*', 'Cookies/*.binarycookies', 'Caches/com.apple.UIStatusBar/*', 'Caches/com.apple.keyboards/images/*', 'Caches/com.apple.Safari.SafeBrowsing/*', '../tmp/com.apple.mobilesafari/*'];
    let deletePromises = [];

    for (let file of filesToDelete) {
      deletePromises.push(_appiumSupport.fs.rimraf(_path.default.resolve(libraryDir, file)));
      deletePromises.push(_appiumSupport.fs.rimraf(_path.default.resolve(safariLibraryDir, file)));
    }

    if (!keepPrefs) {
      deletePromises.push(_appiumSupport.fs.rimraf(_path.default.resolve(safariLibraryDir, 'Preferences/*.plist')));
    }

    await _bluebird.default.all(deletePromises);
  }

  async removeApp(bundleId) {
    await this.simctl.removeApp(bundleId);
  }

  async moveBuiltInApp(appName, appPath, newAppPath) {
    await (0, _utils.safeRimRaf)(newAppPath);
    await _appiumSupport.fs.copyFile(appPath, newAppPath);

    _logger.default.debug(`Copied '${appName}' to '${newAppPath}'`);

    await _appiumSupport.fs.rimraf(appPath);

    _logger.default.debug(`Temporarily deleted original app at '${appPath}'`);

    return [newAppPath, appPath];
  }

  async openUrl(url) {
    const SAFARI_BOOTED_INDICATOR = 'MobileSafari[';
    const SAFARI_STARTUP_TIMEOUT = 15 * 1000;
    const EXTRA_STARTUP_TIME = 3 * 1000;

    if (await this.isRunning()) {
      await (0, _asyncbox.retry)(5000, this.simctl.openUrl.bind(this.simctl), url);
      await this.tailLogsUntil(SAFARI_BOOTED_INDICATOR, SAFARI_STARTUP_TIMEOUT);

      _logger.default.debug(`Safari started, waiting ${EXTRA_STARTUP_TIME}ms for it to fully start`);

      await _bluebird.default.delay(EXTRA_STARTUP_TIME);

      _logger.default.debug('Done waiting for Safari');

      return;
    } else {
      throw new Error('Tried to open a url, but the Simulator is not Booted');
    }
  }

  async clearCaches(...folderNames) {
    const cachesRoot = _path.default.resolve(this.getDir(), 'Library', 'Caches');

    if (!(await _appiumSupport.fs.hasAccess(cachesRoot))) {
      _logger.default.debug(`Caches root at '${cachesRoot}' does not exist or is not accessible. Nothing to do there`);

      return 0;
    }

    let itemsToRemove = folderNames.length ? folderNames : await _appiumSupport.fs.readdir(cachesRoot);
    itemsToRemove = itemsToRemove.map(x => _path.default.resolve(cachesRoot, x));

    if (folderNames.length) {
      itemsToRemove = await _bluebird.default.filter(itemsToRemove, x => _appiumSupport.fs.hasAccess(x));
    }

    itemsToRemove = await _bluebird.default.filter(itemsToRemove, async x => (await _appiumSupport.fs.stat(x)).isDirectory());

    if (!itemsToRemove.length) {
      _logger.default.debug(`No Simulator cache items for cleanup were matched in '${cachesRoot}'`);

      return 0;
    }

    _logger.default.debug(`Matched ${_appiumSupport.util.pluralize('simulator cache item', itemsToRemove.length, true)} ` + `for cleanup: ${itemsToRemove}`);

    try {
      await _bluebird.default.all(itemsToRemove, x => _appiumSupport.fs.rimraf(x));
    } catch (e) {
      _logger.default.warn(`Got an exception while cleaning Simulator caches: ${e.message}`);
    }

    return itemsToRemove.length;
  }

  async tailLogsUntil(bootedIndicator, timeoutMs) {
    let simLog = _path.default.resolve(this.getLogDir(), 'system.log');

    await (0, _asyncbox.retryInterval)(200, 200, async () => {
      let exists = await _appiumSupport.fs.exists(simLog);

      if (!exists) {
        throw new Error(`Could not find Simulator log: '${simLog}'`);
      }
    });

    _logger.default.info(`Simulator log at '${simLog}'`);

    _logger.default.info(`Tailing simulator logs until we encounter the string "${bootedIndicator}"`);

    _logger.default.info(`We will time out after ${timeoutMs}ms`);

    try {
      await (0, _tailUntil.tailUntil)(simLog, bootedIndicator, timeoutMs);
    } catch (err) {
      _logger.default.debug('Simulator startup timed out. Continuing anyway.');
    }
  }

  async enableCalendarAccess(bundleID) {
    await this.calendar.enableCalendarAccess(bundleID);
  }

  async disableCalendarAccess(bundleID) {
    await this.calendar.disableCalendarAccess(bundleID);
  }

  async hasCalendarAccess(bundleID) {
    return await this.calendar.hasCalendarAccess(bundleID);
  }

  async _activateWindow() {
    const pid = await this.getUIClientPid();

    if (pid) {
      try {
        return await (0, _utils.activateApp)(pid);
      } catch (e) {
        _logger.default.debug(e.stderr || e.message);
      }
    }

    return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
        end tell
      end tell
    `;
  }

  async executeUIClientScript(appleScript) {
    const windowActivationScript = await this._activateWindow();
    const resultScript = `${windowActivationScript ? windowActivationScript + '\n' : ''}${appleScript}`;

    _logger.default.debug(`Executing UI Apple Script on Simulator with UDID ${this.udid}: ${resultScript}`);

    return await UI_CLIENT_ACCESS_GUARD.acquire(this.simulatorApp, async () => {
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('osascript', ['-e', resultScript]);
        return stdout;
      } catch (err) {
        _logger.default.errorAndThrow(`Could not complete operation. Make sure Simulator UI is running and the parent Appium application (e. g. Appium.app or Terminal.app) ` + `is present in System Preferences > Security & Privacy > Privacy > Accessibility list. If the operation is still unsuccessful then ` + `it is not supported by this Simulator. ` + `Original error: ${err.message}`);
      }
    });
  }

  async isBiometricEnrolled() {
    const output = await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Touch ID Enrolled" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        end tell
      end tell
    `);

    _logger.default.debug(`Touch ID enrolled state: ${output}`);

    return _lodash.default.isString(output) && output.trim() === 'true';
  }

  async enrollBiometric(isEnabled = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Touch ID Enrolled" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
          if ${isEnabled ? 'not ' : ''}isChecked then
            click dstMenuItem
          end if
        end tell
      end tell
    `);
  }

  async sendBiometricMatch(shouldMatch = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "${shouldMatch ? 'Matching' : 'Non-matching'}" of menu 1 of menu item "Simulate Finger Touch" of menu 1 of menu bar item "Hardware" of menu bar 1
          click dstMenuItem
        end tell
      end tell
    `);
  }

  async dismissDatabaseAlert(increase = true) {
    let button = increase ? 'Increase' : 'Cancel';

    _logger.default.debug(`Attempting to dismiss database alert with '${button}' button`);

    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          click button "${button}" of window 1
        end tell
      end tell
    `);
  }

  async backupKeychains() {
    if (!(await _appiumSupport.fs.exists(this.keychainPath))) {
      return false;
    }

    const backupPath = await _appiumSupport.tempDir.path({
      prefix: `keychains_backup_${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`,
      suffix: '.zip'
    });
    const zipArgs = ['-r', backupPath, `${this.keychainPath}${_path.default.sep}`];

    _logger.default.debug(`Creating keychains backup with 'zip ${zipArgs.join(' ')}' command`);

    await (0, _teen_process.exec)('zip', zipArgs);

    if (_lodash.default.isString(this._keychainsBackupPath) && (await _appiumSupport.fs.exists(this._keychainsBackupPath))) {
      await _appiumSupport.fs.unlink(this._keychainsBackupPath);
    }

    this._keychainsBackupPath = backupPath;
    return true;
  }

  async restoreKeychains(excludePatterns = []) {
    if (!_lodash.default.isString(this._keychainsBackupPath) || !(await _appiumSupport.fs.exists(this._keychainsBackupPath))) {
      throw new Error(`The keychains backup archive does not exist. ` + `Are you sure it was created before?`);
    }

    if (_lodash.default.isString(excludePatterns)) {
      excludePatterns = excludePatterns.split(',').map(x => x.trim());
    }

    const {
      state
    } = await this.stat();
    const isServerRunning = state === 'Booted';
    let plistPath;

    if (isServerRunning) {
      plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');

      if (!(await _appiumSupport.fs.exists(plistPath))) {
        throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
      }

      await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
    }

    try {
      await _appiumSupport.fs.rimraf(this.keychainPath);
      await (0, _appiumSupport.mkdirp)(this.keychainPath);
      const unzipArgs = ['-o', this._keychainsBackupPath, ..._lodash.default.flatMap(excludePatterns.map(x => ['-x', x])), '-d', '/'];

      _logger.default.debug(`Restoring keychains with 'unzip ${unzipArgs.join(' ')}' command`);

      await (0, _teen_process.exec)('unzip', unzipArgs);
      await _appiumSupport.fs.unlink(this._keychainsBackupPath);
      this._keychainsBackupPath = null;
    } finally {
      if (isServerRunning && plistPath) {
        await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
      }
    }

    return true;
  }

  async clearKeychains() {
    const plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');

    if (!(await _appiumSupport.fs.exists(plistPath))) {
      throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
    }

    await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);

    try {
      if (await _appiumSupport.fs.exists(this.keychainPath)) {
        await _appiumSupport.fs.rimraf(this.keychainPath);
        await (0, _appiumSupport.mkdirp)(this.keychainPath);
      }
    } finally {
      await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
    }
  }

  async ps() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['launchctl', 'print', 'system']);
    const servicesMatch = /^\s*services\s*=\s*{([^}]+)/m.exec(stdout);

    if (!servicesMatch) {
      _logger.default.debug(stdout);

      throw new Error(`The list of active processes cannot be retrieved`);
    }

    const result = [];
    const pattern = /^\s*(\d+)\s+[\d-]+\s+([\w\-.]+:)?([\w\-.]+)/gm;
    let match;

    while (match = pattern.exec(servicesMatch[1])) {
      result.push({
        pid: parseInt(match[1], 10),
        group: _lodash.default.trimEnd(match[2], ':') || null,
        name: match[3]
      });
    }

    return result;
  }

  async setPermission(bundleId, permission, value) {
    await this.setPermissions(bundleId, {
      [permission]: value
    });
  }

  async setPermissions(bundleId, permissionsMapping) {
    _logger.default.debug(`Setting access for '${bundleId}': ` + JSON.stringify(permissionsMapping, null, 2));

    await this.permissions.setAccess(bundleId, permissionsMapping);
  }

  async getPermission(bundleId, serviceName) {
    const result = await this.permissions.getAccess(bundleId, serviceName);

    _logger.default.debug(`Got ${serviceName} access status for '${bundleId}': ${result}`);

    return result;
  }

  async addCertificate(payload) {
    if (await (0, _utils.hasSSLCert)(payload, this.udid)) {
      _logger.default.info(`SSL certificate '${_lodash.default.truncate(payload, {
        length: 20
      })}' already installed`);

      return false;
    }

    _logger.default.info(`Installing SSL root certificate '${_lodash.default.truncate(payload, {
      length: 20
    })}'`);

    await (0, _utils.installSSLCert)(payload, this.udid);
    return true;
  }

  async pushNotification() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to push notifications`);
  }

  async getLaunchDaemonsRoot() {
    const devRoot = await (0, _utils.getDeveloperRoot)();
    return _path.default.resolve(devRoot, 'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/LaunchDaemons');
  }

  static async _getDeviceStringPlatformVersion(platformVersion) {
    let reqVersion = platformVersion;

    if (!reqVersion) {
      reqVersion = await _appiumXcode.default.getMaxIOSSDK();

      _logger.default.warn(`No platform version set. Using max SDK version: ${reqVersion}`);

      if (!_lodash.default.isString(reqVersion)) {
        reqVersion = reqVersion % 1 ? String(reqVersion) : `${reqVersion}.0`;
      }
    }

    return reqVersion;
  }

  static async _getDeviceStringVersionString(platformVersion) {
    let reqVersion = await this._getDeviceStringPlatformVersion(platformVersion);
    return `(${reqVersion} Simulator)`;
  }

  static _getDeviceStringConfigFix() {
    return {
      'iPad Simulator (7.1 Simulator)': 'iPad 2 (7.1 Simulator)',
      'iPad Simulator (8.0 Simulator)': 'iPad 2 (8.0 Simulator)',
      'iPad Simulator (8.1 Simulator)': 'iPad 2 (8.1 Simulator)',
      'iPad Simulator (8.2 Simulator)': 'iPad 2 (8.2 Simulator)',
      'iPad Simulator (8.3 Simulator)': 'iPad 2 (8.3 Simulator)',
      'iPad Simulator (8.4 Simulator)': 'iPad 2 (8.4 Simulator)',
      'iPhone Simulator (7.1 Simulator)': 'iPhone 5s (7.1 Simulator)',
      'iPhone Simulator (8.4 Simulator)': 'iPhone 6 (8.4 Simulator)',
      'iPhone Simulator (8.3 Simulator)': 'iPhone 6 (8.3 Simulator)',
      'iPhone Simulator (8.2 Simulator)': 'iPhone 6 (8.2 Simulator)',
      'iPhone Simulator (8.1 Simulator)': 'iPhone 6 (8.1 Simulator)',
      'iPhone Simulator (8.0 Simulator)': 'iPhone 6 (8.0 Simulator)'
    };
  }

  static async getDeviceString(opts) {
    opts = Object.assign({}, {
      deviceName: null,
      platformVersion: null,
      forceIphone: false,
      forceIpad: false
    }, opts);
    let logOpts = {
      deviceName: opts.deviceName,
      platformVersion: opts.platformVersion,
      forceIphone: opts.forceIphone,
      forceIpad: opts.forceIpad
    };

    _logger.default.debug(`Getting device string from options: ${JSON.stringify(logOpts)}`);

    if ((opts.deviceName || '')[0] === '=') {
      return opts.deviceName.substring(1);
    }

    let isiPhone = !!opts.forceIphone || !opts.forceIpad;

    if (opts.deviceName) {
      let device = opts.deviceName.toLowerCase();

      if (device.indexOf('iphone') !== -1) {
        isiPhone = true;
      } else if (device.indexOf('ipad') !== -1) {
        isiPhone = false;
      }
    }

    let iosDeviceString = opts.deviceName || (isiPhone ? 'iPhone Simulator' : 'iPad Simulator');

    if (/^(iPhone|iPad)$/.test(iosDeviceString)) {
      iosDeviceString += ' Simulator';
    }

    if (/[^(iPhone|iPad)] Simulator/.test(iosDeviceString)) {
      iosDeviceString = iosDeviceString.replace(' Simulator', '');
    }

    iosDeviceString += ` ${await this._getDeviceStringVersionString(opts.platformVersion)}`;

    let CONFIG_FIX = this._getDeviceStringConfigFix();

    let configFix = CONFIG_FIX;

    if (configFix[iosDeviceString]) {
      iosDeviceString = configFix[iosDeviceString];

      _logger.default.debug(`Fixing device. Changed from '${opts.deviceName}' ` + `to '${iosDeviceString}'`);
    }

    _logger.default.debug(`Final device string is '${iosDeviceString}'`);

    return iosDeviceString;
  }

  async getWebInspectorSocket() {
    return null;
  }

}

exports.SimulatorXcode6 = SimulatorXcode6;

for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  SimulatorXcode6.prototype[cmd] = fn;
}

var _default = SimulatorXcode6;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtNi5qcyJdLCJuYW1lcyI6WyJTVEFSVFVQX1RJTUVPVVQiLCJFWFRSQV9TVEFSVFVQX1RJTUUiLCJVSV9DTElFTlRfQUNDRVNTX0dVQVJEIiwiQXN5bmNMb2NrIiwiVUlfQ0xJRU5UX0JVTkRMRV9JRCIsIlNQUklOR0JPQVJEX0JVTkRMRV9JRCIsIkJPT1RfQ09NUExFVEVEX0VWRU5UIiwiU2ltdWxhdG9yWGNvZGU2IiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwieGNvZGVWZXJzaW9uIiwiU3RyaW5nIiwic2ltY3RsIiwiU2ltY3RsIiwiX3BsYXRmb3JtVmVyc2lvbiIsImtleWNoYWluUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZ2V0RGlyIiwic2ltdWxhdG9yQXBwIiwiYXBwRGF0YUJ1bmRsZVBhdGhzIiwiaXNGcmVzaEZpbGVzIiwiZXh0cmFTdGFydHVwVGltZSIsImNhbGVuZGFyIiwiQ2FsZW5kYXIiLCJwZXJtaXNzaW9ucyIsIlBlcm1pc3Npb25zIiwidWlDbGllbnRCdW5kbGVJZCIsImdldFVJQ2xpZW50UGlkIiwic3Rkb3V0IiwiZSIsImlzTmFOIiwicGFyc2VJbnQiLCJ0cmltIiwibG9nIiwiZGVidWciLCJpc1VJQ2xpZW50UnVubmluZyIsIl8iLCJpc051bGwiLCJzdGFydHVwVGltZW91dCIsImdldFBsYXRmb3JtVmVyc2lvbiIsInNkayIsInN0YXQiLCJnZXRSb290RGlyIiwiaG9tZSIsInByb2Nlc3MiLCJlbnYiLCJIT01FIiwiZ2V0TG9nRGlyIiwiaW5zdGFsbEFwcCIsImFwcCIsImlzQXBwSW5zdGFsbGVkIiwiYnVuZGxlSWQiLCJhcHBGaWxlIiwiYXBwRGlycyIsImdldEFwcERpcnMiLCJsZW5ndGgiLCJnZXRVc2VySW5zdGFsbGVkQnVuZGxlSWRzQnlCdW5kbGVOYW1lIiwiYnVuZGxlTmFtZSIsInJvb3RVc2VyQXBwRGlyIiwiYnVpbGRCdW5kbGVQYXRoTWFwIiwiYnVuZGxlSWRzIiwiaXNFbXB0eSIsInVzZXJBcHBEaXJQYXRoIiwiT2JqZWN0IiwiZW50cmllcyIsImZzIiwicmVhZGRpciIsImZpbmQiLCJmaWxlIiwiZXh0bmFtZSIsInRvTG93ZXJDYXNlIiwiaW5mb1BsaXN0UGF0aCIsImV4aXN0cyIsImluZm9QbGlzdCIsInBsaXN0IiwicGFyc2VQbGlzdEZpbGUiLCJDRkJ1bmRsZU5hbWUiLCJwdXNoIiwiZXJyIiwid2FybiIsIm1lc3NhZ2UiLCJnZXRBcHBEaXIiLCJpZCIsInN1YkRpciIsImlzRnJlc2giLCJhcHBsaWNhdGlvbkxpc3QiLCJwYXRoQnVuZGxlUGFpciIsImRpciIsImFwcEZpbGVzIiwiZ2xvYiIsIm1hdGNoIiwicmVhZEJ1bmRsZUlkIiwibWV0YWRhdGEiLCJzZXR0aW5ncyIsInJlYWQiLCJNQ01NZXRhZGF0YUlkZW50aWZpZXIiLCJidW5kbGVQYXRoRGlycyIsImJ1bmRsZVBhdGhQYWlycyIsInJlZHVjZSIsImJ1bmRsZU1hcCIsImJ1bmRsZVBhdGgiLCJkZXZpY2VBcnIiLCJ0b1BhaXJzIiwiZ2V0RGV2aWNlcyIsImRldmljZSIsImZpbGVzIiwicHYiLCJtYXAiLCJzIiwiZXhpc3RlbmNlcyIsImYiLCJoYXNBY2Nlc3MiLCJmcmVzaCIsImNvbXBhY3QiLCJpc1J1bm5pbmciLCJzdGF0ZSIsIndhaXRGb3JCb290IiwiYm9vdGVkSW5kaWNhdG9yIiwiZ2V0Qm9vdGVkSW5kaWNhdG9yU3RyaW5nIiwidGFpbExvZ3NVbnRpbCIsIkIiLCJkZWxheSIsImVtaXQiLCJpbmRpY2F0b3IiLCJwbGF0Zm9ybVZlcnNpb24iLCJzdGFydFVJQ2xpZW50Iiwib3B0cyIsImNsb25lRGVlcCIsImRlZmF1bHRzRGVlcCIsInNjYWxlRmFjdG9yIiwiY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQiLCJwYXN0ZWJvYXJkQXV0b21hdGljU3luYyIsInRyYWNlUG9pbnRlciIsImFyZ3MiLCJmb3JtYXR0ZWREZXZpY2VOYW1lIiwibmFtZSIsInJlcGxhY2UiLCJhcmd1bWVudE5hbWUiLCJpc0Jvb2xlYW4iLCJsb3dlckNhc2UiLCJpbmZvIiwiam9pbiIsInRpbWVvdXQiLCJpbmNsdWRlcyIsInN0ZGVyciIsInJ1biIsImFzc2lnbiIsImlzU2VydmVyUnVubmluZyIsInRpbWVyIiwidGltaW5nIiwiVGltZXIiLCJzdGFydCIsInNodXRkb3duIiwiZ2V0RHVyYXRpb24iLCJhc1NlY29uZHMiLCJ0b0ZpeGVkIiwiY2xlYW4iLCJlbmRTaW11bGF0b3JEYWVtb24iLCJlcmFzZURldmljZSIsInNjcnViQ3VzdG9tQXBwIiwiYXBwQnVuZGxlSWQiLCJjbGVhbkN1c3RvbUFwcCIsInNjcnViIiwiZGVsZXRlUHJvbWlzZXMiLCJyaW1yYWYiLCJyZWxSbVBhdGgiLCJybVBhdGgiLCJhbGwiLCJkaXJzIiwiZGF0YSIsImJ1bmRsZSIsInVuZGVmaW5lZCIsInNyYyIsImxhdW5jaEFuZFF1aXQiLCJzYWZhcmkiLCJvcGVuVXJsIiwiRXJyb3IiLCJsYXVuY2hjdGxDbWQiLCJzdG9wQ21kIiwicmVtb3ZlQ21kIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsImRlbGV0ZSIsImRlbGV0ZURldmljZSIsInVwZGF0ZVNldHRpbmdzIiwidXBkYXRlcyIsInVwZGF0ZUxvY2F0aW9uU2V0dGluZ3MiLCJhdXRob3JpemVkIiwic2V0UmVkdWNlTW90aW9uIiwicmVkdWNlTW90aW9uIiwic2V0QXBwZWFyYW5jZSIsImdldEFwcGVhcmFuY2UiLCJ1cGRhdGVTYWZhcmlTZXR0aW5ncyIsInVwZGF0ZWQiLCJ1cGRhdGVTYWZhcmlVc2VyU2V0dGluZ3MiLCJ1cGRhdGVTYWZhcmlHbG9iYWxTZXR0aW5ncyIsInVwZGF0ZUxvY2FsZSIsImxhbmd1YWdlIiwibG9jYWxlIiwiY2FsZW5kYXJGb3JtYXQiLCJkZWxldGVTYWZhcmkiLCJjbGVhblNhZmFyaSIsImtlZXBQcmVmcyIsImxpYnJhcnlEaXIiLCJzYWZhcmlSb290Iiwic2FmYXJpTGlicmFyeURpciIsImZpbGVzVG9EZWxldGUiLCJyZW1vdmVBcHAiLCJtb3ZlQnVpbHRJbkFwcCIsImFwcE5hbWUiLCJhcHBQYXRoIiwibmV3QXBwUGF0aCIsImNvcHlGaWxlIiwidXJsIiwiU0FGQVJJX0JPT1RFRF9JTkRJQ0FUT1IiLCJTQUZBUklfU1RBUlRVUF9USU1FT1VUIiwiYmluZCIsImNsZWFyQ2FjaGVzIiwiZm9sZGVyTmFtZXMiLCJjYWNoZXNSb290IiwiaXRlbXNUb1JlbW92ZSIsIngiLCJmaWx0ZXIiLCJpc0RpcmVjdG9yeSIsInV0aWwiLCJwbHVyYWxpemUiLCJ0aW1lb3V0TXMiLCJzaW1Mb2ciLCJlbmFibGVDYWxlbmRhckFjY2VzcyIsImJ1bmRsZUlEIiwiZGlzYWJsZUNhbGVuZGFyQWNjZXNzIiwiaGFzQ2FsZW5kYXJBY2Nlc3MiLCJfYWN0aXZhdGVXaW5kb3ciLCJwaWQiLCJleGVjdXRlVUlDbGllbnRTY3JpcHQiLCJhcHBsZVNjcmlwdCIsIndpbmRvd0FjdGl2YXRpb25TY3JpcHQiLCJyZXN1bHRTY3JpcHQiLCJhY3F1aXJlIiwiZXJyb3JBbmRUaHJvdyIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJvdXRwdXQiLCJpc1N0cmluZyIsImVucm9sbEJpb21ldHJpYyIsImlzRW5hYmxlZCIsInNlbmRCaW9tZXRyaWNNYXRjaCIsInNob3VsZE1hdGNoIiwiZGlzbWlzc0RhdGFiYXNlQWxlcnQiLCJpbmNyZWFzZSIsImJ1dHRvbiIsImJhY2t1cEtleWNoYWlucyIsImJhY2t1cFBhdGgiLCJ0ZW1wRGlyIiwicHJlZml4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJzdWZmaXgiLCJ6aXBBcmdzIiwic2VwIiwiX2tleWNoYWluc0JhY2t1cFBhdGgiLCJ1bmxpbmsiLCJyZXN0b3JlS2V5Y2hhaW5zIiwiZXhjbHVkZVBhdHRlcm5zIiwic3BsaXQiLCJwbGlzdFBhdGgiLCJnZXRMYXVuY2hEYWVtb25zUm9vdCIsInNwYXduUHJvY2VzcyIsInVuemlwQXJncyIsImZsYXRNYXAiLCJjbGVhcktleWNoYWlucyIsInBzIiwic2VydmljZXNNYXRjaCIsImV4ZWMiLCJyZXN1bHQiLCJwYXR0ZXJuIiwiZ3JvdXAiLCJ0cmltRW5kIiwic2V0UGVybWlzc2lvbiIsInBlcm1pc3Npb24iLCJ2YWx1ZSIsInNldFBlcm1pc3Npb25zIiwicGVybWlzc2lvbnNNYXBwaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldEFjY2VzcyIsImdldFBlcm1pc3Npb24iLCJzZXJ2aWNlTmFtZSIsImdldEFjY2VzcyIsImFkZENlcnRpZmljYXRlIiwicGF5bG9hZCIsInRydW5jYXRlIiwicHVzaE5vdGlmaWNhdGlvbiIsImRldlJvb3QiLCJfZ2V0RGV2aWNlU3RyaW5nUGxhdGZvcm1WZXJzaW9uIiwicmVxVmVyc2lvbiIsInhjb2RlIiwiZ2V0TWF4SU9TU0RLIiwiX2dldERldmljZVN0cmluZ1ZlcnNpb25TdHJpbmciLCJfZ2V0RGV2aWNlU3RyaW5nQ29uZmlnRml4IiwiZ2V0RGV2aWNlU3RyaW5nIiwiZGV2aWNlTmFtZSIsImZvcmNlSXBob25lIiwiZm9yY2VJcGFkIiwibG9nT3B0cyIsImlzaVBob25lIiwiaW5kZXhPZiIsImlvc0RldmljZVN0cmluZyIsInRlc3QiLCJDT05GSUdfRklYIiwiY29uZmlnRml4IiwiZ2V0V2ViSW5zcGVjdG9yU29ja2V0IiwiY21kIiwiZm4iLCJleHRlbnNpb25zIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZUFBZSxHQUFHLEtBQUssSUFBN0I7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxJQUEzQjtBQUNBLE1BQU1DLHNCQUFzQixHQUFHLElBQUlDLGtCQUFKLEVBQS9CO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsMkJBQTVCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsdUJBQTlCOztBQVVBLE1BQU1DLG9CQUFvQixHQUFHLGVB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UixlQUFnQixHQUFyRDs7QUFDQSxXQUFPQSxlQUFQO0FBQ0Q7O0FBTUQsUUFBTUkscUJBQU4sR0FBK0I7QUFFN0IsV0FBTyxJQUFQO0FBQ0Q7O0FBNzdDd0M7Ozs7QUFnOEMzQyxLQUFLLElBQUksQ0FBQ0MsR0FBRCxFQUFNQyxFQUFOLENBQVQsSUFBc0J2UixnQkFBRWtFLE9BQUYsQ0FBVXNOLGNBQVYsQ0FBdEIsRUFBNkM7QUFDM0N2VCxFQUFBQSxlQUFlLENBQUN3VCxTQUFoQixDQUEwQkgsR0FBMUIsSUFBaUNDLEVBQWpDO0FBQ0Q7O2VBRWN0VCxlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHhjb2RlLCBnZXRQYXRoIGFzIGdldFhjb2RlUGF0aCB9IGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGZzLCB0ZW1wRGlyLCBta2RpcnAsIHBsaXN0LCB0aW1pbmcsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcbmltcG9ydCB7XG4gIGtpbGxBbGxTaW11bGF0b3JzLCBzYWZlUmltUmFmLCBnZXREZXZlbG9wZXJSb290LFxuICBpbnN0YWxsU1NMQ2VydCwgaGFzU1NMQ2VydCwgYWN0aXZhdGVBcHAsXG59IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgYXN5bmNtYXAsIHJldHJ5SW50ZXJ2YWwsIHdhaXRGb3JDb25kaXRpb24sIHJldHJ5IH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IHRhaWxVbnRpbCB9IGZyb20gJy4vdGFpbC11bnRpbC5qcyc7XG5pbXBvcnQgZXh0ZW5zaW9ucyBmcm9tICcuL2V4dGVuc2lvbnMvaW5kZXgnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCBDYWxlbmRhciBmcm9tICcuL2NhbGVuZGFyJztcbmltcG9ydCBQZXJtaXNzaW9ucyBmcm9tICcuL3Blcm1pc3Npb25zJztcbmltcG9ydCBTaW1jdGwgZnJvbSAnbm9kZS1zaW1jdGwnO1xuXG5cbmNvbnN0IFNUQVJUVVBfVElNRU9VVCA9IDYwICogMTAwMDtcbmNvbnN0IEVYVFJBX1NUQVJUVVBfVElNRSA9IDIwMDA7XG5jb25zdCBVSV9DTElFTlRfQUNDRVNTX0dVQVJEID0gbmV3IEFzeW5jTG9jaygpO1xuY29uc3QgVUlfQ0xJRU5UX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUuaXBob25lc2ltdWxhdG9yJztcbmNvbnN0IFNQUklOR0JPQVJEX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUuU3ByaW5nQm9hcmQnO1xuXG4vKlxuICogVGhpcyBldmVudCBpcyBlbWl0dGVkIGFzIHNvb24gYXMgaU9TIFNpbXVsYXRvclxuICogaGFzIGZpbmlzaGVkIGJvb3RpbmcgYW5kIGl0IGlzIHJlYWR5IHRvIGFjY2VwdCB4Y3J1biBjb21tYW5kcy5cbiAqIFRoZSBldmVudCBoYW5kbGVyIGlzIGNhbGxlZCBhZnRlciAncnVuJyBtZXRob2QgaXMgY29tcGxldGVkXG4gKiBmb3IgWGNvZGUgNyBhbmQgb2xkZXIgYW5kIGlzIG9ubHkgdXNlZnVsIGluIFhjb2RlIDgrLFxuICogc2luY2Ugb25lIGNhbiBzdGFydCBkb2luZyBzdHVmZiAoZm9yIGV4YW1wbGUgaW5zdGFsbC91bmluc3RhbGwgYW4gYXBwKSBpbiBwYXJhbGxlbFxuICogd2l0aCBTaW11bGF0b3IgVUkgc3RhcnR1cCwgd2hpY2ggc2hvcnRlbnMgc2Vzc2lvbiBzdGFydHVwIHRpbWUuXG4gKi9cbmNvbnN0IEJPT1RfQ09NUExFVEVEX0VWRU5UID0gJ2Jvb3RDb21wbGV0ZWQnO1xuXG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlNiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdCB3aXRoIHRoZSBgdWRpZGAgYW5kIHZlcnNpb24gb2YgWGNvZGUuIFVzZSB0aGUgZXhwb3J0ZWQgYGdldFNpbXVsYXRvcih1ZGlkKWAgbWV0aG9kIGluc3RlYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIC0gVGhlIFNpbXVsYXRvciBJRC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHhjb2RlVmVyc2lvbiAtIFRoZSB0YXJnZXQgWGNvZGUgdmVyc2lvbiBpbiBmb3JtYXQge21ham9yLCBtaW5vciwgYnVpbGR9LlxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVkaWQsIHhjb2RlVmVyc2lvbikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnVkaWQgPSBTdHJpbmcodWRpZCk7XG4gICAgdGhpcy5zaW1jdGwgPSBuZXcgU2ltY3RsKHtcbiAgICAgIHVkaWQ6IHRoaXMudWRpZCxcbiAgICB9KTtcbiAgICB0aGlzLnhjb2RlVmVyc2lvbiA9IHhjb2RlVmVyc2lvbjtcblxuICAgIC8vIHBsYXRmb3JtVmVyc2lvbiBjYW5ub3QgYmUgZm91bmQgaW5pdGlhbGx5LCBzaW5jZSBnZXR0aW5nIGl0IGhhcyBzaWRlIGVmZmVjdHMgZm9yXG4gICAgLy8gb3VyIGxvZ2ljIGZvciBmaWd1cmluZyBvdXQgaWYgYSBzaW0gaGFzIGJlZW4gcnVuXG4gICAgLy8gaXQgd2lsbCBiZSBzZXQgd2hlbiBpdCBpcyBuZWVkZWRcbiAgICB0aGlzLl9wbGF0Zm9ybVZlcnNpb24gPSBudWxsO1xuXG4gICAgdGhpcy5rZXljaGFpblBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5nZXREaXIoKSwgJ0xpYnJhcnknLCAnS2V5Y2hhaW5zJyk7XG4gICAgdGhpcy5zaW11bGF0b3JBcHAgPSAnaU9TIFNpbXVsYXRvci5hcHAnO1xuXG4gICAgdGhpcy5hcHBEYXRhQnVuZGxlUGF0aHMgPSB7fTtcblxuICAgIC8vIGxpc3Qgb2YgZmlsZXMgdG8gY2hlY2sgZm9yIHdoZW4gc2VlaW5nIGlmIGEgc2ltdWxhdG9yIGlzIFwiZnJlc2hcIlxuICAgIC8vIChtZWFuaW5nIGl0IGhhcyBuZXZlciBiZWVuIGJvb3RlZCkuXG4gICAgLy8gSWYgdGhlc2UgZmlsZXMgYXJlIHByZXNlbnQsIHdlIGFzc3VtZSBpdCdzIGJlZW4gc3VjY2Vzc2Z1bGx5IGJvb3RlZFxuICAgIHRoaXMuaXNGcmVzaEZpbGVzID0gW1xuICAgICAgJ0xpYnJhcnkvQ29uZmlndXJhdGlvblByb2ZpbGVzJyxcbiAgICAgICdMaWJyYXJ5L0Nvb2tpZXMnLFxuICAgICAgJ0xpYnJhcnkvUHJlZmVyZW5jZXMvLkdsb2JhbFByZWZlcmVuY2VzLnBsaXN0JyxcbiAgICAgICdMaWJyYXJ5L1ByZWZlcmVuY2VzL2NvbS5hcHBsZS5zcHJpbmdib2FyZC5wbGlzdCcsXG4gICAgICAndmFyL3J1bi9zeXNsb2cucGlkJ1xuICAgIF07XG5cbiAgICAvLyBleHRyYSB0aW1lIHRvIHdhaXQgZm9yIHNpbXVsYXRvciB0byBiZSBkZWVtZWQgYm9vdGVkXG4gICAgdGhpcy5leHRyYVN0YXJ0dXBUaW1lID0gRVhUUkFfU1RBUlRVUF9USU1FO1xuXG4gICAgdGhpcy5jYWxlbmRhciA9IG5ldyBDYWxlbmRhcih4Y29kZVZlcnNpb24sIHRoaXMuZ2V0RGlyKCkpO1xuICAgIHRoaXMucGVybWlzc2lvbnMgPSBuZXcgUGVybWlzc2lvbnMoeGNvZGVWZXJzaW9uLCB0aGlzLmdldERpcigpLCB0aGlzLnVkaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQnVuZGxlIGlkZW50aWZpZXIgb2YgU2ltdWxhdG9yIFVJIGNsaWVudC5cbiAgICovXG4gIGdldCB1aUNsaWVudEJ1bmRsZUlkICgpIHtcbiAgICByZXR1cm4gVUlfQ0xJRU5UX0JVTkRMRV9JRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnQgcHJvY2VzcyBpZCBvZiB0aGUgVUkgY2xpZW50XG4gICAqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBwcm9jZXNzIElEIG9yIG51bGwgaWYgdGhlIFVJIGNsaWVudCBpcyBub3QgcnVubmluZ1xuICAgKi9cbiAgYXN5bmMgZ2V0VUlDbGllbnRQaWQgKCkge1xuICAgIGxldCBzdGRvdXQ7XG4gICAgdHJ5IHtcbiAgICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3BncmVwJywgWyctZm4nLCBgJHt0aGlzLnNpbXVsYXRvckFwcH0vQ29udGVudHMvTWFjT1MvYF0pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzTmFOKHBhcnNlSW50KHN0ZG91dCwgMTApKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0ZG91dCA9IHN0ZG91dC50cmltKCk7XG4gICAgbG9nLmRlYnVnKGBHb3QgU2ltdWxhdG9yIFVJIGNsaWVudCBQSUQ6ICR7c3Rkb3V0fWApO1xuICAgIHJldHVybiBzdGRvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIHN0YXRlIG9mIFNpbXVsYXRvciBVSSBjbGllbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgb2YgaWYgVUkgY2xpZW50IGlzIHJ1bm5pbmcgb3IgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgYXN5bmMgaXNVSUNsaWVudFJ1bm5pbmcgKCkge1xuICAgIHJldHVybiAhXy5pc051bGwoYXdhaXQgdGhpcy5nZXRVSUNsaWVudFBpZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIb3cgbG9uZyB0byB3YWl0IGJlZm9yZSB0aHJvd2luZyBhbiBlcnJvciBhYm91dCBTaW11bGF0b3Igc3RhcnR1cCB0aW1lb3V0IGhhcHBlbmVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgKi9cbiAgZ2V0IHN0YXJ0dXBUaW1lb3V0ICgpIHtcbiAgICByZXR1cm4gU1RBUlRVUF9USU1FT1VUO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcGxhdGZvcm0gdmVyc2lvbiBvZiB0aGUgY3VycmVudCBTaW11bGF0b3IuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gU0RLIHZlcnNpb24sIGZvciBleGFtcGxlICc4LjMnLlxuICAgKi9cbiAgYXN5bmMgZ2V0UGxhdGZvcm1WZXJzaW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX3BsYXRmb3JtVmVyc2lvbikge1xuICAgICAgbGV0IHtzZGt9ID0gYXdhaXQgdGhpcy5zdGF0KCk7XG4gICAgICB0aGlzLl9wbGF0Zm9ybVZlcnNpb24gPSBzZGs7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wbGF0Zm9ybVZlcnNpb247XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGZ1bGwgcGF0aCB0byB0aGUgZGlyZWN0b3J5IHdoZXJlIFNpbXVsYXRvciBzdHVmZiBpcyBsb2NhdGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwYXRoIHN0cmluZy5cbiAgICovXG4gIGdldFJvb3REaXIgKCkge1xuICAgIGxldCBob21lID0gcHJvY2Vzcy5lbnYuSE9NRTtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKGhvbWUsICdMaWJyYXJ5JywgJ0RldmVsb3BlcicsICdDb3JlU2ltdWxhdG9yJywgJ0RldmljZXMnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgZnVsbCBwYXRoIHRvIHRoZSBkaXJlY3Rvcnkgd2hlcmUgU2ltdWxhdG9yIGFwcGxpY2F0aW9ucyBkYXRhIGlzIGxvY2F0ZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBhdGggc3RyaW5nLlxuICAgKi9cbiAgZ2V0RGlyICgpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHRoaXMuZ2V0Um9vdERpcigpLCB0aGlzLnVkaWQsICdkYXRhJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGZ1bGwgcGF0aCB0byB0aGUgZGlyZWN0b3J5IHdoZXJlIFNpbXVsYXRvciBsb2dzIGFyZSBzdG9yZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBhdGggc3RyaW5nLlxuICAgKi9cbiAgZ2V0TG9nRGlyICgpIHtcbiAgICBsZXQgaG9tZSA9IHByb2Nlc3MuZW52LkhPTUU7XG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZShob21lLCAnTGlicmFyeScsICdMb2dzJywgJ0NvcmVTaW11bGF0b3InLCB0aGlzLnVkaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbGwgdmFsaWQgLmFwcCBwYWNrYWdlIG9uIFNpbXVsYXRvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcCAtIFRoZSBwYXRoIHRvIHRoZSAuYXBwIHBhY2thZ2UuXG4gICAqL1xuICBhc3luYyBpbnN0YWxsQXBwIChhcHApIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zaW1jdGwuaW5zdGFsbEFwcChhcHApO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmeSB3aGV0aGVyIHRoZSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZCBvbiBTaW11bGF0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIGNoZWNrZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBGdWxlIC0gQXBwbGljYXRpb24gbmFtZSBtaW51cyBcIi5hcHBcIiAoZm9yIGlPUyA3LjEpXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZFxuICAgKi9cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkLCBhcHBGaWxlID0gbnVsbCkge1xuICAgIC8vIGBhcHBGaWxlYCBhcmd1bWVudCBvbmx5IG5lY2Vzc2FyeSBmb3IgaU9TIGJlbG93IHZlcnNpb24gOFxuICAgIGxldCBhcHBEaXJzID0gYXdhaXQgdGhpcy5nZXRBcHBEaXJzKGFwcEZpbGUsIGJ1bmRsZUlkKTtcbiAgICByZXR1cm4gYXBwRGlycy5sZW5ndGggIT09IDA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB1c2VyIGluc3RhbGxlZCBidW5kbGUgaWRzIHdoaWNoIGhhcyAnYnVuZGxlTmFtZScgaW4gdGhlaXIgSW5mby5QbGlzdCBhcyAnQ0ZCdW5kbGVOYW1lJ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBiZSBjaGVja2VkLlxuICAgKiBAcmV0dXJuIHthcnJheTxzdHJpbmc+fSAtIFRoZSBsaXN0IG9mIGJ1bmRsZSBpZHMgd2hpY2ggaGF2ZSAnYnVuZGxlTmFtZSdcbiAgICovXG4gIGFzeW5jIGdldFVzZXJJbnN0YWxsZWRCdW5kbGVJZHNCeUJ1bmRsZU5hbWUgKGJ1bmRsZU5hbWUpIHtcbiAgICBjb25zdCByb290VXNlckFwcERpciA9IGF3YWl0IHRoaXMuYnVpbGRCdW5kbGVQYXRoTWFwKCdCdW5kbGUnKTtcbiAgICBjb25zdCBidW5kbGVJZHMgPSBbXTtcbiAgICBpZiAoXy5pc0VtcHR5KHJvb3RVc2VyQXBwRGlyKSkge1xuICAgICAgcmV0dXJuIGJ1bmRsZUlkcztcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtidW5kbGVJZCwgdXNlckFwcERpclBhdGhdIG9mIE9iamVjdC5lbnRyaWVzKHJvb3RVc2VyQXBwRGlyKSkge1xuICAgICAgY29uc3QgYXBwRmlsZSA9IChhd2FpdCBmcy5yZWFkZGlyKHVzZXJBcHBEaXJQYXRoKSkuZmluZChcbiAgICAgICAgKGZpbGUpID0+IHBhdGguZXh0bmFtZShmaWxlKS50b0xvd2VyQ2FzZSgpID09PSAnLmFwcCcpO1xuICAgICAgY29uc3QgaW5mb1BsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZSh1c2VyQXBwRGlyUGF0aCwgYXBwRmlsZSwgJ0luZm8ucGxpc3QnKTtcbiAgICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKGluZm9QbGlzdFBhdGgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mb1BsaXN0ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUoaW5mb1BsaXN0UGF0aCwgZmFsc2UpO1xuICAgICAgICBpZiAoaW5mb1BsaXN0LkNGQnVuZGxlTmFtZSA9PT0gYnVuZGxlTmFtZSkge1xuICAgICAgICAgIGJ1bmRsZUlkcy5wdXNoKGJ1bmRsZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy53YXJuKGBGYWlsZWQgdG8gcmVhZCBwbGlzdCAke2luZm9QbGlzdFBhdGh9LiBPcmlnaW5hbCBlcnJvciAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2cuZGVidWcoYFRoZSBzaW11bGF0b3IgaGFzICcke2J1bmRsZUlkcy5sZW5ndGh9JyBidW5kbGVzIHdoaWNoIGhhdmUgJyR7YnVuZGxlTmFtZX0nIGFzIHRoZWlyICdDRkJ1bmRsZU5hbWUnOmApO1xuICAgIGZvciAoY29uc3QgYnVuZGxlSWQgb2YgYnVuZGxlSWRzKSB7XG4gICAgICBsb2cuZGVidWcoYCAgICAnJHtidW5kbGVJZH0nYCk7XG4gICAgfVxuICAgIHJldHVybiBidW5kbGVJZHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGRpcmVjdG9yeSBmb3IgYSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uJ3MgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gRWl0aGVyIGEgYnVuZGxlSWQgKGUuZy4sIGNvbS5hcHBsZS5tb2JpbGVzYWZhcmkpIG9yLCBmb3IgaU9TIDcuMSwgdGhlIGFwcCBuYW1lIHdpdGhvdXQgYC5hcHBgIChlLmcuLCBNb2JpbGVTYWZhcmkpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJkaXIgLSBUaGUgc3ViLWRpcmVjdG9yeSB3ZSBleHBlY3QgdG8gYmUgd2l0aGluIHRoZSBhcHBsaWNhdGlvbiBkaXJlY3RvcnkuIERlZmF1bHRzIHRvIFwiRGF0YVwiLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByb290IGFwcGxpY2F0aW9uIGZvbGRlci5cbiAgICovXG4gIGFzeW5jIGdldEFwcERpciAoaWQsIHN1YkRpciA9ICdEYXRhJykge1xuICAgIHRoaXMuYXBwRGF0YUJ1bmRsZVBhdGhzW3N1YkRpcl0gPSB0aGlzLmFwcERhdGFCdW5kbGVQYXRoc1tzdWJEaXJdIHx8IHt9O1xuICAgIGlmIChfLmlzRW1wdHkodGhpcy5hcHBEYXRhQnVuZGxlUGF0aHNbc3ViRGlyXSkgJiYgIWF3YWl0IHRoaXMuaXNGcmVzaCgpKSB7XG4gICAgICB0aGlzLmFwcERhdGFCdW5kbGVQYXRoc1tzdWJEaXJdID0gYXdhaXQgdGhpcy5idWlsZEJ1bmRsZVBhdGhNYXAoc3ViRGlyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXBwRGF0YUJ1bmRsZVBhdGhzW3N1YkRpcl1baWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB4Y29kZSA2IHNpbXVsYXRvcnMgYXJlIHJlYWxseSBhbm5veWluZywgYW5kIGJ1cnkgdGhlIG1haW4gYXBwXG4gICAqIGRpcmVjdG9yaWVzIGluc2lkZSBkaXJlY3RvcmllcyBqdXN0IG5hbWVkIHdpdGggSGFzaGVzLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGZpbmRzIHRoZSBwcm9wZXIgZGlyZWN0b3J5IGJ5IHRyYXZlcnNpbmcgYWxsIG9mIHRoZW1cbiAgICogYW5kIHJlYWRpbmcgYSBtZXRhZGF0YSBwbGlzdCAoTW9iaWxlIENvbnRhaW5lciBNYW5hZ2VyKSB0byBnZXQgdGhlXG4gICAqIGJ1bmRsZSBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1YmRpciAtIFRoZSBzdWItZGlyZWN0b3J5IHdlIGV4cGVjdCB0byBiZSB3aXRoaW4gdGhlIGFwcGxpY2F0aW9uIGRpcmVjdG9yeS4gRGVmYXVsdHMgdG8gXCJEYXRhXCIuXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIGxpc3Qgb2YgcGF0aC1idW5kbGUgcGFpcnMgdG8gYW4gb2JqZWN0IHdoZXJlIGJ1bmRsZUlkcyBhcmUgbWFwcGVkIHRvIHBhdGhzLlxuICAgKi9cbiAgYXN5bmMgYnVpbGRCdW5kbGVQYXRoTWFwIChzdWJEaXIgPSAnRGF0YScpIHtcbiAgICBsb2cuZGVidWcoJ0J1aWxkaW5nIGJ1bmRsZSBwYXRoIG1hcCcpO1xuICAgIGxldCBhcHBsaWNhdGlvbkxpc3Q7XG4gICAgbGV0IHBhdGhCdW5kbGVQYWlyO1xuICAgIGlmIChhd2FpdCB0aGlzLmdldFBsYXRmb3JtVmVyc2lvbigpID09PSAnNy4xJykge1xuICAgICAgLy8gYXBwcyBhdmFpbGFibGVcbiAgICAgIC8vICAgV2ViLmFwcCxcbiAgICAgIC8vICAgV2ViVmlld1NlcnZpY2UuYXBwLFxuICAgICAgLy8gICBNb2JpbGVTYWZhcmkuYXBwLFxuICAgICAgLy8gICBXZWJDb250ZW50QW5hbHlzaXNVSS5hcHAsXG4gICAgICAvLyAgIEREQWN0aW9uc1NlcnZpY2UuYXBwLFxuICAgICAgLy8gICBTdG9yZUtpdFVJU2VydmljZS5hcHBcbiAgICAgIGFwcGxpY2F0aW9uTGlzdCA9IHBhdGgucmVzb2x2ZSh0aGlzLmdldERpcigpLCAnQXBwbGljYXRpb25zJyk7XG4gICAgICBwYXRoQnVuZGxlUGFpciA9IGFzeW5jIChkaXIpID0+IHtcbiAgICAgICAgZGlyID0gcGF0aC5yZXNvbHZlKGFwcGxpY2F0aW9uTGlzdCwgZGlyKTtcbiAgICAgICAgbGV0IGFwcEZpbGVzID0gYXdhaXQgZnMuZ2xvYihgJHtkaXJ9LyouYXBwYCk7XG4gICAgICAgIGxldCBidW5kbGVJZCA9IGFwcEZpbGVzWzBdLm1hdGNoKC8uKlxcLyguKilcXC5hcHAvKVsxXTtcbiAgICAgICAgcmV0dXJuIHtwYXRoOiBkaXIsIGJ1bmRsZUlkfTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcGxpY2F0aW9uTGlzdCA9IHBhdGgucmVzb2x2ZSh0aGlzLmdldERpcigpLCAnQ29udGFpbmVycycsIHN1YkRpciwgJ0FwcGxpY2F0aW9uJyk7XG4gICAgICAvLyBnaXZlbiBhIGRpcmVjdG9yeSwgZmluZCB0aGUgcGxpc3QgZmlsZSBhbmQgcHVsbCB0aGUgYnVuZGxlIGlkIGZyb20gaXRcbiAgICAgIGxldCByZWFkQnVuZGxlSWQgPSBhc3luYyAoZGlyKSA9PiB7XG4gICAgICAgIGxldCBwbGlzdCA9IHBhdGgucmVzb2x2ZShkaXIsICcuY29tLmFwcGxlLm1vYmlsZV9jb250YWluZXJfbWFuYWdlci5tZXRhZGF0YS5wbGlzdCcpO1xuICAgICAgICBsZXQgbWV0YWRhdGEgPSBhd2FpdCBzZXR0aW5ncy5yZWFkKHBsaXN0KTtcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhLk1DTU1ldGFkYXRhSWRlbnRpZmllcjtcbiAgICAgIH07XG4gICAgICAvLyBnaXZlbiBhIGRpcmVjdG9yeSwgcmV0dXJuIHRoZSBwYXRoIGFuZCBidW5kbGUgaWQgYXNzb2NpYXRlZCB3aXRoIGl0XG4gICAgICBwYXRoQnVuZGxlUGFpciA9IGFzeW5jIChkaXIpID0+IHtcbiAgICAgICAgZGlyID0gcGF0aC5yZXNvbHZlKGFwcGxpY2F0aW9uTGlzdCwgZGlyKTtcbiAgICAgICAgbGV0IGJ1bmRsZUlkID0gYXdhaXQgcmVhZEJ1bmRsZUlkKGRpcik7XG4gICAgICAgIHJldHVybiB7cGF0aDogZGlyLCBidW5kbGVJZH07XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKGFwcGxpY2F0aW9uTGlzdCkpIHtcbiAgICAgIGxvZy53YXJuKGBObyBkaXJlY3RvcnkgcGF0aCAnJHthcHBsaWNhdGlvbkxpc3R9J2ApO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGxldCBidW5kbGVQYXRoRGlycyA9IGF3YWl0IGZzLnJlYWRkaXIoYXBwbGljYXRpb25MaXN0KTtcbiAgICBsZXQgYnVuZGxlUGF0aFBhaXJzID0gYXdhaXQgYXN5bmNtYXAoYnVuZGxlUGF0aERpcnMsIGFzeW5jIGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgIHJldHVybiBhd2FpdCBwYXRoQnVuZGxlUGFpcihkaXIpO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIC8vIHJlZHVjZSB0aGUgbGlzdCBvZiBwYXRoLWJ1bmRsZSBwYWlycyB0byBhbiBvYmplY3Qgd2hlcmUgYnVuZGxlSWRzIGFyZSBtYXBwZWQgdG8gcGF0aHNcbiAgICByZXR1cm4gYnVuZGxlUGF0aFBhaXJzLnJlZHVjZSgoYnVuZGxlTWFwLCBidW5kbGVQYXRoKSA9PiB7XG4gICAgICBidW5kbGVNYXBbYnVuZGxlUGF0aC5idW5kbGVJZF0gPSBidW5kbGVQYXRoLnBhdGg7XG4gICAgICByZXR1cm4gYnVuZGxlTWFwO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0YXRlIGFuZCBzcGVjaWZpY3Mgb2YgdGhpcyBzaW0uXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gU2ltdWxhdG9yIHN0YXRzIG1hcHBpbmcsIGZvciBleGFtcGxlOlxuICAgKiB7IG5hbWU6ICdpUGhvbmUgNHMnLFxuICAgKiAgIHVkaWQ6ICdDMDlCMzRFNS03RENCLTQ0MkUtQjc5Qy1BQjZCQzAzNTc0MTcnLFxuICAgKiAgIHN0YXRlOiAnU2h1dGRvd24nLFxuICAgKiAgIHNkazogJzguMydcbiAgICogfVxuICAgKi9cbiAgYXN5bmMgc3RhdCAoKSB7XG4gICAgZm9yIChsZXQgW3NkaywgZGV2aWNlQXJyXSBvZiBfLnRvUGFpcnMoYXdhaXQgdGhpcy5zaW1jdGwuZ2V0RGV2aWNlcygpKSkge1xuICAgICAgZm9yIChsZXQgZGV2aWNlIG9mIGRldmljZUFycikge1xuICAgICAgICBpZiAoZGV2aWNlLnVkaWQgPT09IHRoaXMudWRpZCkge1xuICAgICAgICAgIGRldmljZS5zZGsgPSBzZGs7XG4gICAgICAgICAgcmV0dXJuIGRldmljZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgYmVzdC1iZXQgaGV1cmlzdGljIGZvciB3aGV0aGVyIG9yIG5vdCBhIHNpbSBoYXMgYmVlbiBib290ZWRcbiAgICogYmVmb3JlLiBXZSB1c3VhbGx5IHdhbnQgdG8gc3RhcnQgYSBzaW11bGF0b3IgdG8gXCJ3YXJtXCIgaXQgdXAsIGhhdmVcbiAgICogWGNvZGUgcG9wdWxhdGUgaXQgd2l0aCBwbGlzdHMgZm9yIHVzIHRvIG1hbmlwdWxhdGUgYmVmb3JlIGEgcmVhbFxuICAgKiB0ZXN0IHJ1bi5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY3VycmVudCBTaW11bGF0b3IgaGFzIG5ldmVyIGJlZW4gc3RhcnRlZCBiZWZvcmVcbiAgICovXG4gIGFzeW5jIGlzRnJlc2ggKCkge1xuICAgIC8vIGlmIHRoZSBmb2xsb3dpbmcgZmlsZXMgZG9uJ3QgZXhpc3QsIGl0IGhhc24ndCBiZWVuIGJvb3RlZC5cbiAgICAvLyBUSElTIElTIE5PVCBBTiBFWEhBVVNUSVZFIExJU1RcbiAgICBsZXQgZmlsZXMgPSB0aGlzLmlzRnJlc2hGaWxlcztcblxuICAgIGxldCBwdiA9IGF3YWl0IHRoaXMuZ2V0UGxhdGZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKHB2ICE9PSAnNy4xJykge1xuICAgICAgZmlsZXMucHVzaCgnTGlicmFyeS9QcmVmZXJlbmNlcy9jb20uYXBwbGUuUHJlZmVyZW5jZXMucGxpc3QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZXMucHVzaCgnQXBwbGljYXRpb25zJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGlyID0gdGhpcy5nZXREaXIoKTtcbiAgICBmaWxlcyA9IGZpbGVzLm1hcCgocykgPT4gcGF0aC5yZXNvbHZlKGRpciwgcykpO1xuXG4gICAgY29uc3QgZXhpc3RlbmNlcyA9IGF3YWl0IGFzeW5jbWFwKGZpbGVzLCBhc3luYyAoZikgPT4gYXdhaXQgZnMuaGFzQWNjZXNzKGYpKTtcbiAgICBjb25zdCBmcmVzaCA9IF8uY29tcGFjdChleGlzdGVuY2VzKS5sZW5ndGggIT09IGZpbGVzLmxlbmd0aDtcbiAgICBsb2cuZGVidWcoYENoZWNraW5nIHdoZXRoZXIgc2ltdWxhdG9yIGhhcyBiZWVuIHJ1biBiZWZvcmU6ICR7ZnJlc2ggPyAnbm8nIDogJ3llcyd9YCk7XG5cbiAgICByZXR1cm4gZnJlc2g7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBzdGF0ZSBvZiB0aGUgY3VycmVudCBTaW11bGF0b3IuIE9uZSBzaG91bGQgZGlzdGluZ3Vpc2ggdGhlXG4gICAqIHN0YXRlcyBvZiBTaW11bGF0b3IgVUkgYW5kIHRoZSBTaW11bGF0b3IgaXRzZWxmLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjdXJyZW50IFNpbXVsYXRvciBpcyBydW5uaW5nLlxuICAgKi9cbiAgYXN5bmMgaXNSdW5uaW5nICgpIHtcbiAgICBsZXQgc3RhdCA9IGF3YWl0IHRoaXMuc3RhdCgpO1xuICAgIHJldHVybiBzdGF0LnN0YXRlID09PSAnQm9vdGVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgd2hldGhlciB0aGUgU2ltdWxhdG9yIGJvb3RpbmcgaXMgY29tcGxldGVkIGFuZC9vciB3YWl0IGZvciBpdFxuICAgKiB1bnRpbCB0aGUgdGltZW91dCBleHBpcmVzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnR1cFRpbWVvdXQgLSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIGJvb3RpbmcgaXMgY29tcGxldGVkLlxuICAgKiBAZW1pdHMgQk9PVF9DT01QTEVURURfRVZFTlQgaWYgdGhlIGN1cnJlbnQgU2ltdWxhdG9yIGlzIHJlYWR5IHRvIGFjY2VwdCBzaW1jdGwgY29tbWFuZHMsIGxpa2UgJ2luc3RhbGwnLlxuICAgKi9cbiAgYXN5bmMgd2FpdEZvckJvb3QgKHN0YXJ0dXBUaW1lb3V0KSB7XG4gICAgLy8gd2FpdCBmb3IgdGhlIHNpbXVsYXRvciB0byBib290XG4gICAgLy8gd2FpdGluZyBmb3IgdGhlIHNpbXVsYXRvciBzdGF0dXMgdG8gYmUgJ2Jvb3RlZCcgaXNuJ3QgZ29vZCBlbm91Z2hcbiAgICAvLyBpdCBjbGFpbXMgdG8gYmUgYm9vdGVkIHdheSBiZWZvcmUgZmluaXNoaW5nIGxvYWRpbmdcbiAgICAvLyBsZXQncyB0YWlsIHRoZSBzaW11bGF0b3Igc3lzdGVtIGxvZyB1bnRpbCB3ZSBzZWUgYSBtYWdpYyBsaW5lICh0aGlzLmJvb3RlZEluZGljYXRvcilcbiAgICBsZXQgYm9vdGVkSW5kaWNhdG9yID0gYXdhaXQgdGhpcy5nZXRCb290ZWRJbmRpY2F0b3JTdHJpbmcoKTtcbiAgICBhd2FpdCB0aGlzLnRhaWxMb2dzVW50aWwoYm9vdGVkSW5kaWNhdG9yLCBzdGFydHVwVGltZW91dCk7XG5cbiAgICAvLyBzbyBzb3JyeSwgYnV0IHdlIHNob3VsZCB3YWl0IGFub3RoZXIgdHdvIHNlY29uZHMsIGp1c3QgdG8gbWFrZSBzdXJlIHdlJ3ZlIHJlYWxseSBzdGFydGVkXG4gICAgLy8gd2UgY2FuJ3QgbG9vayBmb3IgYW5vdGhlciBtYWdpYyBsb2cgbGluZSwgYmVjYXVzZSB0aGV5IHNlZW0gdG8gYmUgYXBwLWRlcGVuZGVudCAobm90IHN5c3RlbSBkZXBlbmRlbnQpXG4gICAgbG9nLmRlYnVnKGBXYWl0aW5nIGFuIGV4dHJhICR7dGhpcy5leHRyYVN0YXJ0dXBUaW1lfW1zIGZvciB0aGUgc2ltdWxhdG9yIHRvIHJlYWxseSBmaW5pc2ggYm9vdGluZ2ApO1xuICAgIGF3YWl0IEIuZGVsYXkodGhpcy5leHRyYVN0YXJ0dXBUaW1lKTtcbiAgICBsb2cuZGVidWcoJ0RvbmUgd2FpdGluZyBleHRyYSB0aW1lIGZvciBzaW11bGF0b3InKTtcblxuICAgIHRoaXMuZW1pdChCT09UX0NPTVBMRVRFRF9FVkVOVCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG1hZ2ljIHN0cmluZywgd2hpY2gsIGlmIHByZXNlbnQgaW4gbG9ncywgcmVmbGVjdHMgdGhlIGZhY3QgdGhhdCBzaW11bGF0b3IgYm9vdGluZyBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG1hZ2ljIGxvZyBzdHJpbmcuXG4gICAqL1xuICBhc3luYyBnZXRCb290ZWRJbmRpY2F0b3JTdHJpbmcgKCkge1xuICAgIGxldCBpbmRpY2F0b3I7XG4gICAgbGV0IHBsYXRmb3JtVmVyc2lvbiA9IGF3YWl0IHRoaXMuZ2V0UGxhdGZvcm1WZXJzaW9uKCk7XG4gICAgc3dpdGNoIChwbGF0Zm9ybVZlcnNpb24pIHtcbiAgICAgIGNhc2UgJzcuMSc6XG4gICAgICBjYXNlICc4LjEnOlxuICAgICAgY2FzZSAnOC4yJzpcbiAgICAgIGNhc2UgJzguMyc6XG4gICAgICBjYXNlICc4LjQnOlxuICAgICAgICBpbmRpY2F0b3IgPSAncHJvZmlsZWQ6IFNlcnZpY2Ugc3RhcnRpbmcuLi4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzkuMCc6XG4gICAgICBjYXNlICc5LjEnOlxuICAgICAgY2FzZSAnOS4yJzpcbiAgICAgIGNhc2UgJzkuMyc6XG4gICAgICAgIGluZGljYXRvciA9ICdTeXN0ZW0gYXBwIFwiY29tLmFwcGxlLnNwcmluZ2JvYXJkXCIgZmluaXNoZWQgc3RhcnR1cCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnMTAuMCc6XG4gICAgICAgIGluZGljYXRvciA9ICdTd2l0Y2hpbmcgdG8ga2V5Ym9hcmQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZy53YXJuKGBObyBib290IGluZGljYXRvciBjYXNlIGZvciBwbGF0Zm9ybSB2ZXJzaW9uICcke3BsYXRmb3JtVmVyc2lvbn0nYCk7XG4gICAgICAgIGluZGljYXRvciA9ICdubyBib290IGluZGljYXRvciBzdHJpbmcgYXZhaWxhYmxlJztcbiAgICB9XG4gICAgcmV0dXJuIGluZGljYXRvcjtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFNpbXVsYXRvck9wdGlvbnNcbiAgICogQHByb3BlcnR5IHs/c3RyaW5nfSBzY2FsZUZhY3RvciBbbnVsbF0gLSBEZWZpbmVzIHRoZSB3aW5kb3cgc2NhbGUgdmFsdWUgZm9yIHRoZSBVSSBjbGllbnQgd2luZG93IGZvciB0aGUgY3VycmVudCBTaW11bGF0b3IuXG4gICAqICAgRXF1YWxzIHRvIG51bGwgYnkgZGVmYXVsdCwgd2hpY2gga2VlcHMgdGhlIGN1cnJlbnQgc2NhbGUgdW5jaGFuZ2VkLlxuICAgKiAgIEl0IHNob3VsZCBiZSBvbmUgb2YgWycxLjAnLCAnMC43NScsICcwLjUnLCAnMC4zMycsICcwLjI1J10uXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQgW2ZhbHNlXSAtIFdoZXRoZXIgdG8gY29ubmVjdCB0aGUgaGFyZHdhcmUga2V5Ym9hcmQgdG8gdGhlXG4gICAqICAgU2ltdWxhdG9yIFVJIGNsaWVudC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXN0ZWJvYXJkQXV0b21hdGljU3luYyBbJ29mZiddIC0gV2hldGhlciB0byBkaXNhYmxlIHBhc3RlYm9hcmQgc3luYyB3aXRoIHRoZVxuICAgKiAgIFNpbXVsYXRvciBVSSBjbGllbnQgb3IgcmVzcGVjdCB0aGUgc3lzdGVtIHdpZGUgcHJlZmVyZW5jZS4gJ29uJywgJ29mZicsIG9yICdzeXN0ZW0nIGlzIGF2YWlsYWJsZS5cbiAgICogICBUaGUgc3luYyBpbmNyZWFzZXMgbGF1bmNoaW5nIHNpbXVsYXRvciBwcm9jZXNzIHRpbWUsIGJ1dCBpdCBhbGxvd3Mgc3lzdGVtIHRvIHN5bmMgcGFzdGVib2FyZFxuICAgKiAgIHdpdGggc2ltdWxhdG9ycy4gRm9sbG93cyBzeXN0ZW0td2lkZSBwcmVmZXJlbmNlIGlmIHRoZSB2YWx1ZSBpcyAnc3lzdGVtJy5cbiAgICogICBEZWZhdWx0cyB0byAnb2ZmJy5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN0YXJ0dXBUaW1lb3V0IFs2MDAwMF0gLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWwgU2ltdWxhdG9yIGJvb3RpbmdcbiAgICogICBwcm9jZXNzIGlzIGNvbXBsZXRlZC4gVGhlIGRlZmF1bHQgdGltZW91dCB3aWxsIGJlIHVzZWQgaWYgbm90IHNldCBleHBsaWNpdGx5LlxuICAgKiBAcHJvcGVydHkgez9ib29sZWFufSB0cmFjZVBvaW50ZXIgW2ZhbHNlXSAtIFdoZXRoZXIgdG8gaGlnaGxpZ2h0IHRvdWNoZXMgb24gU2ltdWxhdG9yXG4gICAqICAgc2NyZWVuLiBUaGlzIGlzIGhlbHBmdWwgd2hpbGUgZGVidWdnaW5nIGF1dG9tYXRlZCB0ZXN0cyBvciB3aGlsZSBvYnNlcnZpbmcgdGhlIGF1dG9tYXRpb25cbiAgICogICByZWNvcmRpbmdzLlxuICAgKi9cblxuICAvKipcbiAgICogU3RhcnQgdGhlIFNpbXVsYXRvciBVSSBjbGllbnQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAqIEBwYXJhbSB7U2ltdWxhdG9yT3B0aW9uc30gb3B0cyAtIFNpbXVsYXRvciBzdGFydHVwIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIHN0YXJ0VUlDbGllbnQgKG9wdHMgPSB7fSkge1xuICAgIG9wdHMgPSBfLmNsb25lRGVlcChvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcChvcHRzLCB7XG4gICAgICBzY2FsZUZhY3RvcjogbnVsbCxcbiAgICAgIGNvbm5lY3RIYXJkd2FyZUtleWJvYXJkOiBmYWxzZSxcbiAgICAgIHBhc3RlYm9hcmRBdXRvbWF0aWNTeW5jOiAnb2ZmJyxcbiAgICAgIHRyYWNlUG9pbnRlcjogZmFsc2UsXG4gICAgICBzdGFydHVwVGltZW91dDogdGhpcy5zdGFydHVwVGltZW91dCxcbiAgICB9KTtcblxuICAgIGNvbnN0IHNpbXVsYXRvckFwcCA9IHBhdGgucmVzb2x2ZShhd2FpdCBnZXRYY29kZVBhdGgoKSwgJ0FwcGxpY2F0aW9ucycsIHRoaXMuc2ltdWxhdG9yQXBwKTtcbiAgICBjb25zdCBhcmdzID0gW1xuICAgICAgJy1GbicsIHNpbXVsYXRvckFwcCxcbiAgICAgICctLWFyZ3MnLCAnLUN1cnJlbnREZXZpY2VVRElEJywgdGhpcy51ZGlkLFxuICAgICAgJy1Sb3RhdGVXaW5kb3dXaGVuU2lnbmFsZWRCeUd1ZXN0JywgJzEnLFxuICAgIF07XG5cbiAgICBpZiAob3B0cy5zY2FsZUZhY3Rvcikge1xuICAgICAgY29uc3Qgc3RhdCA9IGF3YWl0IHRoaXMuc3RhdCgpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkRGV2aWNlTmFtZSA9IHN0YXQubmFtZS5yZXBsYWNlKC9cXHMrL2csICctJyk7XG4gICAgICBjb25zdCBhcmd1bWVudE5hbWUgPSBgLVNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZS1jb20uYXBwbGUuQ29yZVNpbXVsYXRvci5TaW1EZXZpY2VUeXBlLiR7Zm9ybWF0dGVkRGV2aWNlTmFtZX1gO1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50TmFtZSwgb3B0cy5zY2FsZUZhY3Rvcik7XG4gICAgfVxuXG4gICAgaWYgKF8uaXNCb29sZWFuKG9wdHMuY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQpKSB7XG4gICAgICBhcmdzLnB1c2goJy1Db25uZWN0SGFyZHdhcmVLZXlib2FyZCcsIGAkeytvcHRzLmNvbm5lY3RIYXJkd2FyZUtleWJvYXJkfWApO1xuICAgIH1cblxuICAgIGlmIChvcHRzLnRyYWNlUG9pbnRlciA9PT0gdHJ1ZSkge1xuICAgICAgYXJncy5wdXNoKFxuICAgICAgICAnLVNob3dTaW5nbGVUb3VjaGVzJywgJzEnLFxuICAgICAgICAnLVNob3dQaW5jaGVzJywgJzEnLFxuICAgICAgICAnLVNob3dQaW5jaFBpdm90UG9pbnQnLCAnMScsXG4gICAgICAgICctSGlnaGxpZ2h0RWRnZUdlc3R1cmVzJywgJzEnXG4gICAgICApO1xuICAgIH1cblxuICAgIHN3aXRjaCAoXy5sb3dlckNhc2Uob3B0cy5wYXN0ZWJvYXJkQXV0b21hdGljU3luYykpIHtcbiAgICAgIGNhc2UgJ29uJzpcbiAgICAgICAgYXJncy5wdXNoKCctUGFzdGVib2FyZEF1dG9tYXRpY1N5bmMnLCAnMScpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29mZic6XG4gICAgICAgIC8vIEltcHJvdmUgbGF1bmNoaW5nIHNpbXVsYXRvciBwZXJmb3JtYW5jZVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L3dlYmtpdC9ibG9iL21hc3Rlci9Ub29scy9TY3JpcHRzL3dlYmtpdHB5L3hjb2RlL3NpbXVsYXRlZF9kZXZpY2UucHkjTDQxM1xuICAgICAgICBhcmdzLnB1c2goJy1QYXN0ZWJvYXJkQXV0b21hdGljU3luYycsICcwJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3lzdGVtJzpcbiAgICAgICAgLy8gRG8gbm90IGFkZCAtUGFzdGVib2FyZEF1dG9tYXRpY1N5bmNcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2cud2FybihgWydvbicsICdvZmYnIG9yICdzeXN0ZW0nXSBhcmUgYXZhaWxhYmxlIGFzIHRoZSBwYXN0ZWJvYXJkIGF1dG9tYXRpYyBzeW5jIG9wdGlvbi4gRGVmYXVsdGluZyB0byAnb2ZmJy5gKTtcbiAgICAgICAgYXJncy5wdXNoKCctUGFzdGVib2FyZEF1dG9tYXRpY1N5bmMnLCAnMCcpO1xuICAgIH1cblxuICAgIGxvZy5pbmZvKGBTdGFydGluZyBTaW11bGF0b3IgVUkgd2l0aCBjb21tYW5kOiBvcGVuICR7YXJncy5qb2luKCcgJyl9YCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGV4ZWMoJ29wZW4nLCBhcmdzLCB7dGltZW91dDogb3B0cy5zdGFydHVwVGltZW91dH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKCEoZXJyLnN0ZG91dCB8fCAnJykuaW5jbHVkZXMoJy0xMDgyNScpICYmICEoZXJyLnN0ZGVyciB8fCAnJykuaW5jbHVkZXMoJy0xMDgyNScpKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICAgIGxvZy53YXJuKGBFcnJvciB3aGlsZSBvcGVuaW5nIFVJOiAke2Vyci5zdGRvdXQgfHwgZXJyLnN0ZGVycn0uIENvbnRpbnVpbmdgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgZ2l2ZW4gU2ltdWxhdG9yIHdpdGggb3B0aW9ucy4gVGhlIFNpbXVsYXRvciB3aWxsIG5vdCBiZSByZXN0YXJ0ZWQgaWZcbiAgICogaXQgaXMgYWxyZWFkeSBydW5uaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE9uZSBvciBtb3JlIG9mIGF2YWlsYWJsZSBTaW11bGF0b3Igb3B0aW9ucy5cbiAgICogICBTZWUgeyNzdGFydFVJQ2xpZW50KG9wdHMpfSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGRldGFpbHMgb24gb3RoZXIgc3VwcG9ydGVkIGtleXMuXG4gICAqL1xuICBhc3luYyBydW4gKG9wdHMgPSB7fSkge1xuICAgIG9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIHN0YXJ0dXBUaW1lb3V0OiB0aGlzLnN0YXJ0dXBUaW1lb3V0LFxuICAgIH0sIG9wdHMpO1xuICAgIGNvbnN0IHtzdGF0ZX0gPSBhd2FpdCB0aGlzLnN0YXQoKTtcbiAgICBjb25zdCBpc1NlcnZlclJ1bm5pbmcgPSBzdGF0ZSA9PT0gJ0Jvb3RlZCc7XG4gICAgY29uc3QgaXNVSUNsaWVudFJ1bm5pbmcgPSBhd2FpdCB0aGlzLmlzVUlDbGllbnRSdW5uaW5nKCk7XG4gICAgaWYgKGlzU2VydmVyUnVubmluZyAmJiBpc1VJQ2xpZW50UnVubmluZykge1xuICAgICAgbG9nLmluZm8oYEJvdGggU2ltdWxhdG9yIHdpdGggVURJRCAke3RoaXMudWRpZH0gYW5kIHRoZSBVSSBjbGllbnQgYXJlIGN1cnJlbnRseSBydW5uaW5nYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc2h1dGRvd24oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy53YXJuKGBFcnJvciBvbiBTaW11bGF0b3Igc2h1dGRvd246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuc3RhcnRVSUNsaWVudChvcHRzKTtcblxuICAgIGF3YWl0IHRoaXMud2FpdEZvckJvb3Qob3B0cy5zdGFydHVwVGltZW91dCk7XG4gICAgbG9nLmluZm8oYFNpbXVsYXRvciB3aXRoIFVESUQgJHt0aGlzLnVkaWR9IGJvb3RlZCBpbiAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzLnRvRml4ZWQoMyl9c2ApO1xuICB9XG5cbiAgLy8gVE9ETyBrZWVwIGtleWNoYWluc1xuICAvKipcbiAgICogUmVzZXQgdGhlIGN1cnJlbnQgU2ltdWxhdG9yIHRvIHRoZSBjbGVhbiBzdGF0ZS5cbiAgICovXG4gIGFzeW5jIGNsZWFuICgpIHtcbiAgICBhd2FpdCB0aGlzLmVuZFNpbXVsYXRvckRhZW1vbigpO1xuICAgIGxvZy5pbmZvKGBDbGVhbmluZyBzaW11bGF0b3IgJHt0aGlzLnVkaWR9YCk7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwuZXJhc2VEZXZpY2UoMTAwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjcnViIChkZWxldGUgdGhlIHByZWZlcmVuY2VzIGFuZCBjaGFuZ2VkIGZpbGVzKSB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbiBvbiBTaW11bGF0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBGaWxlIC0gQXBwbGljYXRpb24gbmFtZSBtaW51cyBcIi5hcHBcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcEJ1bmRsZUlkIC0gQnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgYXN5bmMgc2NydWJDdXN0b21BcHAgKGFwcEZpbGUsIGFwcEJ1bmRsZUlkKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xlYW5DdXN0b21BcHAoYXBwRmlsZSwgYXBwQnVuZGxlSWQsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuL3NjcnViIHRoZSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIG9uIFNpbXVsYXRvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcEZpbGUgLSBBcHBsaWNhdGlvbiBuYW1lIG1pbnVzIFwiLmFwcFwiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwQnVuZGxlSWQgLSBCdW5kbGUgaWRlbnRpZmllciBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2NydWIgLSBJZiBgc2NydWJgIGlzIGZhbHNlLCB3ZSB3YW50IHRvIGNsZWFuIGJ5IGRlbGV0aW5nIHRoZSBhcHAgYW5kIGFsbFxuICAgKiAgIGZpbGVzIGFzc29jaWF0ZWQgd2l0aCBpdC4gSWYgYHNjcnViYCBpcyB0cnVlLCB3ZSBqdXN0IHdhbnQgdG8gZGVsZXRlIHRoZSBwcmVmZXJlbmNlcyBhbmRcbiAgICogICBjaGFuZ2VkIGZpbGVzLlxuICAgKi9cbiAgYXN5bmMgY2xlYW5DdXN0b21BcHAgKGFwcEZpbGUsIGFwcEJ1bmRsZUlkLCBzY3J1YiA9IGZhbHNlKSB7XG4gICAgbG9nLmRlYnVnKGBDbGVhbmluZyBhcHAgZGF0YSBmaWxlcyBmb3IgJyR7YXBwRmlsZX0nLCAnJHthcHBCdW5kbGVJZH0nYCk7XG4gICAgaWYgKCFzY3J1Yikge1xuICAgICAgbG9nLmRlYnVnKGBEZWxldGluZyBhcHAgYWx0b2dldGhlcmApO1xuICAgIH1cblxuICAgIC8vIGdldCB0aGUgZGlyZWN0b3JpZXMgdG8gYmUgZGVsZXRlZFxuICAgIGxldCBhcHBEaXJzID0gYXdhaXQgdGhpcy5nZXRBcHBEaXJzKGFwcEZpbGUsIGFwcEJ1bmRsZUlkLCBzY3J1Yik7XG5cbiAgICBpZiAoYXBwRGlycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxvZy5kZWJ1ZygnQ291bGQgbm90IGZpbmQgYXBwIGRpcmVjdG9yaWVzIHRvIGRlbGV0ZS4gSXQgaXMgcHJvYmFibHkgbm90IGluc3RhbGxlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBkZWxldGVQcm9taXNlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZGlyIG9mIGFwcERpcnMpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgRGVsZXRpbmcgZGlyZWN0b3J5OiAnJHtkaXJ9J2ApO1xuICAgICAgZGVsZXRlUHJvbWlzZXMucHVzaChmcy5yaW1yYWYoZGlyKSk7XG4gICAgfVxuXG4gICAgaWYgKGF3YWl0IHRoaXMuZ2V0UGxhdGZvcm1WZXJzaW9uKCkgPj0gOCkge1xuICAgICAgbGV0IHJlbFJtUGF0aCA9IGBMaWJyYXJ5L1ByZWZlcmVuY2VzLyR7YXBwQnVuZGxlSWR9LnBsaXN0YDtcbiAgICAgIGxldCBybVBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5nZXRSb290RGlyKCksIHJlbFJtUGF0aCk7XG4gICAgICBsb2cuZGVidWcoYERlbGV0aW5nIGZpbGU6ICcke3JtUGF0aH0nYCk7XG4gICAgICBkZWxldGVQcm9taXNlcy5wdXNoKGZzLnJpbXJhZihybVBhdGgpKTtcbiAgICB9XG5cbiAgICBhd2FpdCBCLmFsbChkZWxldGVQcm9taXNlcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgcGF0aHMgdG8gZGlycyB3aGVyZSBhcHBsaWNhdGlvbiBkYXRhIGlzIHN0b3JlZC4gaU9TIDgrIHN0b3JlcyBhcHAgZGF0YSBpbiB0d28gcGxhY2VzLFxuICAgKiBhbmQgaU9TIDcuMSBoYXMgb25seSBvbmUgZGlyZWN0b3J5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBGaWxlIC0gQXBwbGljYXRpb24gbmFtZSBtaW51cyBcIi5hcHBcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcEJ1bmRsZUlkIC0gQnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNjcnViIC0gVGhlIGBCdW5kbGVgIGRpcmVjdG9yeSBoYXMgdGhlIGFjdHVhbCBhcHAgaW4gaXQuIElmIHdlIGFyZSBqdXN0IHNjcnViYmluZyxcbiAgICogICB3ZSB3YW50IHRoaXMgdG8gc3RheS4gSWYgd2UgYXJlIGNsZWFuaW5nIHdlIGRlbGV0ZS5cbiAgICogQHJldHVybiB7YXJyYXk8c3RyaW5nPn0gQXJyYXkgb2YgYXBwbGljYXRpb24gZGF0YSBwYXRocy5cbiAgICovXG4gIGFzeW5jIGdldEFwcERpcnMgKGFwcEZpbGUsIGFwcEJ1bmRsZUlkLCBzY3J1YiA9IGZhbHNlKSB7XG4gICAgbGV0IGRpcnMgPSBbXTtcbiAgICBpZiAoYXdhaXQgdGhpcy5nZXRQbGF0Zm9ybVZlcnNpb24oKSA+PSA4KSB7XG4gICAgICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0QXBwRGlyKGFwcEJ1bmRsZUlkKTtcbiAgICAgIGlmICghZGF0YSkgcmV0dXJuIGRpcnM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcblxuICAgICAgbGV0IGJ1bmRsZSA9ICFzY3J1YiA/IGF3YWl0IHRoaXMuZ2V0QXBwRGlyKGFwcEJ1bmRsZUlkLCAnQnVuZGxlJykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGZvciAobGV0IHNyYyBvZiBbZGF0YSwgYnVuZGxlXSkge1xuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgZGlycy5wdXNoKHNyYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRhdGEgPSBhd2FpdCB0aGlzLmdldEFwcERpcihhcHBGaWxlKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRpcnMucHVzaChkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpcnM7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgU2ltdWxhdG9yIGluIG9yZGVyIHRvIGhhdmUgdGhlIGluaXRpYWwgZmlsZSBzdHJ1Y3R1cmUgY3JlYXRlZCBhbmQgc2h1dGRvd24gaXQgYWZ0ZXJ3YXJkcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBzYWZhcmkgLSBXaGV0aGVyIHRvIGV4ZWN1dGUgbW9iaWxlIFNhZmFyaSBhZnRlciBzdGFydHVwLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnR1cFRpbWVvdXQgLSBIb3cgbG9uZyB0byB3YWl0IHVudGlsIFNpbXVsYXRvciBib290aW5nIGlzIGNvbXBsZXRlZCAoaW4gbWlsbGlzZWNvbmRzKS5cbiAgICovXG4gIGFzeW5jIGxhdW5jaEFuZFF1aXQgKHNhZmFyaSA9IGZhbHNlLCBzdGFydHVwVGltZW91dCA9IHRoaXMuc3RhcnR1cFRpbWVvdXQpIHtcbiAgICBsb2cuZGVidWcoJ0F0dGVtcHRpbmcgdG8gbGF1bmNoIGFuZCBxdWl0IHRoZSBzaW11bGF0b3IsIHRvIGNyZWF0ZSBkaXJlY3Rvcnkgc3RydWN0dXJlJyk7XG4gICAgbG9nLmRlYnVnKGBXaWxsIGxhdW5jaCB3aXRoIFNhZmFyaT8gJHtzYWZhcml9YCk7XG5cbiAgICBhd2FpdCB0aGlzLnJ1bihzdGFydHVwVGltZW91dCk7XG5cbiAgICBpZiAoc2FmYXJpKSB7XG4gICAgICBhd2FpdCB0aGlzLm9wZW5VcmwoJ2h0dHA6Ly93d3cuYXBwaXVtLmlvJyk7XG4gICAgfVxuXG4gICAgLy8gd2FpdCBmb3IgdGhlIHN5c3RlbSB0byBjcmVhdGUgdGhlIGZpbGVzIHdlIHdpbGwgbWFuaXB1bGF0ZVxuICAgIC8vIG5lZWQgcXVpdGUgYSBoaWdoIHJldHJ5IG51bWJlciwgaW4gb3JkZXIgdG8gYWNjb21tb2RhdGUgaU9TIDcuMVxuICAgIC8vIGxvY2FsbHksIDcuMSBhdmVyYWdlcyA4LjUgcmV0cmllcyAoZnJvbSA2IC0gMTIpXG4gICAgLy8gICAgICAgICAgOCBhdmVyYWdlcyAwLjYgcmV0cmllcyAoZnJvbSAwIC0gMilcbiAgICAvLyAgICAgICAgICA5IGF2ZXJhZ2VzIDE0IHJldHJpZXNcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCg2MCwgMjUwLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmlzRnJlc2goKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2ltdWxhdG9yIGZpbGVzIG5vdCBmdWxseSBjcmVhdGVkLiBXYWl0aW5nIGEgYml0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oYFRpbWVvdXQgd2FpdGluZyBmb3Igc2ltdWxhdG9yIGZpbGVzIHRvIGJlIGNyZWF0ZWQuIENvbnRpbnVpbmdgKTtcbiAgICB9XG5cbiAgICAvLyBhbmQgcXVpdFxuICAgIGF3YWl0IHRoaXMuc2h1dGRvd24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29rcyBmb3IgbGF1bmNoZCBkYWVtb25zIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNpbSB1ZGlkIGFuZCB0cmllcyB0byBzdG9wIHRoZW0gY2xlYW5seVxuICAgKiBUaGlzIHByZXZlbnRzIHhjcnVuIHNpbWN0bCBlcmFzZSBmcm9tIGhhbmdpbmcuXG4gICAqL1xuICBhc3luYyBlbmRTaW11bGF0b3JEYWVtb24gKCkge1xuICAgIGxvZy5kZWJ1ZyhgS2lsbGluZyBhbnkgc2ltdWxhdG9yIGRhZW1vbnMgZm9yICR7dGhpcy51ZGlkfWApO1xuXG4gICAgbGV0IGxhdW5jaGN0bENtZCA9IGBsYXVuY2hjdGwgbGlzdCB8IGdyZXAgJHt0aGlzLnVkaWR9IHwgY3V0IC1mIDMgfCB4YXJncyAtbiAxIGxhdW5jaGN0bGA7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzdG9wQ21kID0gYCR7bGF1bmNoY3RsQ21kfSBzdG9wYDtcbiAgICAgIGF3YWl0IGV4ZWMoJ2Jhc2gnLCBbJy1jJywgc3RvcENtZF0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oYENvdWxkIG5vdCBzdG9wIHNpbXVsYXRvciBkYWVtb25zOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgbG9nLmRlYnVnKCdDYXJyeWluZyBvbiBhbnl3YXkhJyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsZXQgcmVtb3ZlQ21kID0gYCR7bGF1bmNoY3RsQ21kfSByZW1vdmVgO1xuICAgICAgYXdhaXQgZXhlYygnYmFzaCcsIFsnLWMnLCByZW1vdmVDbWRdKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy53YXJuKGBDb3VsZCBub3QgcmVtb3ZlIHNpbXVsYXRvciBkYWVtb25zOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgbG9nLmRlYnVnKCdDYXJyeWluZyBvbiBhbnl3YXkhJyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyBXYWl0cyAxMCBzZWMgZm9yIHRoZSBzaW11bGF0b3IgbGF1bmNoZCBzZXJ2aWNlcyB0byBzdG9wLlxuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ2Jhc2gnLCBbJy1jJyxcbiAgICAgICAgICBgcHMgLWUgIHwgZ3JlcCAke3RoaXMudWRpZH0gfCBncmVwIGxhdW5jaGRfc2ltIHwgZ3JlcCAtdiBiYXNoIHwgZ3JlcCAtdiBncmVwIHwgYXdrIHsncHJpbnQkMSd9YF0pO1xuICAgICAgICByZXR1cm4gc3Rkb3V0LnRyaW0oKS5sZW5ndGggPT09IDA7XG4gICAgICB9LCB7d2FpdE1zOiAxMDAwMCwgaW50ZXJ2YWxNczogNTAwfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cud2FybihgQ291bGQgbm90IGVuZCBzaW11bGF0b3IgZGFlbW9uIGZvciAke3RoaXMudWRpZH06ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICBsb2cuZGVidWcoJ0NhcnJ5aW5nIG9uIGFueXdheSEnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2h1dGRvd24gYWxsIHRoZSBydW5uaW5nIFNpbXVsYXRvcnMgYW5kIHRoZSBVSSBjbGllbnQuXG4gICAqL1xuICBhc3luYyBzaHV0ZG93biAoKSB7XG4gICAgYXdhaXQga2lsbEFsbFNpbXVsYXRvcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdGhlIHBhcnRpY3VsYXIgU2ltdWxhdG9yIGZyb20gZGV2aWNlcyBsaXN0XG4gICAqL1xuICBhc3luYyBkZWxldGUgKCkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLmRlbGV0ZURldmljZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgcGFydGljdWxhciBwcmVmZXJlbmNlIGZpbGUgd2l0aCB0aGUgZ2l2ZW4ga2V5L3ZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGxpc3QgLSBUaGUgcHJlZmVyZW5jZXMgZmlsZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB1cGRhdGVzIC0gVGhlIGtleS92YWx1ZSBwYWlycyB0byB1cGRhdGUuXG4gICAqL1xuICBhc3luYyB1cGRhdGVTZXR0aW5ncyAocGxpc3QsIHVwZGF0ZXMpIHtcbiAgICByZXR1cm4gYXdhaXQgc2V0dGluZ3MudXBkYXRlU2V0dGluZ3ModGhpcywgcGxpc3QsIHVwZGF0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhvcml6ZS9kZS1hdXRob3JpemUgbG9jYXRpb24gc2V0dGluZ3MgZm9yIGEgcGFydGljdWxhciBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGFwcGxpY2F0aW9uIElEIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBhdXRob3JpemVkIC0gV2hldGhlciBvciBub3QgdG8gYXV0aG9yaXplLlxuICAgKi9cbiAgYXN5bmMgdXBkYXRlTG9jYXRpb25TZXR0aW5ncyAoYnVuZGxlSWQsIGF1dGhvcml6ZWQpIHtcbiAgICByZXR1cm4gYXdhaXQgc2V0dGluZ3MudXBkYXRlTG9jYXRpb25TZXR0aW5ncyh0aGlzLCBidW5kbGVJZCwgYXV0aG9yaXplZCk7XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlL0Rpc2FibGUgcmVkdWNlIG1vdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZWR1Y2VNb3Rpb24gLSBXaGV0aGVyIG9yIG5vdCB0byBlbmFibGUgaXQuXG4gICAqL1xuICBhc3luYyBzZXRSZWR1Y2VNb3Rpb24gKHJlZHVjZU1vdGlvbiA9IHRydWUpIHtcbiAgICBpZiAoYXdhaXQgdGhpcy5pc0ZyZXNoKCkpIHtcbiAgICAgIGF3YWl0IHRoaXMubGF1bmNoQW5kUXVpdChmYWxzZSwgU1RBUlRVUF9USU1FT1VUKTtcbiAgICB9XG5cbiAgICBhd2FpdCBzZXR0aW5ncy5zZXRSZWR1Y2VNb3Rpb24odGhpcywgcmVkdWNlTW90aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIFVJIGFwcGVhcmFuY2Ugc3R5bGUuXG4gICAqIFRoaXMgZnVuY3Rpb24gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgYm9vdGVkIHNpbXVsYXRvci5cbiAgICpcbiAgICogQHNpbmNlIFhjb2RlIFNESyAxMS40XG4gICAqL1xuICBhc3luYyBzZXRBcHBlYXJhbmNlICgvKiB2YWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFhjb2RlIFNESyAnJHt0aGlzLnhjb2RlVmVyc2lvbn0nIGlzIHRvbyBvbGQgdG8gc2V0IFVJIGFwcGVhcmFuY2VgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IFVJIGFwcGVhcmFuY2Ugc3R5bGVcbiAgICogVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSBib290ZWQgc2ltdWxhdG9yLlxuICAgKlxuICAgKiBAc2luY2UgWGNvZGUgU0RLIDExLjRcbiAgICovXG4gIGFzeW5jIGdldEFwcGVhcmFuY2UgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFhjb2RlIFNESyAnJHt0aGlzLnhjb2RlVmVyc2lvbn0nIGlzIHRvbyBvbGQgdG8gZ2V0IFVJIGFwcGVhcmFuY2VgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc2V0dGluZ3MgZm9yIFNhZmFyaS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHVwZGF0ZXMgLSBUaGUgaGFzaCBvZiBrZXkvdmFsdWUgcGFpcnMgdG8gdXBkYXRlIGZvciBTYWZhcmkuXG4gICAqL1xuICBhc3luYyB1cGRhdGVTYWZhcmlTZXR0aW5ncyAodXBkYXRlcykge1xuICAgIGxldCB1cGRhdGVkID0gYXdhaXQgc2V0dGluZ3MudXBkYXRlU2FmYXJpVXNlclNldHRpbmdzKHRoaXMsIHVwZGF0ZXMpO1xuICAgIHJldHVybiBhd2FpdCBzZXR0aW5ncy51cGRhdGVTZXR0aW5ncyh0aGlzLCAnbW9iaWxlU2FmYXJpJywgdXBkYXRlcykgfHwgdXBkYXRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgZ2xvYmFsIHNldHRpbmdzIGZvciBTYWZhcmkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB1cGRhdGVzIC0gVGhlIGhhc2ggb2Yga2V5L3ZhbHVlIHBhaXJzIHRvIHVwZGF0ZSBmb3IgU2FmYXJpLlxuICAgKi9cbiAgYXN5bmMgdXBkYXRlU2FmYXJpR2xvYmFsU2V0dGluZ3MgKHVwZGF0ZXMpIHtcbiAgICByZXR1cm4gYXdhaXQgc2V0dGluZ3MudXBkYXRlU2FmYXJpR2xvYmFsU2V0dGluZ3ModGhpcywgdXBkYXRlcyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBsb2NhbGUgZm9yIHRoZSBTaW11bGF0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSAtIFRoZSBsYW5ndWFnZSBmb3IgdGhlIHNpbXVsYXRvci4gRS5nLiwgYFwiZnJfVVNcImAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgLSBUaGUgbG9jYWxlIHRvIHNldCBmb3IgdGhlIHNpbXVsYXRvci4gRS5nLiwgYFwiZW5cImAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxlbmRhckZvcm1hdCAtIFRoZSBmb3JtYXQgb2YgdGhlIGNhbGVuZGFyLlxuICAgKi9cbiAgYXN5bmMgdXBkYXRlTG9jYWxlIChsYW5ndWFnZSwgbG9jYWxlLCBjYWxlbmRhckZvcm1hdCkge1xuICAgIHJldHVybiBhd2FpdCBzZXR0aW5ncy51cGRhdGVMb2NhbGUodGhpcywgbGFuZ3VhZ2UsIGxvY2FsZSwgY2FsZW5kYXJGb3JtYXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBsZXRlbHkgZGVsZXRlIG1vYmlsZSBTYWZhcmkgYXBwbGljYXRpb24gZnJvbSB0aGUgY3VycmVudCBTaW11bGF0b3IuXG4gICAqL1xuICBhc3luYyBkZWxldGVTYWZhcmkgKCkge1xuICAgIGxvZy5kZWJ1ZygnRGVsZXRpbmcgU2FmYXJpIGFwcHMgZnJvbSBzaW11bGF0b3InKTtcblxuICAgIGxldCBkaXJzID0gW107XG5cbiAgICAvLyBnZXQgdGhlIGRhdGEgZGlyZWN0b3J5XG4gICAgZGlycy5wdXNoKGF3YWl0IHRoaXMuZ2V0QXBwRGlyKCdjb20uYXBwbGUubW9iaWxlc2FmYXJpJykpO1xuXG4gICAgbGV0IHB2ID0gYXdhaXQgdGhpcy5nZXRQbGF0Zm9ybVZlcnNpb24oKTtcbiAgICBpZiAocHYgPj0gOCkge1xuICAgICAgLy8gZ2V0IHRoZSBidW5kbGUgZGlyZWN0b3J5XG4gICAgICBkaXJzLnB1c2goYXdhaXQgdGhpcy5nZXRBcHBEaXIoJ2NvbS5hcHBsZS5tb2JpbGVzYWZhcmknLCAnQnVuZGxlJykpO1xuICAgIH1cblxuICAgIGxldCBkZWxldGVQcm9taXNlcyA9IFtdO1xuICAgIGZvciAobGV0IGRpciBvZiBfLmNvbXBhY3QoZGlycykpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgRGVsZXRpbmcgZGlyZWN0b3J5OiAnJHtkaXJ9J2ApO1xuICAgICAgZGVsZXRlUHJvbWlzZXMucHVzaChmcy5yaW1yYWYoZGlyKSk7XG4gICAgfVxuICAgIGF3YWl0IEIuYWxsKGRlbGV0ZVByb21pc2VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCB0aGUgZGlyZWN0b3JpZXMgZm9yIG1vYmlsZSBTYWZhcmkuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0ga2VlcFByZWZzIC0gV2hldGhlciB0byBrZWVwIFNhZmFyaSBwcmVmZXJlbmNlcyBmcm9tIGJlaW5nIGRlbGV0ZWQuXG4gICAqL1xuICBhc3luYyBjbGVhblNhZmFyaSAoa2VlcFByZWZzID0gdHJ1ZSkge1xuICAgIGxvZy5kZWJ1ZygnQ2xlYW5pbmcgbW9iaWxlIHNhZmFyaSBkYXRhIGZpbGVzJyk7XG4gICAgaWYgKGF3YWl0IHRoaXMuaXNGcmVzaCgpKSB7XG4gICAgICBsb2cuaW5mbygnQ291bGQgbm90IGZpbmQgU2FmYXJpIHN1cHBvcnQgZGlyZWN0b3JpZXMgdG8gY2xlYW4gb3V0IG9sZCAnICtcbiAgICAgICAgICAgICAgICdkYXRhLiBQcm9iYWJseSB0aGVyZSBpcyBub3RoaW5nIHRvIGNsZWFuIG91dCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsaWJyYXJ5RGlyID0gcGF0aC5yZXNvbHZlKHRoaXMuZ2V0RGlyKCksICdMaWJyYXJ5Jyk7XG4gICAgbGV0IHNhZmFyaVJvb3QgPSBhd2FpdCB0aGlzLmdldEFwcERpcignY29tLmFwcGxlLm1vYmlsZXNhZmFyaScpO1xuICAgIGlmICghc2FmYXJpUm9vdCkge1xuICAgICAgbG9nLmluZm8oJ0NvdWxkIG5vdCBmaW5kIFNhZmFyaSBzdXBwb3J0IGRpcmVjdG9yaWVzIHRvIGNsZWFuIG91dCBvbGQgJyArXG4gICAgICAgICAgICAgICAnZGF0YS4gUHJvYmFibHkgdGhlcmUgaXMgbm90aGluZyB0byBjbGVhbiBvdXQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNhZmFyaUxpYnJhcnlEaXIgPSBwYXRoLnJlc29sdmUoc2FmYXJpUm9vdCwgJ0xpYnJhcnknKTtcbiAgICBsZXQgZmlsZXNUb0RlbGV0ZSA9IFtcbiAgICAgICdDYWNoZXMvU25hcHNob3RzL2NvbS5hcHBsZS5tb2JpbGVzYWZhcmknLFxuICAgICAgJ0NhY2hlcy9jb20uYXBwbGUubW9iaWxlc2FmYXJpLyonLFxuICAgICAgJ0NhY2hlcy9jb20uYXBwbGUuV2ViQXBwQ2FjaGUvKicsXG4gICAgICAnQ2FjaGVzL2NvbS5hcHBsZS5XZWJLaXQuTmV0d29ya2luZy8qJyxcbiAgICAgICdDYWNoZXMvY29tLmFwcGxlLldlYktpdC5XZWJDb250ZW50LyonLFxuICAgICAgJ0ltYWdlIENhY2hlLyonLFxuICAgICAgJ1dlYktpdC9jb20uYXBwbGUubW9iaWxlc2FmYXJpLyonLFxuICAgICAgJ1dlYktpdC9HZW9sb2NhdGlvblNpdGVzLnBsaXN0JyxcbiAgICAgICdXZWJLaXQvTG9jYWxTdG9yYWdlLyouKicsXG4gICAgICAnU2FmYXJpLyonLFxuICAgICAgJ0Nvb2tpZXMvKi5iaW5hcnljb29raWVzJyxcbiAgICAgICdDYWNoZXMvY29tLmFwcGxlLlVJU3RhdHVzQmFyLyonLFxuICAgICAgJ0NhY2hlcy9jb20uYXBwbGUua2V5Ym9hcmRzL2ltYWdlcy8qJyxcbiAgICAgICdDYWNoZXMvY29tLmFwcGxlLlNhZmFyaS5TYWZlQnJvd3NpbmcvKicsXG4gICAgICAnLi4vdG1wL2NvbS5hcHBsZS5tb2JpbGVzYWZhcmkvKidcbiAgICBdO1xuICAgIGxldCBkZWxldGVQcm9taXNlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlc1RvRGVsZXRlKSB7XG4gICAgICBkZWxldGVQcm9taXNlcy5wdXNoKGZzLnJpbXJhZihwYXRoLnJlc29sdmUobGlicmFyeURpciwgZmlsZSkpKTtcbiAgICAgIGRlbGV0ZVByb21pc2VzLnB1c2goZnMucmltcmFmKHBhdGgucmVzb2x2ZShzYWZhcmlMaWJyYXJ5RGlyLCBmaWxlKSkpO1xuICAgIH1cblxuICAgIGlmICgha2VlcFByZWZzKSB7XG4gICAgICBkZWxldGVQcm9taXNlcy5wdXNoKGZzLnJpbXJhZihwYXRoLnJlc29sdmUoc2FmYXJpTGlicmFyeURpciwgJ1ByZWZlcmVuY2VzLyoucGxpc3QnKSkpO1xuICAgIH1cblxuICAgIGF3YWl0IEIuYWxsKGRlbGV0ZVByb21pc2VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmluc3RhbGwgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIGZyb20gdGhlIGN1cnJlbnQgU2ltdWxhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBUaGUgYnVpbmRsZSBJRCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgcmVtb3ZlZC5cbiAgICovXG4gIGFzeW5jIHJlbW92ZUFwcCAoYnVuZGxlSWQpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5yZW1vdmVBcHAoYnVuZGxlSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgYSBidWlsdC1pbiBhcHBsaWNhdGlvbiB0byBhIG5ldyBwbGFjZSAoYWN0dWFsbHksIHJlbmFtZSBpdCkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFwcCB0byBiZSBtb3ZlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcFBhdGggLSBUaGUgY3VycmVudCBwYXRoIHRvIHRoZSBhcHBsaWNhdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0FwcFBhdGggLSBUaGUgbmV3IHBhdGggdG8gdGhlIGFwcGxpY2F0aW9uLlxuICAgKiAgIElmIHNvbWUgYXBwbGljYXRpb24gYWxyZWFkeSBleGlzdHMgYnkgdGhpcyBwYXRoIHRoZW4gaXQncyBnb2luZyB0byBiZSByZW1vdmVkLlxuICAgKi9cbiAgYXN5bmMgbW92ZUJ1aWx0SW5BcHAgKGFwcE5hbWUsIGFwcFBhdGgsIG5ld0FwcFBhdGgpIHtcbiAgICBhd2FpdCBzYWZlUmltUmFmKG5ld0FwcFBhdGgpO1xuICAgIGF3YWl0IGZzLmNvcHlGaWxlKGFwcFBhdGgsIG5ld0FwcFBhdGgpO1xuICAgIGxvZy5kZWJ1ZyhgQ29waWVkICcke2FwcE5hbWV9JyB0byAnJHtuZXdBcHBQYXRofSdgKTtcblxuICAgIGF3YWl0IGZzLnJpbXJhZihhcHBQYXRoKTtcbiAgICBsb2cuZGVidWcoYFRlbXBvcmFyaWx5IGRlbGV0ZWQgb3JpZ2luYWwgYXBwIGF0ICcke2FwcFBhdGh9J2ApO1xuXG4gICAgcmV0dXJuIFtuZXdBcHBQYXRoLCBhcHBQYXRoXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVuIHRoZSBnaXZlbiBVUkwgaW4gbW9iaWxlIFNhZmFyaSBicm93c2VyLlxuICAgKiBUaGUgYnJvd3NlciB3aWxsIGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSBpZiBpdCBpcyBub3QgcnVubmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgdG8gYmUgb3BlbmVkLlxuICAgKi9cbiAgYXN5bmMgb3BlblVybCAodXJsKSB7XG4gICAgY29uc3QgU0FGQVJJX0JPT1RFRF9JTkRJQ0FUT1IgPSAnTW9iaWxlU2FmYXJpWyc7XG4gICAgY29uc3QgU0FGQVJJX1NUQVJUVVBfVElNRU9VVCA9IDE1ICogMTAwMDtcbiAgICBjb25zdCBFWFRSQV9TVEFSVFVQX1RJTUUgPSAzICogMTAwMDtcblxuICAgIGlmIChhd2FpdCB0aGlzLmlzUnVubmluZygpKSB7XG4gICAgICBhd2FpdCByZXRyeSg1MDAwLCB0aGlzLnNpbWN0bC5vcGVuVXJsLmJpbmQodGhpcy5zaW1jdGwpLCB1cmwpO1xuICAgICAgYXdhaXQgdGhpcy50YWlsTG9nc1VudGlsKFNBRkFSSV9CT09URURfSU5ESUNBVE9SLCBTQUZBUklfU1RBUlRVUF9USU1FT1VUKTtcbiAgICAgIC8vIFNvIHNvcnJ5LCBidXQgdGhlIGxvZ3MgaGF2ZSBub3RoaW5nIGVsc2UgZm9yIFNhZmFyaSBzdGFydGluZy4uIGp1c3QgZGVsYXkgYSBsaXR0bGUgYml0XG4gICAgICBsb2cuZGVidWcoYFNhZmFyaSBzdGFydGVkLCB3YWl0aW5nICR7RVhUUkFfU1RBUlRVUF9USU1FfW1zIGZvciBpdCB0byBmdWxseSBzdGFydGApO1xuICAgICAgYXdhaXQgQi5kZWxheShFWFRSQV9TVEFSVFVQX1RJTUUpO1xuICAgICAgbG9nLmRlYnVnKCdEb25lIHdhaXRpbmcgZm9yIFNhZmFyaScpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyaWVkIHRvIG9wZW4gYSB1cmwsIGJ1dCB0aGUgU2ltdWxhdG9yIGlzIG5vdCBCb290ZWQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBTaW11bGF0b3IgY2FjaGVzIGNsZWFudXAuXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uc3RyaW5nfSBmb2xkZXJOYW1lcyAtIFRoZSBuYW1lcyBvZiBDYWNoZXMgc3ViZm9sZGVycyB0byBiZSBjbGVhbmVkLlxuICAgKiAgIE5vbi1hY2Nlc3NpYmxlL25vbi1leGlzdGluZyBzdWJmb2xkZXJzIHdpbGwgYmUgc2tpcHBlZC5cbiAgICogICBBbGwgZXhpc3Rpbmcgc3ViZm9sZGVycyB1bmRlciBDYWNoZXMgd2lsbCBiZSBkZWxldGVkIGlmIHRoaXMgcGFyYW1ldGVyIGlzIG9taXR0ZWQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjb3VudCBvZiBjbGVhbmVkIGNhY2hlIGl0ZW1zLlxuICAgKiAgIFplcm8gaXMgcmV0dXJuZWQgaWYgbm8gaXRlbXMgd2VyZSBtYXRjaGVkIGZvciBjbGVhbnVwIChlaXRoZXIgbm90IGFjY2Vzc2libGUgb3Igbm90IGRpcmVjdG9yaWVzKS5cbiAgICovXG4gIGFzeW5jIGNsZWFyQ2FjaGVzICguLi5mb2xkZXJOYW1lcykge1xuICAgIGNvbnN0IGNhY2hlc1Jvb3QgPSBwYXRoLnJlc29sdmUodGhpcy5nZXREaXIoKSwgJ0xpYnJhcnknLCAnQ2FjaGVzJyk7XG4gICAgaWYgKCEoYXdhaXQgZnMuaGFzQWNjZXNzKGNhY2hlc1Jvb3QpKSkge1xuICAgICAgbG9nLmRlYnVnKGBDYWNoZXMgcm9vdCBhdCAnJHtjYWNoZXNSb290fScgZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IGFjY2Vzc2libGUuIE5vdGhpbmcgdG8gZG8gdGhlcmVgKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBpdGVtc1RvUmVtb3ZlID0gZm9sZGVyTmFtZXMubGVuZ3RoID8gZm9sZGVyTmFtZXMgOiAoYXdhaXQgZnMucmVhZGRpcihjYWNoZXNSb290KSk7XG4gICAgaXRlbXNUb1JlbW92ZSA9IGl0ZW1zVG9SZW1vdmUubWFwKCh4KSA9PiBwYXRoLnJlc29sdmUoY2FjaGVzUm9vdCwgeCkpO1xuICAgIGlmIChmb2xkZXJOYW1lcy5sZW5ndGgpIHtcbiAgICAgIGl0ZW1zVG9SZW1vdmUgPSBhd2FpdCBCLmZpbHRlcihpdGVtc1RvUmVtb3ZlLCAoeCkgPT4gZnMuaGFzQWNjZXNzKHgpKTtcbiAgICB9XG4gICAgaXRlbXNUb1JlbW92ZSA9IGF3YWl0IEIuZmlsdGVyKGl0ZW1zVG9SZW1vdmUsIGFzeW5jICh4KSA9PiAoYXdhaXQgZnMuc3RhdCh4KSkuaXNEaXJlY3RvcnkoKSk7XG4gICAgaWYgKCFpdGVtc1RvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgbG9nLmRlYnVnKGBObyBTaW11bGF0b3IgY2FjaGUgaXRlbXMgZm9yIGNsZWFudXAgd2VyZSBtYXRjaGVkIGluICcke2NhY2hlc1Jvb3R9J2ApO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbG9nLmRlYnVnKGBNYXRjaGVkICR7dXRpbC5wbHVyYWxpemUoJ3NpbXVsYXRvciBjYWNoZSBpdGVtJywgaXRlbXNUb1JlbW92ZS5sZW5ndGgsIHRydWUpfSBgICtcbiAgICAgIGBmb3IgY2xlYW51cDogJHtpdGVtc1RvUmVtb3ZlfWApO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBCLmFsbChpdGVtc1RvUmVtb3ZlLCAoeCkgPT4gZnMucmltcmFmKHgpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cud2FybihgR290IGFuIGV4Y2VwdGlvbiB3aGlsZSBjbGVhbmluZyBTaW11bGF0b3IgY2FjaGVzOiAke2UubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zVG9SZW1vdmUubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEJsb2NrcyB1bnRpbCB0aGUgZ2l2ZW4gaW5kaWNhdGVyIHN0cmluZyBhcHBlYXJzIGluIFNpbXVsYXRvciBsb2dzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYm9vdGVkSW5kaWNhdG9yIC0gVGhlIG1hZ2ljIHN0cmluZywgd2hpY2ggYXBwZWFycyBpbiBsb2dzIGFmdGVyIFNpbXVsYXRvciBib290aW5nIGlzIGNvbXBsZXRlZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyAtIFRoZSBtYXhpbXVtbSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIHRoZSBzdHJpbmcgaW5kaWNhdG9yIHByZXNlbmNlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgaW9zIHNpbXVsYXRvciBsb2dzIG91dHB1dCBhIGxpbmUgbWF0Y2hpbmcgYGJvb3RlZEluZGljYXRvcmBcbiAgICogdGltZXMgb3V0IGFmdGVyIHRpbWVvdXRNc1xuICAgKi9cbiAgYXN5bmMgdGFpbExvZ3NVbnRpbCAoYm9vdGVkSW5kaWNhdG9yLCB0aW1lb3V0TXMpIHtcbiAgICBsZXQgc2ltTG9nID0gcGF0aC5yZXNvbHZlKHRoaXMuZ2V0TG9nRGlyKCksICdzeXN0ZW0ubG9nJyk7XG5cbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBsb2cgZmlsZSBleGlzdHMgYmVmb3JlIHdlIGNhbiB0YWlsIGl0XG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgyMDAsIDIwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGV4aXN0cyA9IGF3YWl0IGZzLmV4aXN0cyhzaW1Mb2cpO1xuICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBTaW11bGF0b3IgbG9nOiAnJHtzaW1Mb2d9J2ApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbG9nLmluZm8oYFNpbXVsYXRvciBsb2cgYXQgJyR7c2ltTG9nfSdgKTtcbiAgICBsb2cuaW5mbyhgVGFpbGluZyBzaW11bGF0b3IgbG9ncyB1bnRpbCB3ZSBlbmNvdW50ZXIgdGhlIHN0cmluZyBcIiR7Ym9vdGVkSW5kaWNhdG9yfVwiYCk7XG4gICAgbG9nLmluZm8oYFdlIHdpbGwgdGltZSBvdXQgYWZ0ZXIgJHt0aW1lb3V0TXN9bXNgKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGFpbFVudGlsKHNpbUxvZywgYm9vdGVkSW5kaWNhdG9yLCB0aW1lb3V0TXMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmRlYnVnKCdTaW11bGF0b3Igc3RhcnR1cCB0aW1lZCBvdXQuIENvbnRpbnVpbmcgYW55d2F5LicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgQ2FsZW5kYXIgYWNjZXNzIGZvciB0aGUgZ2l2ZW4gYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJRCAtIEJ1bmRsZSBJRCBvZiB0aGUgYXBwbGljYXRpb24sIGZvciB3aGljaCB0aGUgYWNjZXNzIHNob3VsZCBiZSBncmFudGVkLlxuICAgKi9cbiAgYXN5bmMgZW5hYmxlQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgYXdhaXQgdGhpcy5jYWxlbmRhci5lbmFibGVDYWxlbmRhckFjY2VzcyhidW5kbGVJRCk7XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZSBDYWxlbmRhciBhY2Nlc3MgZm9yIHRoZSBnaXZlbiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlEIC0gQnVuZGxlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiwgZm9yIHdoaWNoIHRoZSBhY2Nlc3Mgc2hvdWxkIGJlIGRlbmllZC5cbiAgICovXG4gIGFzeW5jIGRpc2FibGVDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBhd2FpdCB0aGlzLmNhbGVuZGFyLmRpc2FibGVDYWxlbmRhckFjY2VzcyhidW5kbGVJRCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaGFzIGFjY2VzcyB0byBDYWxlbmRhci5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaGFzIHRoZSBhY2Nlc3MuXG4gICAqL1xuICBhc3luYyBoYXNDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jYWxlbmRhci5oYXNDYWxlbmRhckFjY2VzcyhidW5kbGVJRCk7XG4gIH1cblxuICAvKipcbiAgICogQWN0aXZhdGVzIFNpbXVsYXRvciB3aW5kb3cuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHs/c3RyaW5nfSBJZiB0aGUgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcgdGhlbiBpdCBzaG91bGQgYmUgYSB2YWxpZCBBcHBsZSBTY3JpcHQgd2hpY2hcbiAgICogaXMgYXBwZW5kZWQgYmVmb3JlIGVhY2ggVUkgY2xpZW50IGNvbW1hbmQgaXMgZXhlY3V0ZWQuIE90aGVyd2lzZSB0aGUgbWV0aG9kIHNob3VsZCBhY3RpdmF0ZSB0aGUgd2luZG93XG4gICAqIGl0c2VsZiBhbmQgcmV0dXJuIG5vdGhpbmcuXG4gICAqL1xuICBhc3luYyBfYWN0aXZhdGVXaW5kb3cgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICBjb25zdCBwaWQgPSBhd2FpdCB0aGlzLmdldFVJQ2xpZW50UGlkKCk7XG4gICAgaWYgKHBpZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGFjdGl2YXRlQXBwKHBpZCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhlLnN0ZGVyciB8fCBlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYFxuICAgICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgICB0ZWxsIHByb2Nlc3MgXCJTaW11bGF0b3JcIlxuICAgICAgICAgIHNldCBmcm9udG1vc3QgdG8gZmFsc2VcbiAgICAgICAgICBzZXQgZnJvbnRtb3N0IHRvIHRydWVcbiAgICAgICAgZW5kIHRlbGxcbiAgICAgIGVuZCB0ZWxsXG4gICAgYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGdpdmVuIEFwcGxlIFNjcmlwdCBpbnNpZGUgYSBjcml0aWNhbCBzZWN0aW9uLCBzbyBvdGhlclxuICAgKiBzZXNzaW9ucyBjYW5ub3QgaW5mbHVlbmNlIHRoZSBVSSBjbGllbnQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwcGxlU2NyaXB0IC0gVGhlIHZhbGlkIEFwcGxlIFNjcmlwdCBzbmlwcGV0IHRvIGJlIGV4ZWN1dGVkLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdGRvdXQgb3V0cHV0IHByb2R1Y2VkIGJ5IHRoZSBzY3JpcHQuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBvc2FzY3JpcHQgdG9vbCByZXR1cm5zIG5vbi16ZXJvIGV4aXQgY29kZS5cbiAgICovXG4gIGFzeW5jIGV4ZWN1dGVVSUNsaWVudFNjcmlwdCAoYXBwbGVTY3JpcHQpIHtcbiAgICBjb25zdCB3aW5kb3dBY3RpdmF0aW9uU2NyaXB0ID0gYXdhaXQgdGhpcy5fYWN0aXZhdGVXaW5kb3coKTtcbiAgICBjb25zdCByZXN1bHRTY3JpcHQgPSBgJHt3aW5kb3dBY3RpdmF0aW9uU2NyaXB0ID8gd2luZG93QWN0aXZhdGlvblNjcmlwdCArICdcXG4nIDogJyd9JHthcHBsZVNjcmlwdH1gO1xuICAgIGxvZy5kZWJ1ZyhgRXhlY3V0aW5nIFVJIEFwcGxlIFNjcmlwdCBvbiBTaW11bGF0b3Igd2l0aCBVRElEICR7dGhpcy51ZGlkfTogJHtyZXN1bHRTY3JpcHR9YCk7XG4gICAgcmV0dXJuIGF3YWl0IFVJX0NMSUVOVF9BQ0NFU1NfR1VBUkQuYWNxdWlyZSh0aGlzLnNpbXVsYXRvckFwcCwgYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKCdvc2FzY3JpcHQnLCBbJy1lJywgcmVzdWx0U2NyaXB0XSk7XG4gICAgICAgIHJldHVybiBzdGRvdXQ7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBjb21wbGV0ZSBvcGVyYXRpb24uIE1ha2Ugc3VyZSBTaW11bGF0b3IgVUkgaXMgcnVubmluZyBhbmQgdGhlIHBhcmVudCBBcHBpdW0gYXBwbGljYXRpb24gKGUuIGcuIEFwcGl1bS5hcHAgb3IgVGVybWluYWwuYXBwKSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYGlzIHByZXNlbnQgaW4gU3lzdGVtIFByZWZlcmVuY2VzID4gU2VjdXJpdHkgJiBQcml2YWN5ID4gUHJpdmFjeSA+IEFjY2Vzc2liaWxpdHkgbGlzdC4gSWYgdGhlIG9wZXJhdGlvbiBpcyBzdGlsbCB1bnN1Y2Nlc3NmdWwgdGhlbiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBTaW11bGF0b3IuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHN0YXRlIG9mIEJpb21ldHJpYyBFbnJvbGxtZW50IGZlYXR1cmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBFaXRoZXIgdHJ1ZSBvciBmYWxzZVxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgRW5yb2xsbWVudCBzdGF0ZSBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICAgKi9cbiAgYXN5bmMgaXNCaW9tZXRyaWNFbnJvbGxlZCAoKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjdXRlVUlDbGllbnRTY3JpcHQoYFxuICAgICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgICB0ZWxsIHByb2Nlc3MgXCJTaW11bGF0b3JcIlxuICAgICAgICAgIHNldCBkc3RNZW51SXRlbSB0byBtZW51IGl0ZW0gXCJUb3VjaCBJRCBFbnJvbGxlZFwiIG9mIG1lbnUgMSBvZiBtZW51IGJhciBpdGVtIFwiSGFyZHdhcmVcIiBvZiBtZW51IGJhciAxXG4gICAgICAgICAgc2V0IGlzQ2hlY2tlZCB0byAodmFsdWUgb2YgYXR0cmlidXRlIFwiQVhNZW51SXRlbU1hcmtDaGFyXCIgb2YgZHN0TWVudUl0ZW0pIGlzIFwi4pyTXCJcbiAgICAgICAgZW5kIHRlbGxcbiAgICAgIGVuZCB0ZWxsXG4gICAgYCk7XG4gICAgbG9nLmRlYnVnKGBUb3VjaCBJRCBlbnJvbGxlZCBzdGF0ZTogJHtvdXRwdXR9YCk7XG4gICAgcmV0dXJuIF8uaXNTdHJpbmcob3V0cHV0KSAmJiBvdXRwdXQudHJpbSgpID09PSAndHJ1ZSc7XG4gIH1cblxuICAvKipcbiAgICogRW5yb2xscyBiaW9tZXRyaWMgKFRvdWNoSWQsIEZhY2VJZCkgZmVhdHVyZSB0ZXN0aW5nIGluIFNpbXVsYXRvciBVSSBjbGllbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFbmFibGVkIC0gRGVmaW5lcyB3aGV0aGVyIGJpb21ldHJpYyBzdGF0ZSBpcyBlbmFibGVkL2Rpc2FibGVkXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZW5yb2xsZWQgc3RhdGUgY2Fubm90IGJlIGNoYW5nZWRcbiAgICovXG4gIGFzeW5jIGVucm9sbEJpb21ldHJpYyAoaXNFbmFibGVkID0gdHJ1ZSkge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVVJQ2xpZW50U2NyaXB0KGBcbiAgICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgICAgdGVsbCBwcm9jZXNzIFwiU2ltdWxhdG9yXCJcbiAgICAgICAgICBzZXQgZHN0TWVudUl0ZW0gdG8gbWVudSBpdGVtIFwiVG91Y2ggSUQgRW5yb2xsZWRcIiBvZiBtZW51IDEgb2YgbWVudSBiYXIgaXRlbSBcIkhhcmR3YXJlXCIgb2YgbWVudSBiYXIgMVxuICAgICAgICAgIHNldCBpc0NoZWNrZWQgdG8gKHZhbHVlIG9mIGF0dHJpYnV0ZSBcIkFYTWVudUl0ZW1NYXJrQ2hhclwiIG9mIGRzdE1lbnVJdGVtKSBpcyBcIuKck1wiXG4gICAgICAgICAgaWYgJHtpc0VuYWJsZWQgPyAnbm90ICcgOiAnJ31pc0NoZWNrZWQgdGhlblxuICAgICAgICAgICAgY2xpY2sgZHN0TWVudUl0ZW1cbiAgICAgICAgICBlbmQgaWZcbiAgICAgICAgZW5kIHRlbGxcbiAgICAgIGVuZCB0ZWxsXG4gICAgYCk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBub3RpZmljYXRpb24gdG8gbWF0Y2gvbm90IG1hdGNoIHRoZSB0b3VjaCBpZC5cbiAgICpcbiAgICogQHBhcmFtIHs/Ym9vbGVhbn0gc2hvdWxkTWF0Y2ggW3RydWVdIC0gU2V0IGl0IHRvIHRydWUgb3IgZmFsc2UgaW4gb3JkZXIgdG8gZW11bGF0ZVxuICAgKiBtYXRjaGluZy9ub3QgbWF0Y2hpbmcgdGhlIGNvcnJlc3BvbmRpbmcgYmlvbWV0cmljXG4gICAqL1xuICBhc3luYyBzZW5kQmlvbWV0cmljTWF0Y2ggKHNob3VsZE1hdGNoID0gdHJ1ZSkge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVVJQ2xpZW50U2NyaXB0KGBcbiAgICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgICAgdGVsbCBwcm9jZXNzIFwiU2ltdWxhdG9yXCJcbiAgICAgICAgICBzZXQgZHN0TWVudUl0ZW0gdG8gbWVudSBpdGVtIFwiJHtzaG91bGRNYXRjaCA/ICdNYXRjaGluZycgOiAnTm9uLW1hdGNoaW5nJ31cIiBvZiBtZW51IDEgb2YgbWVudSBpdGVtIFwiU2ltdWxhdGUgRmluZ2VyIFRvdWNoXCIgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJIYXJkd2FyZVwiIG9mIG1lbnUgYmFyIDFcbiAgICAgICAgICBjbGljayBkc3RNZW51SXRlbVxuICAgICAgICBlbmQgdGVsbFxuICAgICAgZW5kIHRlbGxcbiAgICBgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgc3BlY2lhbCBBcHBsZSBzY3JpcHQsIHdoaWNoIGNsaWNrcyB0aGUgcGFydGljdWxhciBidXR0b24gb24gRGF0YWJhc2UgYWxlcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jcmVhc2UgLSBDbGljayB0aGUgYnV0dG9uIHdpdGggJ0luY3JlYXNlJyB0aXRsZSBvbiB0aGUgYWxlcnQgaWYgdGhpc1xuICAgKiAgIHBhcmFtZXRlciBpcyB0cnVlLiBUaGUgJ0NhbmNlbCcgYnV0dG9uIHdpbGwgYmUgY2xpY2tlZCBvdGhlcndpc2UuXG4gICAqL1xuICBhc3luYyBkaXNtaXNzRGF0YWJhc2VBbGVydCAoaW5jcmVhc2UgPSB0cnVlKSB7XG4gICAgbGV0IGJ1dHRvbiA9IGluY3JlYXNlID8gJ0luY3JlYXNlJyA6ICdDYW5jZWwnO1xuICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBkaXNtaXNzIGRhdGFiYXNlIGFsZXJ0IHdpdGggJyR7YnV0dG9ufScgYnV0dG9uYCk7XG4gICAgYXdhaXQgdGhpcy5leGVjdXRlVUlDbGllbnRTY3JpcHQoYFxuICAgICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgICB0ZWxsIHByb2Nlc3MgXCJTaW11bGF0b3JcIlxuICAgICAgICAgIGNsaWNrIGJ1dHRvbiBcIiR7YnV0dG9ufVwiIG9mIHdpbmRvdyAxXG4gICAgICAgIGVuZCB0ZWxsXG4gICAgICBlbmQgdGVsbFxuICAgIGApO1xuICB9XG5cbiAgLy9yZWdpb24gS2V5Y2hhaW5zIEludGVyYWN0aW9uXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGJhY2t1cCBvZiBrZXljaGFpbnMgZm9sZGVyLlxuICAgKiBUaGUgcHJldmlvdXNseSBjcmVhdGVkIGJhY2t1cCB3aWxsIGJlIGF1dG9tYXRpY2FsbHlcbiAgICogZGVsZXRlZCBpZiB0aGlzIG1ldGhvZCB3YXMgY2FsbGVkIHR3aWNlIGluIGEgcm93IHdpdGhvdXRcbiAgICogYHJlc3RvcmVLZXljaGFpbnNgIGJlaW5nIGludm9rZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBiYWNrdXAgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsbC5cbiAgICovXG4gIGFzeW5jIGJhY2t1cEtleWNoYWlucyAoKSB7XG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHModGhpcy5rZXljaGFpblBhdGgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgYmFja3VwUGF0aCA9IGF3YWl0IHRlbXBEaXIucGF0aCh7XG4gICAgICBwcmVmaXg6IGBrZXljaGFpbnNfYmFja3VwXyR7TWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKX1gLFxuICAgICAgc3VmZml4OiAnLnppcCcsXG4gICAgfSk7XG4gICAgY29uc3QgemlwQXJncyA9IFtcbiAgICAgICctcicsIGJhY2t1cFBhdGgsXG4gICAgICBgJHt0aGlzLmtleWNoYWluUGF0aH0ke3BhdGguc2VwfWBcbiAgICBdO1xuICAgIGxvZy5kZWJ1ZyhgQ3JlYXRpbmcga2V5Y2hhaW5zIGJhY2t1cCB3aXRoICd6aXAgJHt6aXBBcmdzLmpvaW4oJyAnKX0nIGNvbW1hbmRgKTtcbiAgICBhd2FpdCBleGVjKCd6aXAnLCB6aXBBcmdzKTtcbiAgICBpZiAoXy5pc1N0cmluZyh0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoKSAmJiBhd2FpdCBmcy5leGlzdHModGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCkpIHtcbiAgICAgIGF3YWl0IGZzLnVubGluayh0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoKTtcbiAgICB9XG4gICAgdGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCA9IGJhY2t1cFBhdGg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUmVzdG9yZSB0aGUgcHJldmlzb3VseSBjcmVhdGVkIGtleWNoYWlucyBiYWNrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P3N0cmluZ3xBcnJheTxzdHJpbmc+fSBleGNsdWRlUGF0dGVybnMgLSBUaGUgbGlzdFxuICAgKiBvZiBmaWxlIG5hbWUgcGF0dGVybnMgdG8gYmUgZXhjbHVkZWQgZnJvbSByZXN0b3JlLiBUaGUgZm9ybWF0XG4gICAqIG9mIGVhY2ggaXRlbSBzaG91bGQgYmUgdGhlIHNhbWUgYXMgJy14JyBvcHRpb24gZm9ybWF0IGZvclxuICAgKiAndW56aXAnIHV0aWxpdHkuIFRoaXMgY2FuIGFsc28gYmUgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nLFxuICAgKiB3aGljaCBpcyBnb2luZyBiZSB0cmFuc2Zvcm1lZCBpbnRvIGEgbGlzdCBhdXRvbWF0aWNhbGx5LFxuICAgKiBmb3IgZXhhbXBsZTogJyouZGIqLGJsYWJsYS5zcWxpdGUnXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBJZiB0aGUgcmVzdG9yZSBvcHJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC5cbiAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIG5vIGtleWNoYWlucyBiYWNrdXAgYXZhaWxhYmxlIGZvciByZXN0b3JlLlxuICAgKi9cbiAgYXN5bmMgcmVzdG9yZUtleWNoYWlucyAoZXhjbHVkZVBhdHRlcm5zID0gW10pIHtcbiAgICBpZiAoIV8uaXNTdHJpbmcodGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCkgfHwgIWF3YWl0IGZzLmV4aXN0cyh0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUga2V5Y2hhaW5zIGJhY2t1cCBhcmNoaXZlIGRvZXMgbm90IGV4aXN0LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgQXJlIHlvdSBzdXJlIGl0IHdhcyBjcmVhdGVkIGJlZm9yZT9gKTtcbiAgICB9XG5cbiAgICBpZiAoXy5pc1N0cmluZyhleGNsdWRlUGF0dGVybnMpKSB7XG4gICAgICBleGNsdWRlUGF0dGVybnMgPSBleGNsdWRlUGF0dGVybnMuc3BsaXQoJywnKS5tYXAoKHgpID0+IHgudHJpbSgpKTtcbiAgICB9XG4gICAgY29uc3Qge3N0YXRlfSA9IGF3YWl0IHRoaXMuc3RhdCgpO1xuICAgIGNvbnN0IGlzU2VydmVyUnVubmluZyA9IHN0YXRlID09PSAnQm9vdGVkJztcbiAgICBsZXQgcGxpc3RQYXRoO1xuICAgIGlmIChpc1NlcnZlclJ1bm5pbmcpIHtcbiAgICAgIHBsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZShhd2FpdCB0aGlzLmdldExhdW5jaERhZW1vbnNSb290KCksICdjb20uYXBwbGUuc2VjdXJpdHlkLnBsaXN0Jyk7XG4gICAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhwbGlzdFBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNsZWFyIGtleWNoYWlucyBiZWNhdXNlICcke3BsaXN0UGF0aH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLnNpbWN0bC5zcGF3blByb2Nlc3MoWydsYXVuY2hjdGwnLCAndW5sb2FkJywgcGxpc3RQYXRoXSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcy5yaW1yYWYodGhpcy5rZXljaGFpblBhdGgpO1xuICAgICAgYXdhaXQgbWtkaXJwKHRoaXMua2V5Y2hhaW5QYXRoKTtcbiAgICAgIGNvbnN0IHVuemlwQXJncyA9IFtcbiAgICAgICAgJy1vJywgdGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCxcbiAgICAgICAgLi4uKF8uZmxhdE1hcChleGNsdWRlUGF0dGVybnMubWFwKCh4KSA9PiBbJy14JywgeF0pKSksXG4gICAgICAgICctZCcsICcvJ1xuICAgICAgXTtcbiAgICAgIGxvZy5kZWJ1ZyhgUmVzdG9yaW5nIGtleWNoYWlucyB3aXRoICd1bnppcCAke3VuemlwQXJncy5qb2luKCcgJyl9JyBjb21tYW5kYCk7XG4gICAgICBhd2FpdCBleGVjKCd1bnppcCcsIHVuemlwQXJncyk7XG4gICAgICBhd2FpdCBmcy51bmxpbmsodGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCk7XG4gICAgICB0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoID0gbnVsbDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKGlzU2VydmVyUnVubmluZyAmJiBwbGlzdFBhdGgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zaW1jdGwuc3Bhd25Qcm9jZXNzKFsnbGF1bmNoY3RsJywgJ2xvYWQnLCBwbGlzdFBhdGhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIEtleWNoYWlucyBmb3IgdGhlIHBhcnRpY3VsYXIgc2ltdWxhdG9yIGluIHJ1bnRpbWUgKHRoZXJlIGlzIG5vIG5lZWQgdG8gc3RvcCBpdCkuXG4gICAqXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBrZXljaGFpbiBjbGVhbnVwIGhhcyBmYWlsZWQuXG4gICAqL1xuICBhc3luYyBjbGVhcktleWNoYWlucyAoKSB7XG4gICAgY29uc3QgcGxpc3RQYXRoID0gcGF0aC5yZXNvbHZlKGF3YWl0IHRoaXMuZ2V0TGF1bmNoRGFlbW9uc1Jvb3QoKSwgJ2NvbS5hcHBsZS5zZWN1cml0eWQucGxpc3QnKTtcbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhwbGlzdFBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjbGVhciBrZXljaGFpbnMgYmVjYXVzZSAnJHtwbGlzdFBhdGh9JyBkb2VzIG5vdCBleGlzdGApO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5zcGF3blByb2Nlc3MoWydsYXVuY2hjdGwnLCAndW5sb2FkJywgcGxpc3RQYXRoXSk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChhd2FpdCBmcy5leGlzdHModGhpcy5rZXljaGFpblBhdGgpKSB7XG4gICAgICAgIGF3YWl0IGZzLnJpbXJhZih0aGlzLmtleWNoYWluUGF0aCk7XG4gICAgICAgIGF3YWl0IG1rZGlycCh0aGlzLmtleWNoYWluUGF0aCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbJ2xhdW5jaGN0bCcsICdsb2FkJywgcGxpc3RQYXRoXSk7XG4gICAgfVxuICB9XG5cbiAgLy9lbmRyZWdpb25cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUHJvY2Vzc0luZm9cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHBpZCBUaGUgYWN0dWFsIHByb2Nlc3MgaWRlbnRpZmllci5cbiAgICogQ291bGQgYmUgemVybyBpZiB0aGUgcHJvY2VzcyBpcyB0aGUgc3lzdGVtIG9uZS5cbiAgICogQHByb3BlcnR5IHs/c3RyaW5nfSBncm91cCBUaGUgcHJvY2VzcyBncm91cCBpZGVudGlmaWVyLlxuICAgKiBUaGlzIGNvdWxkIGJlIGBudWxsYCBpZiB0aGUgcHJvY2VzcyBpcyBub3QgYSBwYXJ0IG9mIHRoZVxuICAgKiBwYXJ0aWN1bGFyIGdyb3VwLiBGb3IgYG5vcm1hbGAgYXBwbGljYXRpb24gcHJvY2Vzc2VzIHRoZSBncm91cFxuICAgKiBuYW1lIHVzdWFsbHkgZXF1YWxzIHRvIGBVSUtpdEFwcGxpY2F0aW9uYC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgVGhlIHByb2Nlc3MgbmFtZSwgZm9yIGV4YW1wbGVcbiAgICogYGNvbS5hcHBsZS5QcmVmZXJlbmNlc2BcbiAgICovXG5cbiAgLyoqXG4gICAqIExpc3RzIHByb2Nlc3NlcyB0aGF0IGFyZSBjdXJyZW50bHkgcnVubmluZyBvbiB0aGUgZ2l2ZW4gU2ltdWxhdG9yLlxuICAgKiBUaGUgc2ltdWxhdG9yIG11c3QgYmUgaW4gcnVubmluZyBzdGF0ZSBpbiBvcmRlciBmb3IgdGhpc1xuICAgKiBtZXRob2QgdG8gd29yayBwcm9wZXJseS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXk8UHJvY2Vzc0luZm8+fSBUaGUgbGlzdCBvZiByZXRyaWV2ZWQgcHJvY2Vzc1xuICAgKiBpbmZvcm1hdGlvblxuICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgbm8gcHJvY2VzcyBpbmZvcm1hdGlvbiBjb3VsZCBiZSByZXRyaWV2ZWQuXG4gICAqL1xuICBhc3luYyBwcyAoKSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCB0aGlzLnNpbWN0bC5zcGF3blByb2Nlc3MoW1xuICAgICAgJ2xhdW5jaGN0bCcsXG4gICAgICAncHJpbnQnLFxuICAgICAgJ3N5c3RlbScsXG4gICAgXSk7XG5cbiAgICBjb25zdCBzZXJ2aWNlc01hdGNoID0gL15cXHMqc2VydmljZXNcXHMqPVxccyp7KFtefV0rKS9tLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAoIXNlcnZpY2VzTWF0Y2gpIHtcbiAgICAgIGxvZy5kZWJ1ZyhzdGRvdXQpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbGlzdCBvZiBhY3RpdmUgcHJvY2Vzc2VzIGNhbm5vdCBiZSByZXRyaWV2ZWRgKTtcbiAgICB9XG4gICAgLypcbiAgICBFeGFtcGxlIG1hdGNoOlxuICAgICAgICAwICAgICA3OCBcdGNvbS5hcHBsZS5yZXNvdXJjZWdyYWJiZXJkXG4gICAgODIxNTggICAgICAtIFx0Y29tLmFwcGxlLmFzc2lzdGFudF9zZXJ2aWNlXG4gICAgODIxMjAgICAgICAtIFx0Y29tLmFwcGxlLm5hbm9yZWdpc3RyeWRcbiAgICA4MjA4NyAgICAgIC0gXHRjb20uYXBwbGUubm90aWZ5ZFxuICAgIDgyMjY0ICAgICAgLSBcdFVJS2l0QXBwbGljYXRpb246Y29tLmFwcGxlLlByZWZlcmVuY2VzWzcwNGJdW3JiLWxlZ2FjeV1cbiAgICAqL1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHBhdHRlcm4gPSAvXlxccyooXFxkKylcXHMrW1xcZC1dK1xccysoW1xcd1xcLS5dKzopPyhbXFx3XFwtLl0rKS9nbTtcbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IHBhdHRlcm4uZXhlYyhzZXJ2aWNlc01hdGNoWzFdKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgcGlkOiBwYXJzZUludChtYXRjaFsxXSwgMTApLFxuICAgICAgICBncm91cDogXy50cmltRW5kKG1hdGNoWzJdLCAnOicpIHx8IG51bGwsXG4gICAgICAgIG5hbWU6IG1hdGNoWzNdLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcGFydGljdWxhciBwZXJtaXNzaW9uIHRvIHRoZSBhcHBsaWNhdGlvbiBidW5kbGUuIFNlZVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vd2l4L0FwcGxlU2ltdWxhdG9yVXRpbHMgZm9yIG1vcmUgZGV0YWlscyBvblxuICAgKiB0aGUgYXZhaWxhYmxlIHNlcnZpY2UgbmFtZXMgYW5kIHN0YXR1c2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBBcHBsaWNhdGlvbiBidW5kbGUgaWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBlcm1pc3Npb24gLSBTZXJ2aWNlIG5hbWUgdG8gYmUgc2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgZGVzaXJlZCBzdGF0dXMgZm9yIHRoZSBzZXJ2aWNlLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGNoYW5naW5nIHBlcm1pc3Npb24uXG4gICAqL1xuICBhc3luYyBzZXRQZXJtaXNzaW9uIChidW5kbGVJZCwgcGVybWlzc2lvbiwgdmFsdWUpIHtcbiAgICBhd2FpdCB0aGlzLnNldFBlcm1pc3Npb25zKGJ1bmRsZUlkLCB7W3Blcm1pc3Npb25dOiB2YWx1ZX0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBlcm1pc3Npb25zIGZvciB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbiBidW5kbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIEFwcGxpY2F0aW9uIGJ1bmRsZSBpZGVudGlmaWVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGVybWlzc2lvbnNNYXBwaW5nIC0gQSBtYXBwaW5nIHdoZXJlIGtheXNcbiAgICogYXJlIHNlcnZpY2UgbmFtZXMgYW5kIHZhbHVlcyBhcmUgdGhlaXIgY29ycmVzcG9uZGluZyBzdGF0dXMgdmFsdWVzLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3dpeC9BcHBsZVNpbXVsYXRvclV0aWxzXG4gICAqIGZvciBtb3JlIGRldGFpbHMgb24gYXZhaWxhYmxlIHNlcnZpY2UgbmFtZXMgYW5kIHN0YXR1c2VzLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGNoYW5naW5nIHBlcm1pc3Npb25zLlxuICAgKi9cbiAgYXN5bmMgc2V0UGVybWlzc2lvbnMgKGJ1bmRsZUlkLCBwZXJtaXNzaW9uc01hcHBpbmcpIHtcbiAgICBsb2cuZGVidWcoYFNldHRpbmcgYWNjZXNzIGZvciAnJHtidW5kbGVJZH0nOiBgICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHBlcm1pc3Npb25zTWFwcGluZywgbnVsbCwgMikpO1xuICAgIGF3YWl0IHRoaXMucGVybWlzc2lvbnMuc2V0QWNjZXNzKGJ1bmRsZUlkLCBwZXJtaXNzaW9uc01hcHBpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBjdXJyZW50IHBlcm1pc3Npb24gc3RhdHVzIGZvciB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gYnVuZGxlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBBcHBsaWNhdGlvbiBidW5kbGUgaWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIC0gT25lIG9mIGF2YWlsYWJsZSBzZXJ2aWNlIG5hbWVzLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIHJldHJpZXZpbmcgcGVybWlzc2lvbnMuXG4gICAqL1xuICBhc3luYyBnZXRQZXJtaXNzaW9uIChidW5kbGVJZCwgc2VydmljZU5hbWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBlcm1pc3Npb25zLmdldEFjY2VzcyhidW5kbGVJZCwgc2VydmljZU5hbWUpO1xuICAgIGxvZy5kZWJ1ZyhgR290ICR7c2VydmljZU5hbWV9IGFjY2VzcyBzdGF0dXMgZm9yICcke2J1bmRsZUlkfSc6ICR7cmVzdWx0fWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgaW50byB0aGUgVHJ1c3RlZCBSb290IFN0b3JlIG9uIHRoZSBzaW11bGF0b3IuXG4gICAqIFRoZSBzaW11bGF0b3IgbXVzdCBiZSBzaHV0IGRvd24gaW4gb3JkZXIgZm9yIHRoaXMgbWV0aG9kIHRvIHdvcmsgcHJvcGVybHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXlsb2FkIHRoZSBjb250ZW50IG9mIHRoZSBQRU0gY2VydGlmaWNhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgY2VydGlmaWNhdGUgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGluc3RhbGxlZFxuICAgKiBvciBgZmFsc2VgIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gdGhlcmVcbiAgICovXG4gIGFzeW5jIGFkZENlcnRpZmljYXRlIChwYXlsb2FkLCAvKiBvcHRzID0ge30gKi8pIHtcbiAgICBpZiAoYXdhaXQgaGFzU1NMQ2VydChwYXlsb2FkLCB0aGlzLnVkaWQpKSB7XG4gICAgICBsb2cuaW5mbyhgU1NMIGNlcnRpZmljYXRlICcke18udHJ1bmNhdGUocGF5bG9hZCwge2xlbmd0aDogMjB9KX0nIGFscmVhZHkgaW5zdGFsbGVkYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxvZy5pbmZvKGBJbnN0YWxsaW5nIFNTTCByb290IGNlcnRpZmljYXRlICcke18udHJ1bmNhdGUocGF5bG9hZCwge2xlbmd0aDogMjB9KX0nYCk7XG4gICAgYXdhaXQgaW5zdGFsbFNTTENlcnQocGF5bG9hZCwgdGhpcy51ZGlkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW11bGF0ZXMgcHVzaCBub3RpZmljYXRpb24gZGVsaXZlcnlcbiAgICpcbiAgICogQHNpbmNlIFhjb2RlIFNESyAxMS40XG4gICAqL1xuICBhc3luYyBwdXNoTm90aWZpY2F0aW9uICgvKiBwYXlsb2FkICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRocm93IG5ldyBFcnJvcihgWGNvZGUgU0RLICcke3RoaXMueGNvZGVWZXJzaW9ufScgaXMgdG9vIG9sZCB0byBwdXNoIG5vdGlmaWNhdGlvbnNgKTtcbiAgfVxuXG4gIGFzeW5jIGdldExhdW5jaERhZW1vbnNSb290ICgpIHtcbiAgICBjb25zdCBkZXZSb290ID0gYXdhaXQgZ2V0RGV2ZWxvcGVyUm9vdCgpO1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUoZGV2Um9vdCxcbiAgICAgICdQbGF0Zm9ybXMvaVBob25lU2ltdWxhdG9yLnBsYXRmb3JtL0RldmVsb3Blci9TREtzL2lQaG9uZVNpbXVsYXRvci5zZGsvU3lzdGVtL0xpYnJhcnkvTGF1bmNoRGFlbW9ucycpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9nZXREZXZpY2VTdHJpbmdQbGF0Zm9ybVZlcnNpb24gKHBsYXRmb3JtVmVyc2lvbikge1xuICAgIGxldCByZXFWZXJzaW9uID0gcGxhdGZvcm1WZXJzaW9uO1xuICAgIGlmICghcmVxVmVyc2lvbikge1xuICAgICAgcmVxVmVyc2lvbiA9IGF3YWl0IHhjb2RlLmdldE1heElPU1NESygpO1xuICAgICAgbG9nLndhcm4oYE5vIHBsYXRmb3JtIHZlcnNpb24gc2V0LiBVc2luZyBtYXggU0RLIHZlcnNpb246ICR7cmVxVmVyc2lvbn1gKTtcbiAgICAgIC8vIHRoaXMgd2lsbCBiZSBhIG51bWJlciwgYW5kIHBvc3NpYmx5IGFuIGludGVnZXIgKGUuZy4sIGlmIG1heCBpT1MgU0RLIGlzIDkpXG4gICAgICAvLyBzbyB0dXJuIGl0IGludG8gYSBzdHJpbmcgYW5kIGFkZCBhIC4wIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKCFfLmlzU3RyaW5nKHJlcVZlcnNpb24pKSB7XG4gICAgICAgIHJlcVZlcnNpb24gPSAocmVxVmVyc2lvbiAlIDEpID8gU3RyaW5nKHJlcVZlcnNpb24pIDogYCR7cmVxVmVyc2lvbn0uMGA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXFWZXJzaW9uO1xuICB9XG5cbiAgLy8gY2hhbmdlIHRoZSBmb3JtYXQgaW4gc3ViY2xhc3NlcywgYXMgbmVjZXNzYXJ5XG4gIHN0YXRpYyBhc3luYyBfZ2V0RGV2aWNlU3RyaW5nVmVyc2lvblN0cmluZyAocGxhdGZvcm1WZXJzaW9uKSB7XG4gICAgbGV0IHJlcVZlcnNpb24gPSBhd2FpdCB0aGlzLl9nZXREZXZpY2VTdHJpbmdQbGF0Zm9ybVZlcnNpb24ocGxhdGZvcm1WZXJzaW9uKTtcblxuICAgIHJldHVybiBgKCR7cmVxVmVyc2lvbn0gU2ltdWxhdG9yKWA7XG4gIH1cblxuICAvLyBjaGFuZ2UgdGhlIGZvcm1hdCBpbiBzdWJjbGFzc2VzLCBhcyBuZWNlc3NhcnlcbiAgc3RhdGljIF9nZXREZXZpY2VTdHJpbmdDb25maWdGaXggKCkge1xuICAgIC8vIHNvbWUgZGV2aWNlcyBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgICByZXR1cm4ge1xuICAgICAgJ2lQYWQgU2ltdWxhdG9yICg3LjEgU2ltdWxhdG9yKSc6ICdpUGFkIDIgKDcuMSBTaW11bGF0b3IpJyxcbiAgICAgICdpUGFkIFNpbXVsYXRvciAoOC4wIFNpbXVsYXRvciknOiAnaVBhZCAyICg4LjAgU2ltdWxhdG9yKScsXG4gICAgICAnaVBhZCBTaW11bGF0b3IgKDguMSBTaW11bGF0b3IpJzogJ2lQYWQgMiAoOC4xIFNpbXVsYXRvciknLFxuICAgICAgJ2lQYWQgU2ltdWxhdG9yICg4LjIgU2ltdWxhdG9yKSc6ICdpUGFkIDIgKDguMiBTaW11bGF0b3IpJyxcbiAgICAgICdpUGFkIFNpbXVsYXRvciAoOC4zIFNpbXVsYXRvciknOiAnaVBhZCAyICg4LjMgU2ltdWxhdG9yKScsXG4gICAgICAnaVBhZCBTaW11bGF0b3IgKDguNCBTaW11bGF0b3IpJzogJ2lQYWQgMiAoOC40IFNpbXVsYXRvciknLFxuICAgICAgJ2lQaG9uZSBTaW11bGF0b3IgKDcuMSBTaW11bGF0b3IpJzogJ2lQaG9uZSA1cyAoNy4xIFNpbXVsYXRvciknLFxuICAgICAgJ2lQaG9uZSBTaW11bGF0b3IgKDguNCBTaW11bGF0b3IpJzogJ2lQaG9uZSA2ICg4LjQgU2ltdWxhdG9yKScsXG4gICAgICAnaVBob25lIFNpbXVsYXRvciAoOC4zIFNpbXVsYXRvciknOiAnaVBob25lIDYgKDguMyBTaW11bGF0b3IpJyxcbiAgICAgICdpUGhvbmUgU2ltdWxhdG9yICg4LjIgU2ltdWxhdG9yKSc6ICdpUGhvbmUgNiAoOC4yIFNpbXVsYXRvciknLFxuICAgICAgJ2lQaG9uZSBTaW11bGF0b3IgKDguMSBTaW11bGF0b3IpJzogJ2lQaG9uZSA2ICg4LjEgU2ltdWxhdG9yKScsXG4gICAgICAnaVBob25lIFNpbXVsYXRvciAoOC4wIFNpbXVsYXRvciknOiAnaVBob25lIDYgKDguMCBTaW11bGF0b3IpJ1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSBzZXQgb2Ygb3B0aW9ucyBhbmQgZmluZHMgdGhlIGNvcnJlY3QgZGV2aWNlIHN0cmluZyBpbiBvcmRlciBmb3IgSW5zdHJ1bWVudHMgdG9cbiAgICogaWRlbnRpZnkgdGhlIGNvcnJlY3Qgc2ltdWxhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIFRoZSBvcHRpb25zIGF2YWlsYWJsZSBhcmU6XG4gICAqICAgLSBgZGV2aWNlTmFtZWAgLSBhIG5hbWUgZm9yIHRoZSBkZXZpY2UuIElmIHRoZSBnaXZlbiBkZXZpY2UgbmFtZSBzdGFydHMgd2l0aCBgPWAsIHRoZSBuYW1lLCBsZXNzIHRoZSBlcXVhbHMgc2lnbiwgaXMgcmV0dXJuZWQuXG4gICAqICAgLSBgcGxhdGZvcm1WZXJzaW9uYCAtIHRoZSB2ZXJzaW9uIG9mIGlPUyB0byB1c2UuIERlZmF1bHRzIHRvIHRoZSBjdXJyZW50IFhjb2RlJ3MgbWF4aW11bSBTREsgdmVyc2lvbi5cbiAgICogICAtIGBmb3JjZUlwaG9uZWAgLSBmb3JjZSB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZGV2aWNlIHN0cmluZyB0byBpUGhvbmUuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqICAgLSBgZm9yY2VJcGFkYCAtIGZvcmNlIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBkZXZpY2Ugc3RyaW5nIHRvIGlQYWQuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqICAgSWYgYm90aCBgZm9yY2VJcGhvbmVgIGFuZCBgZm9yY2VJcGFkYCBhcmUgdHJ1ZSwgdGhlIGRldmljZSB3aWxsIGJlIGZvcmNlZCB0byBpUGhvbmUuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvdW5kIGRldmljZSBzdHJpbmcuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZ2V0RGV2aWNlU3RyaW5nIChvcHRzKSB7XG4gICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgIGRldmljZU5hbWU6IG51bGwsXG4gICAgICBwbGF0Zm9ybVZlcnNpb246IG51bGwsXG4gICAgICBmb3JjZUlwaG9uZTogZmFsc2UsXG4gICAgICBmb3JjZUlwYWQ6IGZhbHNlXG4gICAgfSwgb3B0cyk7XG4gICAgbGV0IGxvZ09wdHMgPSB7XG4gICAgICBkZXZpY2VOYW1lOiBvcHRzLmRldmljZU5hbWUsXG4gICAgICBwbGF0Zm9ybVZlcnNpb246IG9wdHMucGxhdGZvcm1WZXJzaW9uLFxuICAgICAgZm9yY2VJcGhvbmU6IG9wdHMuZm9yY2VJcGhvbmUsXG4gICAgICBmb3JjZUlwYWQ6IG9wdHMuZm9yY2VJcGFkXG4gICAgfTtcbiAgICBsb2cuZGVidWcoYEdldHRpbmcgZGV2aWNlIHN0cmluZyBmcm9tIG9wdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkobG9nT3B0cyl9YCk7XG5cbiAgICAvLyBzaG9ydCBjaXJjdWl0IGlmIHdlIGFscmVhZHkgaGF2ZSBhIGRldmljZSBuYW1lXG4gICAgaWYgKChvcHRzLmRldmljZU5hbWUgfHwgJycpWzBdID09PSAnPScpIHtcbiAgICAgIHJldHVybiBvcHRzLmRldmljZU5hbWUuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIGxldCBpc2lQaG9uZSA9ICEhb3B0cy5mb3JjZUlwaG9uZSB8fCAhb3B0cy5mb3JjZUlwYWQ7XG5cbiAgICBpZiAob3B0cy5kZXZpY2VOYW1lKSB7XG4gICAgICBsZXQgZGV2aWNlID0gb3B0cy5kZXZpY2VOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoZGV2aWNlLmluZGV4T2YoJ2lwaG9uZScpICE9PSAtMSkge1xuICAgICAgICBpc2lQaG9uZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGRldmljZS5pbmRleE9mKCdpcGFkJykgIT09IC0xKSB7XG4gICAgICAgIGlzaVBob25lID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGlvc0RldmljZVN0cmluZyA9IG9wdHMuZGV2aWNlTmFtZSB8fCAoaXNpUGhvbmUgPyAnaVBob25lIFNpbXVsYXRvcicgOiAnaVBhZCBTaW11bGF0b3InKTtcblxuICAgIC8vIGlmIHNvbWVvbmUgcGFzc2VzIGluIGp1c3QgXCJpUGhvbmVcIiwgbWFrZSB0aGF0IFwiaVBob25lIFNpbXVsYXRvclwiIHRvXG4gICAgLy8gY29uZm9ybSB0byBhbGwgdGhlIGxvZ2ljIGJlbG93XG4gICAgaWYgKC9eKGlQaG9uZXxpUGFkKSQvLnRlc3QoaW9zRGV2aWNlU3RyaW5nKSkge1xuICAgICAgaW9zRGV2aWNlU3RyaW5nICs9ICcgU2ltdWxhdG9yJztcbiAgICB9XG5cbiAgICAvLyB3ZSBzdXBwb3J0IGRldmljZU5hbWU6IFwiaVBob25lIFNpbXVsYXRvclwiLCBhbmQgYWxzbyB3YW50IHRvIHN1cHBvcnRcbiAgICAvLyBcImlQaG9uZSBYWVogU2ltdWxhdG9yXCIsIGJ1dCB0aGVzZSBzdHJpbmdzIGFyZW4ndCBpbiB0aGUgZGV2aWNlIGxpc3QuXG4gICAgLy8gU28sIGlmIHNvbWVvbmUgc2VudCBpbiBcImlQaG9uZSBYWVogU2ltdWxhdG9yXCIsIHN0cmlwIG9mZiBcIiBTaW11bGF0b3JcIlxuICAgIC8vIGluIG9yZGVyIHRvIGFsbG93IHRoZSBkZWZhdWx0IFwiaVBob25lIFhZWlwiIG1hdGNoXG4gICAgaWYgKC9bXihpUGhvbmV8aVBhZCldIFNpbXVsYXRvci8udGVzdChpb3NEZXZpY2VTdHJpbmcpKSB7XG4gICAgICBpb3NEZXZpY2VTdHJpbmcgPSBpb3NEZXZpY2VTdHJpbmcucmVwbGFjZSgnIFNpbXVsYXRvcicsICcnKTtcbiAgICB9XG4gICAgaW9zRGV2aWNlU3RyaW5nICs9IGAgJHthd2FpdCB0aGlzLl9nZXREZXZpY2VTdHJpbmdWZXJzaW9uU3RyaW5nKG9wdHMucGxhdGZvcm1WZXJzaW9uKX1gO1xuXG4gICAgbGV0IENPTkZJR19GSVggPSB0aGlzLl9nZXREZXZpY2VTdHJpbmdDb25maWdGaXgoKTtcblxuICAgIGxldCBjb25maWdGaXggPSBDT05GSUdfRklYO1xuICAgIGlmIChjb25maWdGaXhbaW9zRGV2aWNlU3RyaW5nXSkge1xuICAgICAgaW9zRGV2aWNlU3RyaW5nID0gY29uZmlnRml4W2lvc0RldmljZVN0cmluZ107XG4gICAgICBsb2cuZGVidWcoYEZpeGluZyBkZXZpY2UuIENoYW5nZWQgZnJvbSAnJHtvcHRzLmRldmljZU5hbWV9JyBgICtcbiAgICAgICAgICAgICAgICBgdG8gJyR7aW9zRGV2aWNlU3RyaW5nfSdgKTtcbiAgICB9XG5cbiAgICBsb2cuZGVidWcoYEZpbmFsIGRldmljZSBzdHJpbmcgaXMgJyR7aW9zRGV2aWNlU3RyaW5nfSdgKTtcbiAgICByZXR1cm4gaW9zRGV2aWNlU3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmdWxsIHBhdGggdG8gdGhlIHNpbXVsYXRvcidzIFdlYkluc3BlY3RvciBVbml4IERvbWFpbiBTb2NrZXRcbiAgICogICBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gc29ja2V0LlxuICAgKi9cbiAgYXN5bmMgZ2V0V2ViSW5zcGVjdG9yU29ja2V0ICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgLy8gdGhlcmUgaXMgbm8gV2ViSW5zcGVjdG9yIHNvY2tldCBmb3IgdGhpcyB2ZXJzaW9uIG9mIFhjb2RlXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZm9yIChsZXQgW2NtZCwgZm5dIG9mIF8udG9QYWlycyhleHRlbnNpb25zKSkge1xuICBTaW11bGF0b3JYY29kZTYucHJvdG90eXBlW2NtZF0gPSBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yWGNvZGU2O1xuZXhwb3J0IHsgU2ltdWxhdG9yWGNvZGU2LCBCT09UX0NPTVBMRVRFRF9FVkVOVCwgU1BSSU5HQk9BUkRfQlVORExFX0lEIH07XG4iXSwiZmlsZSI6ImxpYi9zaW11bGF0b3IteGNvZGUtNi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
