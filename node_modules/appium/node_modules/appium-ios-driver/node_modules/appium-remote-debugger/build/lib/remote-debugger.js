"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RPC_RESPONSE_TIMEOUT_MS = exports.REMOTE_DEBUGGER_PORT = exports.DEBUGGER_TYPES = exports.RemoteDebugger = void 0;

require("source-map-support/register");

var _events = _interopRequireDefault(require("events"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _remoteDebuggerRpcClient = _interopRequireDefault(require("./remote-debugger-rpc-client"));

var _messageHandlers = _interopRequireDefault(require("./message-handlers"));

var _helpers = require("./helpers");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

let VERSION;

try {
  VERSION = require(_path.default.resolve(__dirname, '..', '..', 'package.json')).version;
} catch (ign) {}

const DEBUGGER_TYPES = {
  webkit: 1,
  webinspector: 2
};
exports.DEBUGGER_TYPES = DEBUGGER_TYPES;
const SELECT_APP_RETRIES = 20;
const REMOTE_DEBUGGER_PORT = 27753;
exports.REMOTE_DEBUGGER_PORT = REMOTE_DEBUGGER_PORT;
const RPC_RESPONSE_TIMEOUT_MS = 5000;
exports.RPC_RESPONSE_TIMEOUT_MS = RPC_RESPONSE_TIMEOUT_MS;
const PAGE_READY_TIMEOUT = 5000;
const RESPONSE_LOG_LENGTH = 100;
const GARBAGE_COLLECT_TIMEOUT = 5000;

class RemoteDebugger extends _events.default.EventEmitter {
  constructor(opts = {}) {
    super();

    if (VERSION) {
      _logger.default.info(`Remote Debugger version ${VERSION}`);
    }

    const {
      bundleId,
      platformVersion,
      debuggerType = DEBUGGER_TYPES.webinspector,
      isSafari = true,
      useNewSafari = false,
      pageLoadMs,
      host,
      port = REMOTE_DEBUGGER_PORT,
      socketPath,
      pageReadyTimeout = PAGE_READY_TIMEOUT,
      remoteDebugProxy,
      garbageCollectOnExecute = false,
      logFullResponse = false
    } = opts;
    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this.isSafari = isSafari;
    this.debuggerType = debuggerType;

    if (this.debuggerType === DEBUGGER_TYPES.webinspector) {
      this.useNewSafari = useNewSafari;
      this.pageLoadMs = pageLoadMs;

      _logger.default.debug(`useNewSafari --> ${this.useNewSafari}`);
    }

    this.garbageCollectOnExecute = garbageCollectOnExecute;
    this.host = host;
    this.port = port;
    this.socketPath = socketPath;
    this.remoteDebugProxy = remoteDebugProxy;
    this.pageReadyTimeout = pageReadyTimeout;
    this.logFullResponse = logFullResponse;
  }

  setup() {
    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;
    this._navigatingToPage = false;
    this.specialCbs = {
      '_rpc_reportIdentifier:': _lodash.default.noop,
      '_rpc_forwardGetListing:': this.onPageChange.bind(this),
      '_rpc_reportConnectedApplicationList:': _lodash.default.noop,
      '_rpc_applicationConnected:': this.onAppConnect.bind(this),
      '_rpc_applicationDisconnected:': this.onAppDisconnect.bind(this),
      '_rpc_applicationUpdated:': this.onAppUpdate.bind(this),
      '_rpc_reportConnectedDriverList:': this.onReportDriverList.bind(this),
      pageLoad: this.pageLoad.bind(this),
      frameDetached: this.frameDetached.bind(this),
      targetCreated: this.onTargetCreated.bind(this),
      targetDestroyed: this.onTargetDestroyed.bind(this)
    };
    this.rpcClient = null;
  }

  teardown() {
    _logger.default.debug('Cleaning up listeners');

    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;
    this.specialCbs = {};
    this.rpcClient = null;
    this.removeAllListeners(RemoteDebugger.EVENT_PAGE_CHANGE);
    this.removeAllListeners(RemoteDebugger.EVENT_DISCONNECT);
  }

  async connect() {
    this.setup();
    this.rpcClient = new _remoteDebuggerRpcClient.default({
      platformVersion: this.platformVersion,
      isSafari: this.isSafari,
      host: this.host,
      port: this.port,
      socketPath: this.socketPath,
      specialMessageHandlers: this.specialCbs,
      messageProxy: this.remoteDebugProxy,
      logFullResponse: this.logFullResponse
    });
    await this.rpcClient.connect();

    try {
      const appInfo = await this.setConnectionKey();

      _logger.default.debug('Connected to application');

      return appInfo;
    } catch (err) {
      await this.disconnect();
      return null;
    }
  }

  async disconnect() {
    await this.rpcClient.disconnect();
    this.emit(RemoteDebugger.EVENT_DISCONNECT, true);
    this.teardown();
  }

  isConnected() {
    return !!(this.rpcClient && this.rpcClient.isConnected());
  }

  async setConnectionKey() {
    return await new _bluebird.default((resolve, reject) => {
      let connectCb = apps => {
        if (_lodash.default.isUndefined(apps) || _lodash.default.keys(apps).length === 0) {
          _logger.default.debug('Received no apps from remote debugger. Unable to connect.');

          return resolve(this.appDict);
        }

        let newDict = {};

        for (const dict of _lodash.default.values(apps)) {
          let [id, entry] = (0, _helpers.appInfoFromDict)(dict);
          newDict[id] = entry;
        }

        _lodash.default.defaults(this.appDict, newDict);

        resolve(newDict);
      };

      this.rpcClient.setSpecialMessageHandler('_rpc_reportConnectedApplicationList:', reject, connectCb);

      _logger.default.debug('Sending connection key request');

      return (async () => {
        let [simNameKey, simBuildKey, simPlatformVersion] = await this.rpcClient.send('setConnectionKey');

        _logger.default.debug(`Sim name: ${simNameKey}`);

        _logger.default.debug(`Sim build: ${simBuildKey}`);

        _logger.default.debug(`Sim platform version: ${simPlatformVersion}`);
      })();
    });
  }

  updateAppsWithDict(dict) {
    this.appDict = this.appDict || {};
    let [id, entry] = (0, _helpers.appInfoFromDict)(dict);

    if (this.appDict[id]) {
      entry.pageArray = this.appDict[id].pageArray;
    }

    this.appDict[id] = entry;

    if (_lodash.default.isUndefined(entry.pageArray)) {
      entry.pageArray = (0, _helpers.deferredPromise)();
    }

    if (!this.appIdKey) {
      this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
    }
  }

  logApplicationDictionary(apps) {
    function getValueString(key, value) {
      if (_lodash.default.isFunction(value)) {
        return '[Function]';
      }

      if (key === 'pageArray' && !_lodash.default.isArray(value)) {
        return `'Waiting for data'`;
      }

      return JSON.stringify(value);
    }

    _logger.default.debug('Current applications available:');

    for (const [app, info] of _lodash.default.toPairs(apps)) {
      _logger.default.debug(`    Application: '${app}'`);

      for (const [key, value] of _lodash.default.toPairs(info)) {
        if (key === 'pageArray' && Array.isArray(value) && value.length) {
          _logger.default.debug(`        ${key}:`);

          for (const page of value) {
            let prefix = '- ';

            for (const [k, v] of _lodash.default.toPairs(page)) {
              _logger.default.debug(`          ${prefix}${k}: ${JSON.stringify(v)}`);

              prefix = '  ';
            }
          }
        } else {
          const valueString = getValueString(key, value);

          _logger.default.debug(`        ${key}: ${valueString}`);
        }
      }
    }
  }

  async selectApp(currentUrl = null, maxTries = SELECT_APP_RETRIES, ignoreAboutBlankUrl = false) {
    _logger.default.debug('Selecting application');

    if (!this.appDict || _lodash.default.keys(this.appDict).length === 0) {
      _logger.default.debug('No applications currently connected.');

      return [];
    }

    let pageDict, appIdKey;

    appLoop: for (let i = 0; i < maxTries; i++) {
      this.logApplicationDictionary(this.appDict);
      let possibleAppIds = (0, _helpers.getPossibleDebuggerAppKeys)(this.bundleId, this.platformVersion, this.appDict);

      _logger.default.debug(`Trying out the possible app ids: ${possibleAppIds.join(', ')}`);

      for (const attemptedAppIdKey of possibleAppIds) {
        try {
          _logger.default.debug(`Selecting app ${attemptedAppIdKey} (try #${i + 1} of ${maxTries})`);

          [appIdKey, pageDict] = await this.rpcClient.selectApp(attemptedAppIdKey, this.onAppConnect.bind(this));

          if (_lodash.default.isEmpty(pageDict)) {
            _logger.default.debug('Empty page dictionary received. Trying again.');

            continue;
          }

          this.appDict[appIdKey].pageArray = (0, _helpers.pageArrayFromDict)(pageDict);
          let found = false;

          dictLoop: for (const appDict of _lodash.default.values(this.appDict)) {
            if (found) break;

            if (!appDict || !appDict.pageArray) {
              continue;
            }

            if (appDict.pageArray.promise) {
              try {
                await _bluebird.default.resolve(appDict.pageArray.promise).timeout(10000);
              } catch (err) {
                if (!(err instanceof _bluebird.default.TimeoutError)) {
                  throw err;
                }

                continue;
              }
            }

            for (const dict of appDict.pageArray || []) {
              if ((!ignoreAboutBlankUrl || dict.url !== 'about:blank') && (!currentUrl || dict.url === currentUrl || dict.url === `${currentUrl}/`)) {
                appIdKey = appDict.id;
                pageDict = dict;
                found = true;
                break dictLoop;
              }
            }
          }

          if (!found) {
            if (currentUrl) {
              _logger.default.debug(`Received app, but expected url ('${currentUrl}') was not found. Trying again.`);
            } else {
              _logger.default.debug('Received app, but no match was found. Trying again.');
            }

            pageDict = null;
            continue;
          }

          break appLoop;
        } catch (err) {
          _logger.default.debug(`Error checking application: '${err.message}'. Retrying connection`);
        }
      }
    }

    if (!pageDict) {
      _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
    }

    if (this.appIdKey !== appIdKey) {
      _logger.default.debug(`Received altered app id, updating from '${this.appIdKey}' to '${appIdKey}'`);

      this.appIdKey = appIdKey;
    }

    const pagePromises = Object.values(this.appDict).filter(app => !!app.pageArray && !!app.pageArray.promise).map(app => app.pageArray.promise);

    if (pagePromises.length) {
      _logger.default.debug(`Waiting for ${pagePromises.length} pages to be fulfilled`);

      await _bluebird.default.any([_bluebird.default.delay(30000), _bluebird.default.all(pagePromises)]);
    }

    this.logApplicationDictionary(this.appDict);
    const pageArray = _lodash.default.isEmpty(this.appDict[appIdKey].pageArray) ? (0, _helpers.pageArrayFromDict)(pageDict) : this.appDict[appIdKey].pageArray;

    _logger.default.debug(`Finally selecting app ${this.appIdKey}: ${(0, _helpers.simpleStringify)(pageArray)}`);

    let fullPageArray = [];

    for (const [app, info] of _lodash.default.toPairs(this.appDict)) {
      if (!_lodash.default.isArray(info.pageArray)) continue;
      let id = app.replace('PID:', '');

      for (const page of info.pageArray) {
        if (page.url && (!ignoreAboutBlankUrl || page.url !== 'about:blank') && (!currentUrl || page.url === currentUrl || page.url === `${currentUrl}/`)) {
          let pageDict = _lodash.default.clone(page);

          pageDict.id = `${id}.${pageDict.id}`;
          fullPageArray.push(pageDict);
        }
      }
    }

    return fullPageArray;
  }

  async selectPage(appIdKey, pageIdKey, skipReadyCheck = false) {
    this.appIdKey = `PID:${appIdKey}`;
    this.pageIdKey = pageIdKey;

    _logger.default.debug(`Selecting page '${pageIdKey}' on app '${this.appIdKey}' and forwarding socket setup`);

    await this.rpcClient.send('setSenderKey', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });

    _logger.default.debug('Sender key set');

    this.rpcClient.shouldCheckForTarget = true;
    await this.rpcClient.send('enablePage', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType,
      targetId: 'page-1'
    });

    _logger.default.debug('Enabled activity on page');

    if (!skipReadyCheck && !(await this.checkPageIsReady())) {
      await this.pageUnload();
    }
  }

  async executeAtom(atom, args, frames) {
    if (!this.rpcClient.connected) throw new Error('Remote debugger is not connected');

    _logger.default.debug(`Executing atom '${atom}'`);

    const script = await (0, _helpers.getScriptForAtom)(atom, args, frames);
    const value = await this.execute(script, true);

    _logger.default.debug(`Received result for atom '${atom}' execution: ${_lodash.default.truncate((0, _helpers.simpleStringify)(value), {
      length: RESPONSE_LOG_LENGTH
    })}`);

    return value;
  }

  async executeAtomAsync(atom, args, frames, responseUrl) {
    let asyncCallBack = `function (res) { xmlHttp = new XMLHttpRequest(); ` + `xmlHttp.open('POST', '${responseUrl}', true);` + `xmlHttp.setRequestHeader('Content-type','application/json'); ` + `xmlHttp.send(res); }`;
    let script = await (0, _helpers.getScriptForAtom)(atom, args, frames, asyncCallBack);
    await this.execute(script);
  }

  frameDetached() {
    this.emit(RemoteDebugger.EVENT_FRAMES_DETACHED);
  }

  async pageLoad(startPageLoadMs, pageLoadVerifyHook) {
    let timeoutMs = 500;
    let start = startPageLoadMs || Date.now();

    _logger.default.debug('Page loaded, verifying whether ready');

    const verify = async () => {
      this.pageLoadDelay = _appiumSupport.util.cancellableDelay(timeoutMs);

      try {
        await this.pageLoadDelay;
      } catch (err) {
        if (err instanceof _bluebird.default.CancellationError) {
          return;
        }
      }

      if (!this.appIdKey) {
        _logger.default.debug('Not connected to an application. Ignoring page load');

        return;
      }

      if (_lodash.default.isFunction(pageLoadVerifyHook)) {
        await pageLoadVerifyHook();
      }

      const ready = await this.checkPageIsReady();

      if (ready || this.pageLoadMs > 0 && start + this.pageLoadMs < Date.now()) {
        _logger.default.debug('Page is ready');

        this.pageLoading = false;
      } else {
        _logger.default.debug('Page was not ready, retrying');

        await verify();
      }
    };

    await verify();
  }

  cancelPageLoad() {
    _logger.default.debug('Unregistering from page readiness notifications');

    this.pageLoading = false;

    if (this.pageLoadDelay) {
      this.pageLoadDelay.cancel();
    }
  }

  async pageUnload() {
    _logger.default.debug('Page unloading');

    this.pageLoading = true;
    await this.waitForDom();
  }

  async waitForDom(startPageLoadMs, pageLoadVerifyHook) {
    _logger.default.debug('Waiting for dom...');

    await this.pageLoad(startPageLoadMs, pageLoadVerifyHook);
  }

  async checkPageIsReady() {
    const errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey
    });
    if (errors) throw new Error(errors);

    _logger.default.debug('Checking document readyState');

    const readyCmd = '(function (){ return document.readyState; })()';
    let readyState = 'loading';

    try {
      readyState = await _bluebird.default.resolve(this.execute(readyCmd, true)).timeout(this.pageReadyTimeout);
    } catch (err) {
      if (!(err instanceof _bluebird.default.TimeoutError)) {
        throw err;
      }

      _logger.default.debug(`Page readiness check timed out after ${this.pageReadyTimeout}ms`);

      return false;
    }

    _logger.default.debug(`Document readyState is '${readyState}'`);

    return readyState === 'complete';
  }

  async navToUrl(url, pageLoadVerifyHook) {
    if (this.debuggerType === DEBUGGER_TYPES.webinspector) {
      const errors = (0, _helpers.checkParams)({
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey
      });
      if (errors) throw new Error(errors);
    }

    this._navigatingToPage = true;

    try {
      _logger.default.debug(`Navigating to new URL: '${url}'`);

      await this.rpcClient.send('setUrl', {
        url,
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey,
        debuggerType: this.debuggerType
      });

      if (!this.useNewSafari) {
        await _bluebird.default.delay(1000);
      }

      if (this.debuggerType === DEBUGGER_TYPES.webinspector) {
        await this.waitForFrameNavigated();
      }

      await this.waitForDom(Date.now(), pageLoadVerifyHook);
    } finally {
      this._navigatingToPage = false;
    }
  }

  async waitForFrameNavigated() {
    return await new _bluebird.default(async (resolve, reject) => {
      _logger.default.debug('Waiting for frame navigated message...');

      let startMs = Date.now();

      let navEventListener = value => {
        _logger.default.debug(`Frame navigated in ${(Date.now() - startMs) / 1000} sec from source: ${value}`);

        if (this.navigationDelay) {
          this.navigationDelay.cancel();
        }

        resolve(value);
      };

      this.rpcClient.setSpecialMessageHandler('Page.frameNavigated', reject, navEventListener);

      if (!this.useNewSafari || this.pageLoadMs >= 0) {
        let timeout = this.useNewSafari ? this.pageLoadMs : 500;
        this.navigationDelay = _appiumSupport.util.cancellableDelay(timeout);

        try {
          await this.navigationDelay;
          navEventListener('timeout');
        } catch (err) {}
      }
    });
  }

  async startTimeline(fn) {
    _logger.default.debug('Starting to record the timeline');

    this.rpcClient.setTimelineEventHandler(fn);
    return await this.rpcClient.send('startTimeline', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
  }

  async stopTimeline() {
    _logger.default.debug('Stopping to record the timeline');

    await this.rpcClient.send('stopTimeline', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
  }

  async startConsole(fn) {
    _logger.default.debug('Starting to listen for JavaScript console');

    this.rpcClient.setConsoleLogEventHandler(fn);
    return await this.rpcClient.send('startConsole', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
  }

  async stopConsole() {
    _logger.default.debug('Stopping to listen for JavaScript console');

    await this.rpcClient.send('stopConsole', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
  }

  async startNetwork(fn) {
    _logger.default.debug('Starting to listen for network events');

    this.rpcClient.setNetworkLogEventHandler(fn);
    return await this.rpcClient.send('startNetwork', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
  }

  async stopNetwork() {
    _logger.default.debug('Stopping to listen for network events');

    await this.rpcClient.send('stopNetwork', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
  }

  async execute(command, override) {
    if (this.pageLoading && !override) {
      _logger.default.debug('Trying to execute but page is not loaded.');

      await this.waitForDom();
    }

    if (this.debuggerType === DEBUGGER_TYPES.webinspector) {
      let errors = (0, _helpers.checkParams)({
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey
      });
      if (errors) throw new Error(errors);
    }

    if (this.garbageCollectOnExecute) {
      await this.garbageCollect();
    }

    _logger.default.debug(`Sending javascript command ${_lodash.default.truncate(command, {
      length: 50
    })}`);

    let res = await this.rpcClient.send('sendJSCommand', {
      command,
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
    return this.convertResult(res);
  }

  async callFunction(objId, fn, args) {
    let errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
    if (errors) throw new Error(errors);

    if (this.garbageCollectOnExecute) {
      await this.garbageCollect();
    }

    _logger.default.debug('Calling javascript function');

    const res = await this.rpcClient.send('callJSFunction', {
      objId,
      fn,
      args,
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    });
    return this.convertResult(res);
  }

  convertResult(res) {
    if (_lodash.default.isUndefined(res)) {
      throw new Error(`Did not get OK result from remote debugger. Result was: ${_lodash.default.truncate((0, _helpers.simpleStringify)(res), {
        length: RESPONSE_LOG_LENGTH
      })}`);
    } else if (_lodash.default.isString(res)) {
      try {
        res = JSON.parse(res);
      } catch (err) {}
    } else if (!_lodash.default.isObject(res)) {
      throw new Error(`Result has unexpected type: (${typeof res}).`);
    }

    if (res.status && res.status !== 0) {
      throw (0, _appiumBaseDriver.errorFromCode)(res.status, res.value.message || res.value);
    }

    return res.hasOwnProperty('value') ? res.value : res;
  }

  allowNavigationWithoutReload(allow = true) {
    if (_lodash.default.isFunction(this.rpcClient.allowNavigationWithoutReload)) {
      this.rpcClient.allowNavigationWithoutReload(allow);
    }
  }

  async getCookies(urls) {
    _logger.default.debug('Getting network cookies');

    return await this.rpcClient.send('getCookies', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType,
      urls
    });
  }

  async deleteCookie(cookieName, url) {
    _logger.default.debug(`Deleting cookie '${cookieName}' on '${url}'`);

    return await this.rpcClient.send('deleteCookie', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType,
      cookieName,
      url
    });
  }

  async garbageCollect(timeoutMs = GARBAGE_COLLECT_TIMEOUT) {
    _logger.default.debug(`Garbage collecting with ${timeoutMs}ms timeout`);

    const errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });

    if (errors) {
      _logger.default.debug(`Unable to collect garbage at this time`);

      return;
    }

    await _bluebird.default.resolve(this.rpcClient.send('garbageCollect', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      debuggerType: this.debuggerType
    })).timeout(timeoutMs).then(function gcSuccess() {
      _logger.default.debug(`Garbage collection successful`);
    }).catch(function gcError(err) {
      if (err instanceof _bluebird.default.TimeoutError) {
        _logger.default.debug(`Garbage collection timed out after ${timeoutMs}ms`);
      } else {
        _logger.default.debug(`Unable to collect garbage: ${err.message}`);
      }
    });
  }

}

exports.RemoteDebugger = RemoteDebugger;
RemoteDebugger.EVENT_PAGE_CHANGE = 'remote_debugger_page_change';
RemoteDebugger.EVENT_FRAMES_DETACHED = 'remote_debugger_frames_detached';
RemoteDebugger.EVENT_DISCONNECT = 'remote_debugger_disconnect';

for (const [name, handler] of _lodash.default.toPairs(_messageHandlers.default)) {
  RemoteDebugger.prototype[name] = handler;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
