"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.JWProxy = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _axios = _interopRequireDefault(require("axios"));

var _status = require("../jsonwp-status/status");

var _errors = require("../protocol/errors");

var _protocol = require("../protocol");

var _constants = require("../constants");

var _protocolConverter = _interopRequireDefault(require("./protocol-converter"));

var _helpers = require("../protocol/helpers");

var _sessionsCache = _interopRequireDefault(require("../protocol/sessions-cache"));

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

const log = _appiumSupport.logger.getLogger('WD Proxy');

const DEFAULT_REQUEST_TIMEOUT = 240000;
const COMPACT_ERROR_PATTERNS = [/\bECONNREFUSED\b/, /socket hang up/];
const {
  MJSONWP,
  W3C
} = _constants.PROTOCOLS;

class JWProxy {
  constructor(opts = {}) {
    var _opts$keepAlive;

    _lodash.default.defaults(this, opts, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: _constants.DEFAULT_BASE_PATH,
      reqBasePath: _constants.DEFAULT_BASE_PATH,
      sessionId: null,
      timeout: DEFAULT_REQUEST_TIMEOUT
    });

    this.scheme = this.scheme.toLowerCase();
    this._activeRequests = [];
    this._reqCancelSource = _axios.default.CancelToken.source();
    this._downstreamProtocol = null;
    const agentOpts = {
      keepAlive: (_opts$keepAlive = opts.keepAlive) !== null && _opts$keepAlive !== void 0 ? _opts$keepAlive : true,
      maxSockets: 30,
      maxFreeSockets: 10,
      timeout: 60000
    };
    this.httpAgent = new _http.default.Agent(agentOpts);
    this.httpsAgent = new _https.default.Agent(agentOpts);
    this.protocolConverter = new _protocolConverter.default(this.proxy.bind(this));
  }

  async request(requestConfig) {
    const reqPromise = (0, _axios.default)(requestConfig);

    this._activeRequests.push(reqPromise);

    try {
      return await reqPromise;
    } finally {
      _lodash.default.pull(this._activeRequests, reqPromise);
    }
  }

  getActiveRequestsCount() {
    return this._activeRequests.length;
  }

  cancelActiveRequests() {
    try {
      this._reqCancelSource.cancel('The request has been canceled');
    } finally {
      this._activeRequests = [];
    }
  }

  endpointRequiresSessionId(endpoint) {
    return !_lodash.default.includes(['/session', '/sessions', '/status'], endpoint);
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
    this.protocolConverter.downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getUrlForProxy(url) {
    if (url === '') {
      url = '/';
    }

    const proxyBase = `${this.scheme}://${this.server}:${this.port}${this.base}`;
    const endpointRe = '(/(session|status))';
    let remainingUrl = '';

    if (/^http/.test(url)) {
      const first = new RegExp(`(https?://.+)${endpointRe}`).exec(url);

      if (!first) {
        throw new Error('Got a complete url but could not extract JWP endpoint');
      }

      remainingUrl = url.replace(first[1], '');
    } else if (new RegExp('^/').test(url)) {
      remainingUrl = url;
    } else {
      throw new Error(`Did not know what to do with url '${url}'`);
    }

    const stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');

    if (stripPrefixRe.test(remainingUrl)) {
      remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
    }

    if (!new RegExp(endpointRe).test(remainingUrl)) {
      remainingUrl = `/session/${this.sessionId}${remainingUrl}`;
    }

    const requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

    if (requiresSessionId && this.sessionId === null) {
      throw new Error('Trying to proxy a session command without session id');
    }

    const sessionBaseRe = new RegExp('^/session/([^/]+)');

    if (sessionBaseRe.test(remainingUrl)) {
      const match = sessionBaseRe.exec(remainingUrl);
      remainingUrl = remainingUrl.replace(match[1], this.sessionId);
    } else if (requiresSessionId) {
      throw new Error(`Could not find :session section for url: ${remainingUrl}`);
    }

    remainingUrl = remainingUrl.replace(/\/$/, '');
    return proxyBase + remainingUrl;
  }

  async proxy(url, method, body = null) {
    method = method.toUpperCase();
    const newUrl = this.getUrlForProxy(url);

    const truncateBody = content => _lodash.default.truncate(_lodash.default.isString(content) ? content : JSON.stringify(content), {
      length: _constants.MAX_LOG_BODY_LENGTH
    });

    const reqOpts = {
      url: newUrl,
      method,
      headers: {
        'content-type': 'application/json; charset=utf-8',
        'user-agent': 'appium',
        accept: 'application/json, */*'
      },
      timeout: this.timeout,
      httpAgent: this.httpAgent,
      httpsAgent: this.httpsAgent,
      cancelToken: this._reqCancelSource.token
    };

    if (_appiumSupport.util.hasValue(body) && method !== 'GET') {
      if (typeof body !== 'object') {
        try {
          reqOpts.data = JSON.parse(body);
        } catch (e) {
          throw new Error(`Cannot interpret the request body as valid JSON: ${truncateBody(body)}`);
        }
      } else {
        reqOpts.data = body;
      }
    }

    log.debug(`Proxying [${method} ${url || '/'}] to [${method} ${newUrl}] ` + (reqOpts.data ? `with body: ${truncateBody(reqOpts.data)}` : 'with no body'));

    const throwProxyError = error => {
      const err = new Error(`The request to ${url} has failed`);
      err.response = {
        data: error,
        status: 500
      };
      throw err;
    };

    let isResponseLogged = false;

    try {
      const {
        data,
        status,
        headers
      } = await this.request(reqOpts);

      if (!_lodash.default.isPlainObject(data)) {
        throwProxyError(data);
      }

      log.debug(`Got response with status ${status}: ${truncateBody(data)}`);
      isResponseLogged = true;
      const isSessionCreationRequest = /\/session$/.test(url) && method === 'POST';

      if (isSessionCreationRequest) {
        if (status === 200) {
          this.sessionId = data.sessionId || (data.value || {}).sessionId;
        }

        this.downstreamProtocol = this.getProtocolFromResBody(data);
        log.info(`Determined the downstream protocol as '${this.downstreamProtocol}'`);
      }

      if (_lodash.default.has(data, 'status') && parseInt(data.status, 10) !== 0) {
        throwProxyError(data);
      }

      const res = {
        statusCode: status,
        headers,
        body: data
      };
      return [res, data];
    } catch (e) {
      var _e$response, _e$response2;

      let proxyErrorMsg = e.message;

      if (_appiumSupport.util.hasValue(e.response)) {
        if (!isResponseLogged) {
          const error = truncateBody(e.response.data);
          log.info(_appiumSupport.util.hasValue(e.response.status) ? `Got response with status ${e.response.status}: ${error}` : `Got response with unknown status: ${error}`);
        }
      } else {
        proxyErrorMsg = `Could not proxy command to the remote server. Original error: ${e.message}`;

        if (COMPACT_ERROR_PATTERNS.some(p => p.test(e.message))) {
          log.info(e.message);
        } else {
          log.info(e.stack);
        }
      }

      throw new _errors.errors.ProxyRequestError(proxyErrorMsg, (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data, (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.status);
    }
  }

  getProtocolFromResBody(resObj) {
    if (_lodash.default.isInteger(resObj.status)) {
      return MJSONWP;
    }

    if (!_lodash.default.isUndefined(resObj.value)) {
      return W3C;
    }
  }

  requestToCommandName(url, method) {
    const extractCommandName = pattern => {
      const pathMatch = pattern.exec(url);
      return pathMatch ? (0, _protocol.routeToCommandName)(pathMatch[1], method, this.reqBasePath) : null;
    };

    let commandName = (0, _protocol.routeToCommandName)(url, method, this.reqBasePath);

    if (!commandName && _lodash.default.includes(url, `${this.reqBasePath}/session/`)) {
      commandName = extractCommandName(new RegExp(`${_lodash.default.escapeRegExp(this.reqBasePath)}/session/[^/]+(.+)`));
    }

    if (!commandName && _lodash.default.includes(url, this.reqBasePath)) {
      commandName = extractCommandName(new RegExp(`${_lodash.default.escapeRegExp(this.reqBasePath)}(/.+)`));
    }

    return commandName;
  }

  async proxyCommand(url, method, body = null) {
    const commandName = this.requestToCommandName(url, method);

    if (!commandName) {
      return await this.proxy(url, method, body);
    }

    log.debug(`Matched '${url}' to command name '${commandName}'`);
    return await this.protocolConverter.convertAndProxy(commandName, url, method, body);
  }

  async command(url, method, body = null) {
    let response;
    let resBodyObj;

    try {
      [response, resBodyObj] = await this.proxyCommand(url, method, body);
    } catch (err) {
      if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
        throw err.getActualError();
      }

      throw new _errors.errors.UnknownError(err.message);
    }

    const protocol = this.getProtocolFromResBody(resBodyObj);

    if (protocol === MJSONWP) {
      if (response.statusCode === 200 && resBodyObj.status === 0) {
        return resBodyObj.value;
      }

      const status = parseInt(resBodyObj.status, 10);

      if (!isNaN(status) && status !== 0) {
        let message = resBodyObj.value;

        if (_lodash.default.has(message, 'message')) {
          message = message.message;
        }

        throw (0, _errors.errorFromMJSONWPStatusCode)(status, _lodash.default.isEmpty(message) ? (0, _status.getSummaryByCode)(status) : message);
      }
    } else if (protocol === W3C) {
      if (response.statusCode < 300) {
        return resBodyObj.value;
      }

      if (_lodash.default.isPlainObject(resBodyObj.value) && resBodyObj.value.error) {
        throw (0, _errors.errorFromW3CJsonCode)(resBodyObj.value.error, resBodyObj.value.message, resBodyObj.value.stacktrace);
      }
    } else if (response.statusCode === 200) {
      return resBodyObj;
    }

    throw new _errors.errors.UnknownError(`Did not know what to do with response code '${response.statusCode}' ` + `and response body '${_lodash.default.truncate(JSON.stringify(resBodyObj), {
      length: 300
    })}'`);
  }

  getSessionIdFromUrl(url) {
    const match = url.match(/\/session\/([^/]+)/);
    return match ? match[1] : null;
  }

  async proxyReqRes(req, res) {
    const [response, resBodyObj] = await this.proxyCommand(req.originalUrl, req.method, req.body);
    res.headers = response.headers;
    res.set('content-type', response.headers['content-type']);
    const reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

    if (_lodash.default.has(resBodyObj, 'sessionId')) {
      if (reqSessionId) {
        log.info(`Replacing sessionId ${resBodyObj.sessionId} with ${reqSessionId}`);
        resBodyObj.sessionId = reqSessionId;
      } else if (this.sessionId) {
        log.info(`Replacing sessionId ${resBodyObj.sessionId} with ${this.sessionId}`);
        resBodyObj.sessionId = this.sessionId;
      }
    }

    resBodyObj.value = (0, _helpers.formatResponseValue)(resBodyObj.value);
    (0, _helpers.formatStatus)(resBodyObj, res.statusCode, _sessionsCache.default.getProtocol(reqSessionId));
    res.status(response.statusCode).send(JSON.stringify(resBodyObj));
  }

}

exports.JWProxy = JWProxy;
var _default = JWProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
