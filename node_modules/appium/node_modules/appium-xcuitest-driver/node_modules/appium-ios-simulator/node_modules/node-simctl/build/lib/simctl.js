"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Simctl = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _index = _interopRequireDefault(require("./subcommands/index.js"));

var _which = _interopRequireDefault(require("which"));

var _logger = _interopRequireWildcard(require("./logger"));

var _helpers = require("./helpers");

var _teen_process = require("teen_process");

const SIMCTL_ENV_PREFIX = 'SIMCTL_CHILD_';
const DEFAULT_OPTS = {
  xcrun: {
    path: null
  },
  execTimeout: _helpers.DEFAULT_EXEC_TIMEOUT,
  logErrors: true
};

class Simctl {
  constructor(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, DEFAULT_OPTS);

    for (const key of _lodash.default.keys(DEFAULT_OPTS)) {
      this[key] = opts[key];
    }

    this._udid = _lodash.default.isNil(opts.udid) ? null : opts.udid;
  }

  set udid(value) {
    this._udid = value;
  }

  get udid() {
    return this._udid;
  }

  requireUdid(commandName = null) {
    if (!this.udid) {
      throw new Error(`udid is required to be set for ` + (commandName ? `the '${commandName}' command` : 'this simctl command'));
    }

    return this.udid;
  }

  async requireXcrun() {
    if (!this.xcrun.path) {
      try {
        this.xcrun.path = await (0, _which.default)(_helpers.XCRUN_BINARY);
      } catch (e) {
        throw new Error(`${_helpers.XCRUN_BINARY} tool has not been found in PATH. ` + `Are Xcode developers tools installed?`);
      }
    }

    return this.xcrun.path;
  }

  async exec(subcommand, opts = {}) {
    let {
      args = [],
      env = {},
      asynchronous = false,
      encoding,
      logErrors = true
    } = opts;
    args = ['simctl', subcommand, ...args];
    env = _lodash.default.defaults(_lodash.default.mapKeys(env, (value, key) => _lodash.default.startsWith(key, SIMCTL_ENV_PREFIX) ? key : `${SIMCTL_ENV_PREFIX}${key}`), process.env);
    const execOpts = {
      env,
      encoding
    };

    if (!asynchronous) {
      execOpts.timeout = this.execTimeout;
    }

    const xcrun = await this.requireXcrun();

    try {
      return asynchronous ? new _teen_process.SubProcess(xcrun, args, execOpts) : await (0, _teen_process.exec)(xcrun, args, execOpts);
    } catch (e) {
      if (!this.logErrors || !logErrors) {
        throw e;
      } else if (e.stderr) {
        const msg = `Error running '${subcommand}': ${e.stderr.trim()}`;

        _logger.default.debug(_logger.LOG_PREFIX, msg);

        throw Error(msg);
      } else {
        _logger.default.debug(_logger.LOG_PREFIX, e.message);

        throw e;
      }
    }
  }

}

exports.Simctl = Simctl;

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  Simctl.prototype[fnName] = fn;
}

var _default = Simctl;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
