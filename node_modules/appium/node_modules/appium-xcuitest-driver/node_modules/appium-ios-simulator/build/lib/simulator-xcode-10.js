"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9.3"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

class SimulatorXcode10 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);

      if (!appContainer.endsWith('.app')) {
        return false;
      }

      return await _appiumSupport.fs.exists(appContainer);
    } catch (err) {
      try {
        const info = await this.simctl.appInfo(bundleId);
        return info.includes('ApplicationType');
      } catch (ign) {}
    }

    return false;
  }

  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
    }

    const timer = new _appiumSupport.timing.Timer().start();
    await this.simctl.openUrl(url);

    try {
      await (0, _asyncbox.waitForCondition)(async () => (await this.ps()).some(({
        name
      }) => name === _utils.MOBILE_SAFARI_BUNDLE_ID), {
        waitMs: _utils.SAFARI_STARTUP_TIMEOUT,
        intervalMs: 500
      });
    } catch (err) {
      throw new Error(`Safari cannot open '${url}' after ${timer.getDuration().asSeconds.toFixed(3)}s ` + `because of: ${err.message}`);
    }

    _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }

}

var _default = SimulatorXcode10;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTAuanMiXSwibmFtZXMiOlsiU2ltdWxhdG9yWGNvZGUxMCIsIlNpbXVsYXRvclhjb2RlOTMiLCJjb25zdHJ1Y3RvciIsInVkaWQiLCJ4Y29kZVZlcnNpb24iLCJpc0FwcEluc3RhbGxlZCIsImJ1bmRsZUlkIiwiYXBwQ29udGFpbmVyIiwic2ltY3RsIiwiZ2V0QXBwQ29udGFpbmVyIiwiZW5kc1dpdGgiLCJmcyIsImV4aXN0cyIsImVyciIsImluZm8iLCJhcHBJbmZvIiwiaW5jbHVkZXMiLCJpZ24iLCJvcGVuVXJsIiwidXJsIiwiaXNSdW5uaW5nIiwiRXJyb3IiLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwic3RhcnQiLCJwcyIsInNvbWUiLCJuYW1lIiwiTU9CSUxFX1NBRkFSSV9CVU5ETEVfSUQiLCJ3YWl0TXMiLCJTQUZBUklfU1RBUlRVUF9USU1FT1VUIiwiaW50ZXJ2YWxNcyIsImdldER1cmF0aW9uIiwiYXNTZWNvbmRzIiwidG9GaXhlZCIsIm1lc3NhZ2UiLCJsb2ciLCJkZWJ1ZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxnQkFBTixTQUErQkMsdUJBQS9CLENBQWdEO0FBQzlDQyxFQUFBQSxXQUFXLENBQUVDLElBQUYsRUFBUUMsWUFBUixFQUFzQjtBQUMvQixVQUFNRCxJQUFOLEVBQVlDLFlBQVo7QUFDRDs7QUFTRCxRQUFNQyxjQUFOLENBQXNCQyxRQUF0QixFQUFnQztBQUM5QixRQUFJO0FBQ0YsWUFBTUMsWUFBWSxHQUFHLE1BQU0sS0FBS0MsTUFBTCxDQUFZQyxlQUFaLENBQTRCSCxRQUE1QixDQUEzQjs7QUFDQSxVQUFJLENBQUNDLFlBQVksQ0FBQ0csUUFBYixDQUFzQixNQUF0QixDQUFMLEVBQW9DO0FBQ2xDLGVBQU8sS0FBUDtBQUNEOztBQUNELGFBQU8sTUFBTUMsa0JBQUdDLE1BQUgsQ0FBVUwsWUFBVixDQUFiO0FBQ0QsS0FORCxDQU1FLE9BQU9NLEdBQVAsRUFBWTtBQUlaLFVBQUk7QUFDRixjQUFNQyxJQUFJLEdBQUcsTUFBTSxLQUFLTixNQUFMLENBQVlPLE9BQVosQ0FBb0JULFFBQXBCLENBQW5CO0FBQ0EsZUFBT1EsSUFBSSxDQUFDRSxRQUFMLENBQWMsaUJBQWQsQ0FBUDtBQUNELE9BSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVksQ0FBRTtBQUNqQjs7QUFDRCxXQUFPLEtBQVA7QUFDRDs7QUFLRCxRQUFNQyxPQUFOLENBQWVDLEdBQWYsRUFBb0I7QUFDbEIsUUFBSSxFQUFDLE1BQU0sS0FBS0MsU0FBTCxFQUFQLENBQUosRUFBNkI7QUFDM0IsWUFBTSxJQUFJQyxLQUFKLENBQVcsa0JBQWlCRixHQUFJLHlDQUFoQyxDQUFOO0FBQ0Q7O0FBQ0QsVUFBTUcsS0FBSyxHQUFHLElBQUlDLHNCQUFPQyxLQUFYLEdBQW1CQyxLQUFuQixFQUFkO0FBQ0EsVUFBTSxLQUFLakIsTUFBTCxDQUFZVSxPQUFaLENBQW9CQyxHQUFwQixDQUFOOztBQUNBLFFBQUk7QUFDRixZQUFNLGdDQUNKLFlBQVksQ0FBQyxNQUFNLEtBQUtPLEVBQUwsRUFBUCxFQUFrQkMsSUFBbEIsQ0FBdUIsQ0FBQztBQUFDQyxRQUFBQTtBQUFELE9BQUQsS0FBWUEsSUFBSSxLQUFLQyw4QkFBNUMsQ0FEUixFQUM4RTtBQUNoRkMsUUFBQUEsTUFBTSxFQUFFQyw2QkFEd0U7QUFFaEZDLFFBQUFBLFVBQVUsRUFBRTtBQUZvRSxPQUQ5RSxDQUFOO0FBS0QsS0FORCxDQU1FLE9BQU9uQixHQUFQLEVBQVk7QUFDWixZQUFNLElBQUlRLEtBQUosQ0FBVyx1QkFBc0JGLEdBQUksV0FBVUcsS0FBSyxDQUFDVyxXQUFOLEdBQW9CQyxTQUFwQixDQUE4QkMsT0FBOUIsQ0FBc0MsQ0FBdEMsQ0FBeUMsSUFBOUUsR0FDYixlQUFjdEIsR0FBRyxDQUFDdUIsT0FBUSxFQUR2QixDQUFOO0FBRUQ7O0FBQ0RDLG9CQUFJQyxLQUFKLENBQVcsK0JBQThCbkIsR0FBSSxRQUFPRyxLQUFLLENBQUNXLFdBQU4sR0FBb0JDLFNBQXBCLENBQThCQyxPQUE5QixDQUFzQyxDQUF0QyxDQUF5QyxHQUE3RjtBQUNEOztBQW5ENkM7O2VBc0RqQ25DLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlOTMgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOS4zJztcbmltcG9ydCB7IGZzLCB0aW1pbmcgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgTU9CSUxFX1NBRkFSSV9CVU5ETEVfSUQsIFNBRkFSSV9TVEFSVFVQX1RJTUVPVVQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlMTAgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTkzIHtcbiAgY29uc3RydWN0b3IgKHVkaWQsIHhjb2RlVmVyc2lvbikge1xuICAgIHN1cGVyKHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHdoZXRoZXIgdGhlIHBhcnRpY3VsYXIgYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkIG9uIFNpbXVsYXRvci5cbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZC5cbiAgICovXG4gIGFzeW5jIGlzQXBwSW5zdGFsbGVkIChidW5kbGVJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcHBDb250YWluZXIgPSBhd2FpdCB0aGlzLnNpbWN0bC5nZXRBcHBDb250YWluZXIoYnVuZGxlSWQpO1xuICAgICAgaWYgKCFhcHBDb250YWluZXIuZW5kc1dpdGgoJy5hcHAnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKGFwcENvbnRhaW5lcik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBnZXRfYXBwX2NvbnRhaW5lciBzdWJjb21tYW5kIGZhaWxzIGZvciBzeXN0ZW0gYXBwbGljYXRpb25zLFxuICAgICAgLy8gc28gd2UgdHJ5IHRoZSBoaWRkZW4gYXBwaW5mbyBzdWJjb21tYW5kLCB3aGljaCBwcmludHMgY29ycmVjdCBpbmZvIGZvclxuICAgICAgLy8gc3lzdGVtL2hpZGRlbiBhcHBzXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgdGhpcy5zaW1jdGwuYXBwSW5mbyhidW5kbGVJZCk7XG4gICAgICAgIHJldHVybiBpbmZvLmluY2x1ZGVzKCdBcHBsaWNhdGlvblR5cGUnKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgb3BlblVybCAodXJsKSB7XG4gICAgaWYgKCFhd2FpdCB0aGlzLmlzUnVubmluZygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIG9wZW4gJyR7dXJsfScsIGJ1dCBTaW11bGF0b3IgaXMgbm90IGluIEJvb3RlZCBzdGF0ZWApO1xuICAgIH1cbiAgICBjb25zdCB0aW1lciA9IG5ldyB0aW1pbmcuVGltZXIoKS5zdGFydCgpO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLm9wZW5VcmwodXJsKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihcbiAgICAgICAgYXN5bmMgKCkgPT4gKGF3YWl0IHRoaXMucHMoKSkuc29tZSgoe25hbWV9KSA9PiBuYW1lID09PSBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRCksIHtcbiAgICAgICAgICB3YWl0TXM6IFNBRkFSSV9TVEFSVFVQX1RJTUVPVVQsXG4gICAgICAgICAgaW50ZXJ2YWxNczogNTAwLFxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2FmYXJpIGNhbm5vdCBvcGVuICcke3VybH0nIGFmdGVyICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc1NlY29uZHMudG9GaXhlZCgzKX1zIGAgK1xuICAgICAgICBgYmVjYXVzZSBvZjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBTYWZhcmkgc3VjY2Vzc2Z1bGx5IG9wZW5lZCAnJHt1cmx9JyBpbiAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzLnRvRml4ZWQoMyl9c2ApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlMTA7XG4iXSwiZmlsZSI6ImxpYi9zaW11bGF0b3IteGNvZGUtMTAuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
