"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-11"));

class SimulatorXcode11_4 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this._locationMenu = 'Features';
  }

  async setAppearance(value) {
    await this.simctl.setAppearance(_lodash.default.toLower(value));
  }

  async getAppearance() {
    return await this.simctl.getAppearance();
  }

  async addCertificate(payload, opts = {}) {
    const {
      isRoot = true
    } = opts;
    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';
    await this.simctl[methodName](payload, {
      raw: true
    });
    return true;
  }

  async pushNotification(payload) {
    await this.simctl.pushNotification(payload);
  }

  async setPermissions(bundleId, permissionsMapping) {
    return await super.setPermissions(bundleId, permissionsMapping);
  }

  async clearKeychains() {
    await this.simctl.resetKeychain();
  }

  async launchWindow(isUiClientRunning, opts) {
    if (!isUiClientRunning) {
      await this.startUIClient(opts);
    }

    await this.boot();
  }

  async enableCalendarAccess(bundleID) {
    await this.simctl.grantPermission(bundleID, 'calendar');
  }

  async disableCalendarAccess(bundleID) {
    await this.simctl.revokePermission(bundleID, 'calendar');
  }

}

var _default = SimulatorXcode11_4;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTEuNC5qcyJdLCJuYW1lcyI6WyJTaW11bGF0b3JYY29kZTExXzQiLCJTaW11bGF0b3JYY29kZTExIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwieGNvZGVWZXJzaW9uIiwiX2xvY2F0aW9uTWVudSIsInNldEFwcGVhcmFuY2UiLCJ2YWx1ZSIsInNpbWN0bCIsIl8iLCJ0b0xvd2VyIiwiZ2V0QXBwZWFyYW5jZSIsImFkZENlcnRpZmljYXRlIiwicGF5bG9hZCIsIm9wdHMiLCJpc1Jvb3QiLCJtZXRob2ROYW1lIiwicmF3IiwicHVzaE5vdGlmaWNhdGlvbiIsInNldFBlcm1pc3Npb25zIiwiYnVuZGxlSWQiLCJwZXJtaXNzaW9uc01hcHBpbmciLCJjbGVhcktleWNoYWlucyIsInJlc2V0S2V5Y2hhaW4iLCJsYXVuY2hXaW5kb3ciLCJpc1VpQ2xpZW50UnVubmluZyIsInN0YXJ0VUlDbGllbnQiLCJib290IiwiZW5hYmxlQ2FsZW5kYXJBY2Nlc3MiLCJidW5kbGVJRCIsImdyYW50UGVybWlzc2lvbiIsImRpc2FibGVDYWxlbmRhckFjY2VzcyIsInJldm9rZVBlcm1pc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsa0JBQU4sU0FBaUNDLHVCQUFqQyxDQUFrRDtBQUNoREMsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7QUFDL0IsVUFBTUQsSUFBTixFQUFZQyxZQUFaO0FBSUEsU0FBS0MsYUFBTCxHQUFxQixVQUFyQjtBQUNEOztBQVlELFFBQU1DLGFBQU4sQ0FBcUJDLEtBQXJCLEVBQTRCO0FBQzFCLFVBQU0sS0FBS0MsTUFBTCxDQUFZRixhQUFaLENBQTBCRyxnQkFBRUMsT0FBRixDQUFVSCxLQUFWLENBQTFCLENBQU47QUFDRDs7QUFhRCxRQUFNSSxhQUFOLEdBQXVCO0FBQ3JCLFdBQU8sTUFBTSxLQUFLSCxNQUFMLENBQVlHLGFBQVosRUFBYjtBQUNEOztBQWtCRCxRQUFNQyxjQUFOLENBQXNCQyxPQUF0QixFQUErQkMsSUFBSSxHQUFHLEVBQXRDLEVBQTBDO0FBQ3hDLFVBQU07QUFDSkMsTUFBQUEsTUFBTSxHQUFHO0FBREwsUUFFRkQsSUFGSjtBQUdBLFVBQU1FLFVBQVUsR0FBR0QsTUFBTSxHQUFHLG9CQUFILEdBQTBCLGdCQUFuRDtBQUNBLFVBQU0sS0FBS1AsTUFBTCxDQUFZUSxVQUFaLEVBQXdCSCxPQUF4QixFQUFpQztBQUFDSSxNQUFBQSxHQUFHLEVBQUU7QUFBTixLQUFqQyxDQUFOO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBb0JELFFBQU1DLGdCQUFOLENBQXdCTCxPQUF4QixFQUFpQztBQUMvQixVQUFNLEtBQUtMLE1BQUwsQ0FBWVUsZ0JBQVosQ0FBNkJMLE9BQTdCLENBQU47QUFDRDs7QUFLRCxRQUFNTSxjQUFOLENBQXNCQyxRQUF0QixFQUFnQ0Msa0JBQWhDLEVBQW9EO0FBQ2xELFdBQU8sTUFBTSxNQUFNRixjQUFOLENBQXFCQyxRQUFyQixFQUErQkMsa0JBQS9CLENBQWI7QUFLRDs7QUFLRCxRQUFNQyxjQUFOLEdBQXdCO0FBQ3RCLFVBQU0sS0FBS2QsTUFBTCxDQUFZZSxhQUFaLEVBQU47QUFDRDs7QUFNRCxRQUFNQyxZQUFOLENBQW9CQyxpQkFBcEIsRUFBdUNYLElBQXZDLEVBQTZDO0FBRzNDLFFBQUksQ0FBQ1csaUJBQUwsRUFBd0I7QUFDdEIsWUFBTSxLQUFLQyxhQUFMLENBQW1CWixJQUFuQixDQUFOO0FBQ0Q7O0FBQ0QsVUFBTSxLQUFLYSxJQUFMLEVBQU47QUFDRDs7QUFNRCxRQUFNQyxvQkFBTixDQUE0QkMsUUFBNUIsRUFBc0M7QUFDcEMsVUFBTSxLQUFLckIsTUFBTCxDQUFZc0IsZUFBWixDQUE0QkQsUUFBNUIsRUFBc0MsVUFBdEMsQ0FBTjtBQUNEOztBQU1ELFFBQU1FLHFCQUFOLENBQTZCRixRQUE3QixFQUF1QztBQUNyQyxVQUFNLEtBQUtyQixNQUFMLENBQVl3QixnQkFBWixDQUE2QkgsUUFBN0IsRUFBdUMsVUFBdkMsQ0FBTjtBQUNEOztBQWxJK0M7O2VBdUluQzdCLGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBTaW11bGF0b3JYY29kZTExIGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTExJztcblxuY2xhc3MgU2ltdWxhdG9yWGNvZGUxMV80IGV4dGVuZHMgU2ltdWxhdG9yWGNvZGUxMSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCB4Y29kZVZlcnNpb24pIHtcbiAgICBzdXBlcih1ZGlkLCB4Y29kZVZlcnNpb24pO1xuXG4gICAgLy8gZm9yIHNldHRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIEFwcGxlU2NyaXB0LCB0aGUgdG9wLWxldmVsIG1lbnUgdGhyb3VnaCB3aGljaFxuICAgIC8vIHRoZSAnTG9jYXRpb24nIG9wdGlvbiBpcyBmb3VuZFxuICAgIHRoaXMuX2xvY2F0aW9uTWVudSA9ICdGZWF0dXJlcyc7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIFNldHMgVUkgYXBwZWFyYW5jZSBzdHlsZS5cbiAgICogVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSBib290ZWQgc2ltdWxhdG9yLlxuICAgKlxuICAgKiBAc2luY2UgWGNvZGUgU0RLIDExLjRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIG9uZSBvZiBwb3NzaWJsZSBhcHBlYXJhbmNlIHZhbHVlczpcbiAgICogLSBkYXJrOiB0byBzd2l0Y2ggdG8gdGhlIERhcmsgbW9kZVxuICAgKiAtIGxpZ2h0OiB0byBzd2l0Y2ggdG8gdGhlIExpZ2h0IG1vZGVcbiAgICovXG4gIGFzeW5jIHNldEFwcGVhcmFuY2UgKHZhbHVlKSB7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwuc2V0QXBwZWFyYW5jZShfLnRvTG93ZXIodmFsdWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogR2V0cyB0aGUgY3VycmVudCBVSSBhcHBlYXJhbmNlIHN0eWxlXG4gICAqIFRoaXMgZnVuY3Rpb24gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgYm9vdGVkIHNpbXVsYXRvci5cbiAgICpcbiAgICogQHNpbmNlIFhjb2RlIFNESyAxMS40XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBjdXJyZW50IFVJIGFwcGVhcmFuY2Ugc3R5bGUuXG4gICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAqIC0gZGFyazogdG8gc3dpdGNoIHRvIHRoZSBEYXJrIG1vZGVcbiAgICogLSBsaWdodDogdG8gc3dpdGNoIHRvIHRoZSBMaWdodCBtb2RlXG4gICAqL1xuICBhc3luYyBnZXRBcHBlYXJhbmNlICgpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zaW1jdGwuZ2V0QXBwZWFyYW5jZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IENlcnRpZmljYXRlT3B0aW9uc1xuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzUm9vdCBbdHJ1ZV0gLSBXaGV0aGVyIHRvIGluc3RhbGwgdGhlIGdpdmVuXG4gICAqIGNlcnRpZmljYXRlIGludG8gdGhlIFRydXN0ZWQgUm9vdCBzdG9yZSAoYHRydWVgKSBvciB0byB0aGUga2V5Y2hhaW5cbiAgICogKGBmYWxzZWApXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQWRkcyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgdG8gdGhlIGJvb3RlZCBzaW11bGF0b3IuXG4gICAqIFRoZSBzaW11bGF0b3IgY291bGQgYmUgaW4gYm90aCBydW5uaW5nIGFuZCBzaHV0ZG93biBzdGF0ZXNcbiAgICogaW4gb3JkZXIgZm9yIHRoaXMgbWV0aG9kIHRvIHJ1biBhcyBleHBlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBheWxvYWQgdGhlIGNvbnRlbnQgb2YgdGhlIFBFTSBjZXJ0aWZpY2F0ZVxuICAgKiBAcGFyYW0ge0NlcnRpZmljYXRlT3B0aW9uc30gb3B0c1xuICAgKi9cbiAgYXN5bmMgYWRkQ2VydGlmaWNhdGUgKHBheWxvYWQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzUm9vdCA9IHRydWUsXG4gICAgfSA9IG9wdHM7XG4gICAgY29uc3QgbWV0aG9kTmFtZSA9IGlzUm9vdCA/ICdhZGRSb290Q2VydGlmaWNhdGUnIDogJ2FkZENlcnRpZmljYXRlJztcbiAgICBhd2FpdCB0aGlzLnNpbWN0bFttZXRob2ROYW1lXShwYXlsb2FkLCB7cmF3OiB0cnVlfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIFNpbXVsYXRlcyBwdXNoIG5vdGlmaWNhdGlvbiBkZWxpdmVyeSB0byB0aGUgYm9vdGVkIHNpbXVsYXRvclxuICAgKlxuICAgKiBAc2luY2UgWGNvZGUgU0RLIDExLjRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgLSBUaGUgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIEFwcGxlIHB1c2ggbm90aWZpY2F0aW9uIGNvbnRlbnQuXG4gICAqIEl0IG11c3QgY29udGFpbiBhIHRvcC1sZXZlbCBcIlNpbXVsYXRvciBUYXJnZXQgQnVuZGxlXCIga2V5IHdpdGggYSBzdHJpbmcgdmFsdWUgbWF0Y2hpbmdcbiAgICogdGhlIHRhcmdldCBhcHBsaWNhdGlvbuKAmHMgYnVuZGxlIGlkZW50aWZpZXIgYW5kIFwiYXBzXCIga2V5IHdpdGggdmFsaWQgQXBwbGUgUHVzaCBOb3RpZmljYXRpb24gdmFsdWVzLlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICoge1xuICAgKiAgIFwiU2ltdWxhdG9yIFRhcmdldCBCdW5kbGVcIjogXCJjb20uYXBwbGUuUHJlZmVyZW5jZXNcIixcbiAgICogICBcImFwc1wiOiB7XG4gICAqICAgICBcImFsZXJ0XCI6IFwiVGhpcyBpcyBhIHNpbXVsYXRlZCBub3RpZmljYXRpb24hXCIsXG4gICAqICAgICBcImJhZGdlXCI6IDMsXG4gICAqICAgICBcInNvdW5kXCI6IFwiZGVmYXVsdFwiXG4gICAqICAgfVxuICAgKiB9XG4gICAqL1xuICBhc3luYyBwdXNoTm90aWZpY2F0aW9uIChwYXlsb2FkKSB7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwucHVzaE5vdGlmaWNhdGlvbihwYXlsb2FkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIHNldFBlcm1pc3Npb25zIChidW5kbGVJZCwgcGVybWlzc2lvbnNNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLnNldFBlcm1pc3Npb25zKGJ1bmRsZUlkLCBwZXJtaXNzaW9uc01hcHBpbmcpO1xuXG4gICAgLy8gVE9ETzogU3dpdGNoIHRvIGBzaW1jdGwgcHJpdmFjeWAgY2FsbCBhZnRlciBBcHBsZVxuICAgIC8vIGZpeGVzIHRoZSBjb21tYW5kIChodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvMTQzNTUpXG4gICAgLy8gU291cmNlIFBSOiBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS1pb3Mtc2ltdWxhdG9yL3B1bGwvMjc5XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBjbGVhcktleWNoYWlucyAoKSB7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwucmVzZXRLZXljaGFpbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqIEBvdmVycmlkZVxuICAgKiAqL1xuICBhc3luYyBsYXVuY2hXaW5kb3cgKGlzVWlDbGllbnRSdW5uaW5nLCBvcHRzKSB7XG4gICAgLy8gSW4geGNvZGUgMTEuNCwgVUkgQ2xpZW50IG11c3QgYmUgZmlyc3QgbGF1bmNoZWQsIG90aGVyd2lzZVxuICAgIC8vIHNpbSB3aW5kb3cgc3RheXMgbWluaW1pemVkXG4gICAgaWYgKCFpc1VpQ2xpZW50UnVubmluZykge1xuICAgICAgYXdhaXQgdGhpcy5zdGFydFVJQ2xpZW50KG9wdHMpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmJvb3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGVuYWJsZUNhbGVuZGFyQWNjZXNzIChidW5kbGVJRCkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLmdyYW50UGVybWlzc2lvbihidW5kbGVJRCwgJ2NhbGVuZGFyJyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBkaXNhYmxlQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwucmV2b2tlUGVybWlzc2lvbihidW5kbGVJRCwgJ2NhbGVuZGFyJyk7XG4gIH1cblxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlMTFfNDtcbiJdLCJmaWxlIjoibGliL3NpbXVsYXRvci14Y29kZS0xMS40LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
