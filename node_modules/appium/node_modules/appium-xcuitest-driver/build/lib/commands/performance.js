"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _asyncbox = require("asyncbox");

var _os = _interopRequireDefault(require("os"));

const commands = {};
exports.commands = commands;
const PERF_RECORD_FEAT_NAME = 'perf_record';
const PERF_RECORD_SECURITY_MESSAGE = 'Performance measurement requires relaxing security for simulator. ' + `Please set '--relaxed-security' or '--allow-insecure' with '${PERF_RECORD_FEAT_NAME}' ` + 'referencing https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.';
const DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;
const STOP_TIMEOUT_MS = 3 * 60 * 1000;
const STARTUP_TIMEOUT_MS = 60 * 1000;
const DEFAULT_PROFILE_NAME = 'Activity Monitor';
const DEFAULT_EXT = 'trace';
const DEFAULT_PID = 'current';
const INSTRUMENTS = 'instruments';
const XCRUN = 'xcrun';
const XCTRACE = 'xctrace';

async function requireXctrace() {
  let xcrunPath;

  try {
    xcrunPath = await _appiumSupport.fs.which(XCRUN);
  } catch (e) {
    _logger.default.errorAndThrow(`${XCRUN} has not been found in PATH. ` + `Please make sure XCode development tools are installed`);
  }

  try {
    await (0, _teen_process.exec)(xcrunPath, [XCTRACE, 'help']);
  } catch (e) {
    _logger.default.errorAndThrow(`${XCTRACE} is not available for the active Xcode version. ` + `Please make sure XCode is up to date. Original error: ${e.stderr || e.message}`);
  }

  return xcrunPath;
}

async function requireInstruments() {
  try {
    return await _appiumSupport.fs.which(INSTRUMENTS);
  } catch (e) {
    _logger.default.errorAndThrow(`${INSTRUMENTS} has not been found in PATH. ` + `Please make sure XCode development tools are installed`);
  }
}

class PerfRecorder {
  constructor(reportPath, udid, opts = {}) {
    this._process = null;
    this._reportPath = reportPath;
    this._zippedReportPath = '';
    this._timeout = opts.timeout && opts.timeout > 0 ? opts.timeout : DEFAULT_TIMEOUT_MS;
    this._profileName = opts.profileName || DEFAULT_PROFILE_NAME;
    this._pid = opts.pid;
    this._udid = udid;
    this._logger = _appiumSupport.logger.getLogger(`${_lodash.default.truncate(this._profileName, {
      length: 10
    })}@${this._udid.substring(0, 8)}`);
    this._archivePromise = null;
  }

  get profileName() {
    return this._profileName;
  }

  async getOriginalReportPath() {
    return (await _appiumSupport.fs.exists(this._reportPath)) ? this._reportPath : '';
  }

  async getZippedReportPath() {
    if (await _appiumSupport.fs.exists(this._zippedReportPath)) {
      return this._zippedReportPath;
    }

    const originalReportPath = await this.getOriginalReportPath();

    if (!originalReportPath) {
      return '';
    }

    const zippedReportPath = originalReportPath.replace(`.${DEFAULT_EXT}`, '.zip');

    if (!this._archivePromise) {
      this._archivePromise = _appiumSupport.zip.toArchive(zippedReportPath, {
        cwd: originalReportPath
      });
    }

    await this._archivePromise;
    this._zippedReportPath = zippedReportPath;
    return this._zippedReportPath;
  }

  isRunning() {
    var _this$_process;

    return !!((_this$_process = this._process) === null || _this$_process === void 0 ? void 0 : _this$_process.isRunning);
  }

  async _enforceTermination() {
    if (this._process && this.isRunning()) {
      this._logger.debug('Force-stopping the currently running perf recording');

      try {
        await this._process.stop('SIGKILL');
      } catch (ign) {}
    }

    this._process = null;

    if (this._archivePromise) {
      this._archivePromise.then(() => _appiumSupport.fs.rimraf(this._zippedReportPath)).finally(() => {
        this._archivePromise = null;
      }).catch(() => {});
    } else {
      await _appiumSupport.fs.rimraf(this._zippedReportPath);
    }

    await _appiumSupport.fs.rimraf(this._reportPath);
    return '';
  }

  async start() {
    let binaryPath;

    try {
      binaryPath = await requireXctrace();
    } catch (e) {
      _logger.default.debug(e.message);

      _logger.default.info(`Defaulting to ${INSTRUMENTS} usage`);

      binaryPath = await requireInstruments();
    }

    const args = [];
    const toolName = _path.default.basename(binaryPath) === XCRUN ? XCTRACE : INSTRUMENTS;

    if (toolName === XCTRACE) {
      args.push(XCTRACE, 'record', '--device', this._udid, '--template', this._profileName, '--output', this._reportPath, '--time-limit', `${this._timeout}ms`);

      if (this._pid) {
        args.push('--attach', `${this._pid}`);
      } else {
        args.push('--all-processes');
      }
    } else {
      args.push('-w', this._udid, '-t', this._profileName, '-D', this._reportPath, '-l', `${this._timeout}`);

      if (this._pid) {
        args.push('-p', `${this._pid}`);
      }
    }

    const fullCmd = [binaryPath, ...args];
    this._process = new _teen_process.SubProcess(fullCmd[0], fullCmd.slice(1));
    this._archivePromise = null;

    this._logger.debug(`Starting performance recording: ${_appiumSupport.util.quote(fullCmd)}`);

    this._process.on('output', (stdout, stderr) => {
      if (_lodash.default.trim(stdout || stderr)) {
        this._logger.debug(`[${toolName}] ${stdout || stderr}`);
      }
    });

    this._process.once('exit', async (code, signal) => {
      this._process = null;

      if (code === 0) {
        this._logger.debug('Performance recording exited without errors');

        try {
          await this.getZippedReportPath();
        } catch (e) {
          this._logger.warn(e);
        }
      } else {
        await this._enforceTermination();

        this._logger.warn(`Performance recording exited with error code ${code}, signal ${signal}`);
      }
    });

    await this._process.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (await this.getOriginalReportPath()) {
          return true;
        }

        if (!this._process) {
          throw new Error(`${toolName} process died unexpectedly`);
        }

        return false;
      }, {
        waitMs: STARTUP_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (e) {
      await this._enforceTermination();
      const listProfilesCommand = toolName === XCTRACE ? `${XCRUN} ${XCTRACE} list templates` : `${INSTRUMENTS} -s`;

      this._logger.errorAndThrow(`There is no .${DEFAULT_EXT} file found for performance profile ` + `'${this._profileName}'. Make sure the profile is supported on this device. ` + `You could use '${listProfilesCommand}' command to see the list of all available profiles. ` + `Check the server log for more details`);
    }

    this._logger.info(`The performance recording has started. Will timeout in ${this._timeout}ms`);
  }

  async stop(force = false) {
    if (force) {
      return await this._enforceTermination();
    }

    if (!this.isRunning()) {
      this._logger.debug('Performance recording is not running. Returning the recent result');

      return await this.getZippedReportPath();
    }

    try {
      await this._process.stop('SIGINT', STOP_TIMEOUT_MS);
    } catch (e) {
      this._logger.errorAndThrow(`Performance recording has failed to exit after ${STOP_TIMEOUT_MS}ms`);
    }

    return await this.getZippedReportPath();
  }

}

commands.mobileStartPerfRecord = async function mobileStartPerfRecord(opts = {}) {
  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {
    _logger.default.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);
  }

  const {
    timeout = DEFAULT_TIMEOUT_MS,
    profileName = DEFAULT_PROFILE_NAME,
    pid
  } = opts;

  if (!_lodash.default.isEmpty(this._perfRecorders)) {
    const recorders = this._perfRecorders.filter(x => x.profileName === profileName);

    if (!_lodash.default.isEmpty(recorders)) {
      for (const recorder of recorders) {
        if (recorder.isRunning()) {
          _logger.default.debug(`Performance recorder for '${profileName}' on device '${this.opts.device.udid}' ` + ` is already running. Doing nothing`);

          return;
        }

        _lodash.default.pull(this._perfRecorders, recorder);

        await recorder.stop(true);
      }
    }
  }

  const reportPath = _path.default.resolve(_os.default.tmpdir(), `appium_perf_${profileName.replace(/\W/g, '_')}_${_appiumSupport.util.uuidV4().substring(0, 8)}.${DEFAULT_EXT}`);

  let realPid;

  if (pid) {
    if (_lodash.default.toLower(pid) === DEFAULT_PID) {
      const appInfo = await this.proxyCommand('/wda/activeAppInfo', 'GET');
      realPid = appInfo.pid;
    } else {
      realPid = pid;
    }
  }

  const recorder = new PerfRecorder(reportPath, this.opts.device.udid, {
    timeout: parseInt(timeout, 10),
    profileName,
    pid: parseInt(realPid, 10)
  });
  await recorder.start();
  this._perfRecorders = [...(this._perfRecorders || []), recorder];
};

commands.mobileStopPerfRecord = async function mobileStopPerfRecord(opts = {}) {
  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {
    _logger.default.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);
  }

  if (_lodash.default.isEmpty(this._perfRecorders)) {
    _logger.default.info('No performance recorders have been started. Doing nothing');

    return '';
  }

  const {
    profileName = DEFAULT_PROFILE_NAME,
    remotePath
  } = opts;

  const recorders = this._perfRecorders.filter(x => x.profileName === profileName);

  if (_lodash.default.isEmpty(recorders)) {
    _logger.default.errorAndThrow(`There are no records for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. Have you started the profiling before?`);
  }

  const resultPath = await recorders[0].stop();

  if (!(await _appiumSupport.fs.exists(resultPath))) {
    _logger.default.errorAndThrow(`There is no .${DEFAULT_EXT} file found for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. Make sure the selected profile is supported on this device`);
  }

  return await (0, _utils.encodeBase64OrUpload)(resultPath, remotePath, opts);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wZXJmb3JtYW5jZS5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIlBFUkZfUkVDT1JEX0ZFQVRfTkFNRSIsIlBFUkZfUkVDT1JEX1NFQ1VSSVRZX01FU1NBR0UiLCJERUZBVUxUX1RJTUVPVVRfTVMiLCJTVE9QX1RJTUVPVVRfTVMiLCJTVEFSVFVQX1RJTUVPVVRfTVMiLCJERUZBVUxUX1BST0ZJTEVfTkFNRSIsIkRFRkFVTFRfRVhUIiwiREVGQVVMVF9QSUQiLCJJTlNUUlVNRU5UUyIsIlhDUlVOIiwiWENUUkFDRSIsInJlcXVpcmVYY3RyYWNlIiwieGNydW5QYXRoIiwiZnMiLCJ3aGljaCIsImUiLCJsb2ciLCJlcnJvckFuZFRocm93Iiwic3RkZXJyIiwibWVzc2FnZSIsInJlcXVpcmVJbnN0cnVtZW50cyIsIlBlcmZSZWNvcmRlciIsImNvbnN0cnVjdG9yIiwicmVwb3J0UGF0aCIsInVkaWQiLCJvcHRzIiwiX3Byb2Nlc3MiLCJfcmVwb3J0UGF0aCIsIl96aXBwZWRSZXBvcnRQYXRoIiwiX3RpbWVvdXQiLCJ0aW1lb3V0IiwiX3Byb2ZpbGVOYW1lIiwicHJvZmlsZU5hbWUiLCJfcGlkIiwicGlkIiwiX3VkaWQiLCJfbG9nZ2VyIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiXyIsInRydW5jYXRlIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwiX2FyY2hpdmVQcm9taXNlIiwiZ2V0T3JpZ2luYWxSZXBvcnRQYXRoIiwiZXhpc3RzIiwiZ2V0WmlwcGVkUmVwb3J0UGF0aCIsIm9yaWdpbmFsUmVwb3J0UGF0aCIsInppcHBlZFJlcG9ydFBhdGgiLCJyZXBsYWNlIiwiemlwIiwidG9BcmNoaXZlIiwiY3dkIiwiaXNSdW5uaW5nIiwiX2VuZm9yY2VUZXJtaW5hdGlvbiIsImRlYnVnIiwic3RvcCIsImlnbiIsInRoZW4iLCJyaW1yYWYiLCJmaW5hbGx5IiwiY2F0Y2giLCJzdGFydCIsImJpbmFyeVBhdGgiLCJpbmZvIiwiYXJncyIsInRvb2xOYW1lIiwicGF0aCIsImJhc2VuYW1lIiwicHVzaCIsImZ1bGxDbWQiLCJTdWJQcm9jZXNzIiwic2xpY2UiLCJ1dGlsIiwicXVvdGUiLCJvbiIsInN0ZG91dCIsInRyaW0iLCJvbmNlIiwiY29kZSIsInNpZ25hbCIsIndhcm4iLCJFcnJvciIsIndhaXRNcyIsImludGVydmFsTXMiLCJsaXN0UHJvZmlsZXNDb21tYW5kIiwiZm9yY2UiLCJtb2JpbGVTdGFydFBlcmZSZWNvcmQiLCJpc0ZlYXR1cmVFbmFibGVkIiwiaXNSZWFsRGV2aWNlIiwiaXNFbXB0eSIsIl9wZXJmUmVjb3JkZXJzIiwicmVjb3JkZXJzIiwiZmlsdGVyIiwieCIsInJlY29yZGVyIiwiZGV2aWNlIiwicHVsbCIsInJlc29sdmUiLCJvcyIsInRtcGRpciIsInV1aWRWNCIsInJlYWxQaWQiLCJ0b0xvd2VyIiwiYXBwSW5mbyIsInByb3h5Q29tbWFuZCIsInBhcnNlSW50IiwibW9iaWxlU3RvcFBlcmZSZWNvcmQiLCJyZW1vdGVQYXRoIiwicmVzdWx0UGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7O0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsYUFBOUI7QUFDQSxNQUFNQyw0QkFBNEIsR0FBRyx1RUFDbEMsK0RBQThERCxxQkFBc0IsSUFEbEQsR0FFbkMsdUhBRkY7QUFHQSxNQUFNRSxrQkFBa0IsR0FBRyxJQUFJLEVBQUosR0FBUyxJQUFwQztBQUNBLE1BQU1DLGVBQWUsR0FBRyxJQUFJLEVBQUosR0FBUyxJQUFqQztBQUNBLE1BQU1DLGtCQUFrQixHQUFHLEtBQUssSUFBaEM7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxrQkFBN0I7QUFDQSxNQUFNQyxXQUFXLEdBQUcsT0FBcEI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsU0FBcEI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsYUFBcEI7QUFDQSxNQUFNQyxLQUFLLEdB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QUFKLENBQW1CLGdCQUFlWCxXQUFZLHdDQUF1QzBCLFdBQVksSUFBL0UsR0FDZixjQUFhLEtBQUtQLElBQUwsQ0FBVXVFLE1BQVYsQ0FBaUJ4RSxJQUFLLDhEQUR0QztBQUVEOztBQUVELFNBQU8sTUFBTSxpQ0FBcUJxRixVQUFyQixFQUFpQ0QsVUFBakMsRUFBNkNuRixJQUE3QyxDQUFiO0FBQ0QsQ0EzQkQ7O2VBK0JlMUIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCB6aXAsIGxvZ2dlciwgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IFN1YlByb2Nlc3MsIGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgZW5jb2RlQmFzZTY0T3JVcGxvYWQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuY29uc3QgUEVSRl9SRUNPUkRfRkVBVF9OQU1FID0gJ3BlcmZfcmVjb3JkJztcbmNvbnN0IFBFUkZfUkVDT1JEX1NFQ1VSSVRZX01FU1NBR0UgPSAnUGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQgcmVxdWlyZXMgcmVsYXhpbmcgc2VjdXJpdHkgZm9yIHNpbXVsYXRvci4gJyArXG4gIGBQbGVhc2Ugc2V0ICctLXJlbGF4ZWQtc2VjdXJpdHknIG9yICctLWFsbG93LWluc2VjdXJlJyB3aXRoICcke1BFUkZfUkVDT1JEX0ZFQVRfTkFNRX0nIGAgK1xuICAncmVmZXJlbmNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vYmxvYi9tYXN0ZXIvZG9jcy9lbi93cml0aW5nLXJ1bm5pbmctYXBwaXVtL3NlY3VyaXR5Lm1kIGZvciBtb3JlIGRldGFpbHMuJztcbmNvbnN0IERFRkFVTFRfVElNRU9VVF9NUyA9IDUgKiA2MCAqIDEwMDA7XG5jb25zdCBTVE9QX1RJTUVPVVRfTVMgPSAzICogNjAgKiAxMDAwO1xuY29uc3QgU1RBUlRVUF9USU1FT1VUX01TID0gNjAgKiAxMDAwO1xuY29uc3QgREVGQVVMVF9QUk9GSUxFX05BTUUgPSAnQWN0aXZpdHkgTW9uaXRvcic7XG5jb25zdCBERUZBVUxUX0VYVCA9ICd0cmFjZSc7XG5jb25zdCBERUZBVUxUX1BJRCA9ICdjdXJyZW50JztcbmNvbnN0IElOU1RSVU1FTlRTID0gJ2luc3RydW1lbnRzJztcbmNvbnN0IFhDUlVOID0gJ3hjcnVuJztcbmNvbnN0IFhDVFJBQ0UgPSAneGN0cmFjZSc7XG5cblxuYXN5bmMgZnVuY3Rpb24gcmVxdWlyZVhjdHJhY2UgKCkge1xuICBsZXQgeGNydW5QYXRoO1xuICB0cnkge1xuICAgIHhjcnVuUGF0aCA9IGF3YWl0IGZzLndoaWNoKFhDUlVOKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGAke1hDUlVOfSBoYXMgbm90IGJlZW4gZm91bmQgaW4gUEFUSC4gYCArXG4gICAgICBgUGxlYXNlIG1ha2Ugc3VyZSBYQ29kZSBkZXZlbG9wbWVudCB0b29scyBhcmUgaW5zdGFsbGVkYCk7XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKHhjcnVuUGF0aCwgW1hDVFJBQ0UsICdoZWxwJ10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYCR7WENUUkFDRX0gaXMgbm90IGF2YWlsYWJsZSBmb3IgdGhlIGFjdGl2ZSBYY29kZSB2ZXJzaW9uLiBgICtcbiAgICAgIGBQbGVhc2UgbWFrZSBzdXJlIFhDb2RlIGlzIHVwIHRvIGRhdGUuIE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4geGNydW5QYXRoO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXF1aXJlSW5zdHJ1bWVudHMgKCkge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBmcy53aGljaChJTlNUUlVNRU5UUyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgJHtJTlNUUlVNRU5UU30gaGFzIG5vdCBiZWVuIGZvdW5kIGluIFBBVEguIGAgK1xuICAgICAgYFBsZWFzZSBtYWtlIHN1cmUgWENvZGUgZGV2ZWxvcG1lbnQgdG9vbHMgYXJlIGluc3RhbGxlZGApO1xuICB9XG59XG5cblxuY2xhc3MgUGVyZlJlY29yZGVyIHtcbiAgY29uc3RydWN0b3IgKHJlcG9ydFBhdGgsIHVkaWQsIG9wdHMgPSB7fSkge1xuICAgIHRoaXMuX3Byb2Nlc3MgPSBudWxsO1xuICAgIHRoaXMuX3JlcG9ydFBhdGggPSByZXBvcnRQYXRoO1xuICAgIHRoaXMuX3ppcHBlZFJlcG9ydFBhdGggPSAnJztcbiAgICB0aGlzLl90aW1lb3V0ID0gKG9wdHMudGltZW91dCAmJiBvcHRzLnRpbWVvdXQgPiAwKSA/IG9wdHMudGltZW91dCA6IERFRkFVTFRfVElNRU9VVF9NUztcbiAgICB0aGlzLl9wcm9maWxlTmFtZSA9IG9wdHMucHJvZmlsZU5hbWUgfHwgREVGQVVMVF9QUk9GSUxFX05BTUU7XG4gICAgdGhpcy5fcGlkID0gb3B0cy5waWQ7XG4gICAgdGhpcy5fdWRpZCA9IHVkaWQ7XG4gICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyLmdldExvZ2dlcihcbiAgICAgIGAke18udHJ1bmNhdGUodGhpcy5fcHJvZmlsZU5hbWUsIHtsZW5ndGg6IDEwfSl9QCR7dGhpcy5fdWRpZC5zdWJzdHJpbmcoMCwgOCl9YCk7XG4gICAgdGhpcy5fYXJjaGl2ZVByb21pc2UgPSBudWxsO1xuICB9XG5cbiAgZ2V0IHByb2ZpbGVOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvZmlsZU5hbWU7XG4gIH1cblxuICBhc3luYyBnZXRPcmlnaW5hbFJlcG9ydFBhdGggKCkge1xuICAgIHJldHVybiAoYXdhaXQgZnMuZXhpc3RzKHRoaXMuX3JlcG9ydFBhdGgpKSA/IHRoaXMuX3JlcG9ydFBhdGggOiAnJztcbiAgfVxuXG4gIGFzeW5jIGdldFppcHBlZFJlcG9ydFBhdGggKCkge1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHModGhpcy5femlwcGVkUmVwb3J0UGF0aCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl96aXBwZWRSZXBvcnRQYXRoO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW5hbFJlcG9ydFBhdGggPSBhd2FpdCB0aGlzLmdldE9yaWdpbmFsUmVwb3J0UGF0aCgpO1xuICAgIGlmICghb3JpZ2luYWxSZXBvcnRQYXRoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IHppcHBlZFJlcG9ydFBhdGggPSBvcmlnaW5hbFJlcG9ydFBhdGgucmVwbGFjZShgLiR7REVGQVVMVF9FWFR9YCwgJy56aXAnKTtcbiAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgcG9zc2libGUgcmFjZSBjb25kaXRpb25zLCBiZWNhdXNlIHRoZSBhcmNoaXZlIG9wZXJhdGlvblxuICAgIC8vIGNvdWxkIGJlIHByZXR0eSB0aW1lLWludGVuc2l2ZVxuICAgIGlmICghdGhpcy5fYXJjaGl2ZVByb21pc2UpIHtcbiAgICAgIHRoaXMuX2FyY2hpdmVQcm9taXNlID0gemlwLnRvQXJjaGl2ZSh6aXBwZWRSZXBvcnRQYXRoLCB7XG4gICAgICAgIGN3ZDogb3JpZ2luYWxSZXBvcnRQYXRoLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuX2FyY2hpdmVQcm9taXNlO1xuICAgIHRoaXMuX3ppcHBlZFJlcG9ydFBhdGggPSB6aXBwZWRSZXBvcnRQYXRoO1xuICAgIHJldHVybiB0aGlzLl96aXBwZWRSZXBvcnRQYXRoO1xuICB9XG5cbiAgaXNSdW5uaW5nICgpIHtcbiAgICByZXR1cm4gISEodGhpcy5fcHJvY2Vzcz8uaXNSdW5uaW5nKTtcbiAgfVxuXG4gIGFzeW5jIF9lbmZvcmNlVGVybWluYXRpb24gKCkge1xuICAgIGlmICh0aGlzLl9wcm9jZXNzICYmIHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnRm9yY2Utc3RvcHBpbmcgdGhlIGN1cnJlbnRseSBydW5uaW5nIHBlcmYgcmVjb3JkaW5nJyk7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLl9wcm9jZXNzLnN0b3AoJ1NJR0tJTEwnKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICB9XG4gICAgdGhpcy5fcHJvY2VzcyA9IG51bGw7XG4gICAgaWYgKHRoaXMuX2FyY2hpdmVQcm9taXNlKSB7XG4gICAgICB0aGlzLl9hcmNoaXZlUHJvbWlzZVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuICAgICAgICAudGhlbigoKSA9PiBmcy5yaW1yYWYodGhpcy5femlwcGVkUmVwb3J0UGF0aCkpXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9hcmNoaXZlUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZih0aGlzLl96aXBwZWRSZXBvcnRQYXRoKTtcbiAgICB9XG4gICAgYXdhaXQgZnMucmltcmFmKHRoaXMuX3JlcG9ydFBhdGgpO1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0ICgpIHtcbiAgICBsZXQgYmluYXJ5UGF0aDtcbiAgICB0cnkge1xuICAgICAgYmluYXJ5UGF0aCA9IGF3YWl0IHJlcXVpcmVYY3RyYWNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLmRlYnVnKGUubWVzc2FnZSk7XG4gICAgICBsb2cuaW5mbyhgRGVmYXVsdGluZyB0byAke0lOU1RSVU1FTlRTfSB1c2FnZWApO1xuICAgICAgYmluYXJ5UGF0aCA9IGF3YWl0IHJlcXVpcmVJbnN0cnVtZW50cygpO1xuICAgIH1cblxuICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICBjb25zdCB0b29sTmFtZSA9IHBhdGguYmFzZW5hbWUoYmluYXJ5UGF0aCkgPT09IFhDUlVOID8gWENUUkFDRSA6IElOU1RSVU1FTlRTO1xuICAgIGlmICh0b29sTmFtZSA9PT0gWENUUkFDRSkge1xuICAgICAgYXJncy5wdXNoKFxuICAgICAgICBYQ1RSQUNFLCAncmVjb3JkJyxcbiAgICAgICAgJy0tZGV2aWNlJywgdGhpcy5fdWRpZCxcbiAgICAgICAgJy0tdGVtcGxhdGUnLCB0aGlzLl9wcm9maWxlTmFtZSxcbiAgICAgICAgJy0tb3V0cHV0JywgdGhpcy5fcmVwb3J0UGF0aCxcbiAgICAgICAgJy0tdGltZS1saW1pdCcsIGAke3RoaXMuX3RpbWVvdXR9bXNgLFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLl9waWQpIHtcbiAgICAgICAgYXJncy5wdXNoKCctLWF0dGFjaCcsIGAke3RoaXMuX3BpZH1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3MucHVzaCgnLS1hbGwtcHJvY2Vzc2VzJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGh0dHBzOi8vaGVscC5hcHBsZS5jb20vaW5zdHJ1bWVudHMvbWFjL2N1cnJlbnQvIy9kZXZiMTRmZmFhNVxuICAgICAgYXJncy5wdXNoKFxuICAgICAgICAnLXcnLCB0aGlzLl91ZGlkLFxuICAgICAgICAnLXQnLCB0aGlzLl9wcm9maWxlTmFtZSxcbiAgICAgICAgJy1EJywgdGhpcy5fcmVwb3J0UGF0aCxcbiAgICAgICAgJy1sJywgYCR7dGhpcy5fdGltZW91dH1gLFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLl9waWQpIHtcbiAgICAgICAgYXJncy5wdXNoKCctcCcsIGAke3RoaXMuX3BpZH1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZnVsbENtZCA9IFtiaW5hcnlQYXRoLCAuLi5hcmdzXTtcbiAgICB0aGlzLl9wcm9jZXNzID0gbmV3IFN1YlByb2Nlc3MoZnVsbENtZFswXSwgZnVsbENtZC5zbGljZSgxKSk7XG4gICAgdGhpcy5fYXJjaGl2ZVByb21pc2UgPSBudWxsO1xuICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgU3RhcnRpbmcgcGVyZm9ybWFuY2UgcmVjb3JkaW5nOiAke3V0aWwucXVvdGUoZnVsbENtZCl9YCk7XG4gICAgdGhpcy5fcHJvY2Vzcy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoXy50cmltKHN0ZG91dCB8fCBzdGRlcnIpKSB7XG4gICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgWyR7dG9vbE5hbWV9XSAke3N0ZG91dCB8fCBzdGRlcnJ9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fcHJvY2Vzcy5vbmNlKCdleGl0JywgYXN5bmMgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgdGhpcy5fcHJvY2VzcyA9IG51bGw7XG4gICAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJ1BlcmZvcm1hbmNlIHJlY29yZGluZyBleGl0ZWQgd2l0aG91dCBlcnJvcnMnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBjYWNoZSB6aXBwZWQgcmVwb3J0XG4gICAgICAgICAgYXdhaXQgdGhpcy5nZXRaaXBwZWRSZXBvcnRQYXRoKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLl9sb2dnZXIud2FybihlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fZW5mb3JjZVRlcm1pbmF0aW9uKCk7XG4gICAgICAgIHRoaXMuX2xvZ2dlci53YXJuKGBQZXJmb3JtYW5jZSByZWNvcmRpbmcgZXhpdGVkIHdpdGggZXJyb3IgY29kZSAke2NvZGV9LCBzaWduYWwgJHtzaWduYWx9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5fcHJvY2Vzcy5zdGFydCgwKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmdldE9yaWdpbmFsUmVwb3J0UGF0aCgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9wcm9jZXNzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Rvb2xOYW1lfSBwcm9jZXNzIGRpZWQgdW5leHBlY3RlZGx5YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSwge1xuICAgICAgICB3YWl0TXM6IFNUQVJUVVBfVElNRU9VVF9NUyxcbiAgICAgICAgaW50ZXJ2YWxNczogNTAwLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgdGhpcy5fZW5mb3JjZVRlcm1pbmF0aW9uKCk7XG4gICAgICBjb25zdCBsaXN0UHJvZmlsZXNDb21tYW5kID0gdG9vbE5hbWUgPT09IFhDVFJBQ0VcbiAgICAgICAgPyBgJHtYQ1JVTn0gJHtYQ1RSQUNFfSBsaXN0IHRlbXBsYXRlc2BcbiAgICAgICAgOiBgJHtJTlNUUlVNRU5UU30gLXNgO1xuICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yQW5kVGhyb3coYFRoZXJlIGlzIG5vIC4ke0RFRkFVTFRfRVhUfSBmaWxlIGZvdW5kIGZvciBwZXJmb3JtYW5jZSBwcm9maWxlIGAgK1xuICAgICAgICBgJyR7dGhpcy5fcHJvZmlsZU5hbWV9Jy4gTWFrZSBzdXJlIHRoZSBwcm9maWxlIGlzIHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZS4gYCArXG4gICAgICAgIGBZb3UgY291bGQgdXNlICcke2xpc3RQcm9maWxlc0NvbW1hbmR9JyBjb21tYW5kIHRvIHNlZSB0aGUgbGlzdCBvZiBhbGwgYXZhaWxhYmxlIHByb2ZpbGVzLiBgICtcbiAgICAgICAgYENoZWNrIHRoZSBzZXJ2ZXIgbG9nIGZvciBtb3JlIGRldGFpbHNgKTtcbiAgICB9XG4gICAgdGhpcy5fbG9nZ2VyLmluZm8oYFRoZSBwZXJmb3JtYW5jZSByZWNvcmRpbmcgaGFzIHN0YXJ0ZWQuIFdpbGwgdGltZW91dCBpbiAke3RoaXMuX3RpbWVvdXR9bXNgKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3AgKGZvcmNlID0gZmFsc2UpIHtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lbmZvcmNlVGVybWluYXRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnUGVyZm9ybWFuY2UgcmVjb3JkaW5nIGlzIG5vdCBydW5uaW5nLiBSZXR1cm5pbmcgdGhlIHJlY2VudCByZXN1bHQnKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFppcHBlZFJlcG9ydFBhdGgoKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5fcHJvY2Vzcy5zdG9wKCdTSUdJTlQnLCBTVE9QX1RJTUVPVVRfTVMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5lcnJvckFuZFRocm93KGBQZXJmb3JtYW5jZSByZWNvcmRpbmcgaGFzIGZhaWxlZCB0byBleGl0IGFmdGVyICR7U1RPUF9USU1FT1VUX01TfW1zYCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFppcHBlZFJlcG9ydFBhdGgoKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhcnRQZXJmUmVjb3JkT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P251bWJlcnxzdHJpbmd9IHRpbWVvdXQgWzMwMDAwMF0gLSBUaGUgbWF4aW11bSBjb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gcmVjb3JkIHRoZSBwcm9maWxpbmcgaW5mb3JtYXRpb24uXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHByb2ZpbGVOYW1lIFtBY3Rpdml0eSBNb25pdG9yXSAtIFRoZSBuYW1lIG9mIGV4aXN0aW5nIHBlcmZvcm1hbmNlIHByb2ZpbGUgdG8gYXBwbHkuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBhbHNvIGNvbnRhaW4gdGhlIGZ1bGwgcGF0aCB0byB0aGUgY2hvc2VuIHRlbXBsYXRlIG9uIHRoZSBzZXJ2ZXIgZmlsZSBzeXN0ZW0uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGUsIHRoYXQgbm90IGFsbCBwcm9maWxlcyBhcmUgc3VwcG9ydGVkIG9uIG1vYmlsZSBkZXZpY2VzLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfG51bWJlcn0gcGlkIC0gVGhlIElEIG9mIHRoZSBwcm9jZXNzIHRvIG1lYXN1cmUgdGhlIHBlcmZvcm1hbmNlIGZvci5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldCBpdCB0byBgY3VycmVudGAgaW4gb3JkZXIgdG8gbWVhc3VyZSB0aGUgcGVyZm9ybWFuY2Ugb2ZcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcm9jZXNzLCB3aGljaCBiZWxvbmdzIHRvIHRoZSBjdXJyZW50bHkgYWN0aXZlIGFwcGxpY2F0aW9uLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsIHByb2Nlc3NlcyBydW5uaW5nIG9uIHRoZSBkZXZpY2UgYXJlIG1lYXN1cmVkIGlmXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWQgaXMgdW5zZXQgKHRoZSBkZWZhdWx0IHNldHRpbmcpLlxuICovXG5cbi8qKlxuICogU3RhcnRzIHBlcmZvcm1hbmNlIHByb2ZpbGluZyBmb3IgdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICogUmVsYXhpbmcgc2VjdXJpdHkgaXMgbWFuZGF0b3J5IGZvciBzaW11bGF0b3JzLiBJdCBjYW4gYWx3YXlzIHdvcmsgZm9yIHJlYWwgZGV2aWNlcy5cbiAqXG4gKiBTaW5jZSBYQ29kZSAxNCB0aGUgbWV0aG9kIHRyaWVzIHRvIHVzZSBgeGN0cmFjZWAgdG9vbCB0byByZWNvcmQgcGVyZm9ybWFuY2Ugc3RhdHMuXG4gKiBUaGUgYGluc3RydW1lbnRzYCBkZXZlbG9wZXIgdXRpbGl0eSBpcyB1c2VkIGFzIGEgZmFsbGJhY2sgZm9yIHRoaXMgcHVycG9zZSBpZiBgeGN0cmFjZWBcbiAqIGlzIG5vdCBhdmFpbGFibGUuXG4gKiBJdCBpcyBwb3NzaWJsZSB0byByZWNvcmQgbXVsdGlwbGUgcHJvZmlsZXMgYXQgdGhlIHNhbWUgdGltZS5cbiAqIFJlYWQgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvY29udGVudC9kb2N1bWVudGF0aW9uL0RldmVsb3BlclRvb2xzL0NvbmNlcHR1YWwvSW5zdHJ1bWVudHNVc2VyR3VpZGUvUmVjb3JkaW5nLFBhdXNpbmcsYW5kU3RvcHBpbmdUcmFjZXMuaHRtbFxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAcGFyYW0gez9TdGFydFBlcmZSZWNvcmRPcHRpb25zfSBvcHRzIC0gVGhlIHNldCBvZiBwb3NzaWJsZSBzdGFydCByZWNvcmQgb3B0aW9uc1xuICovXG5jb21tYW5kcy5tb2JpbGVTdGFydFBlcmZSZWNvcmQgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTdGFydFBlcmZSZWNvcmQgKG9wdHMgPSB7fSkge1xuICBpZiAoIXRoaXMuaXNGZWF0dXJlRW5hYmxlZChQRVJGX1JFQ09SRF9GRUFUX05BTUUpICYmICF0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coUEVSRl9SRUNPUkRfU0VDVVJJVFlfTUVTU0FHRSk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgdGltZW91dCA9IERFRkFVTFRfVElNRU9VVF9NUyxcbiAgICBwcm9maWxlTmFtZSA9IERFRkFVTFRfUFJPRklMRV9OQU1FLFxuICAgIHBpZCxcbiAgfSA9IG9wdHM7XG5cbiAgaWYgKCFfLmlzRW1wdHkodGhpcy5fcGVyZlJlY29yZGVycykpIHtcbiAgICBjb25zdCByZWNvcmRlcnMgPSB0aGlzLl9wZXJmUmVjb3JkZXJzXG4gICAgICAuZmlsdGVyKCh4KSA9PiB4LnByb2ZpbGVOYW1lID09PSBwcm9maWxlTmFtZSk7XG4gICAgaWYgKCFfLmlzRW1wdHkocmVjb3JkZXJzKSkge1xuICAgICAgZm9yIChjb25zdCByZWNvcmRlciBvZiByZWNvcmRlcnMpIHtcbiAgICAgICAgaWYgKHJlY29yZGVyLmlzUnVubmluZygpKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGBQZXJmb3JtYW5jZSByZWNvcmRlciBmb3IgJyR7cHJvZmlsZU5hbWV9JyBvbiBkZXZpY2UgJyR7dGhpcy5vcHRzLmRldmljZS51ZGlkfScgYCArXG4gICAgICAgICAgICBgIGlzIGFscmVhZHkgcnVubmluZy4gRG9pbmcgbm90aGluZ2ApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfLnB1bGwodGhpcy5fcGVyZlJlY29yZGVycywgcmVjb3JkZXIpO1xuICAgICAgICBhd2FpdCByZWNvcmRlci5zdG9wKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlcG9ydFBhdGggPSBwYXRoLnJlc29sdmUob3MudG1wZGlyKCksXG4gICAgYGFwcGl1bV9wZXJmXyR7cHJvZmlsZU5hbWUucmVwbGFjZSgvXFxXL2csICdfJyl9XyR7dXRpbC51dWlkVjQoKS5zdWJzdHJpbmcoMCwgOCl9LiR7REVGQVVMVF9FWFR9YCk7XG4gIGxldCByZWFsUGlkO1xuICBpZiAocGlkKSB7XG4gICAgaWYgKF8udG9Mb3dlcihwaWQpID09PSBERUZBVUxUX1BJRCkge1xuICAgICAgY29uc3QgYXBwSW5mbyA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL2FjdGl2ZUFwcEluZm8nLCAnR0VUJyk7XG4gICAgICByZWFsUGlkID0gYXBwSW5mby5waWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWxQaWQgPSBwaWQ7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlY29yZGVyID0gbmV3IFBlcmZSZWNvcmRlcihyZXBvcnRQYXRoLCB0aGlzLm9wdHMuZGV2aWNlLnVkaWQsIHtcbiAgICB0aW1lb3V0OiBwYXJzZUludCh0aW1lb3V0LCAxMCksXG4gICAgcHJvZmlsZU5hbWUsXG4gICAgcGlkOiBwYXJzZUludChyZWFsUGlkLCAxMCksXG4gIH0pO1xuICBhd2FpdCByZWNvcmRlci5zdGFydCgpO1xuICB0aGlzLl9wZXJmUmVjb3JkZXJzID0gWy4uLih0aGlzLl9wZXJmUmVjb3JkZXJzIHx8IFtdKSwgcmVjb3JkZXJdO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdG9wUmVjb3JkaW5nT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gcmVtb3RlUGF0aCAtIFRoZSBwYXRoIHRvIHRoZSByZW1vdGUgbG9jYXRpb24sIHdoZXJlIHRoZSByZXN1bHRpbmcgemlwcGVkIC50cmFjZSBmaWxlIHNob3VsZCBiZSB1cGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBmb2xsb3dpbmcgcHJvdG9jb2xzIGFyZSBzdXBwb3J0ZWQ6IGh0dHAvaHR0cHMsIGZ0cC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bGwgb3IgZW1wdHkgc3RyaW5nIHZhbHVlICh0aGUgZGVmYXVsdCBzZXR0aW5nKSBtZWFucyB0aGUgY29udGVudCBvZiByZXN1bHRpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgc2hvdWxkIGJlIHppcHBlZCwgZW5jb2RlZCBhcyBCYXNlNjQgYW5kIHBhc3NlZCBhcyB0aGUgZW5kcG9pbnQgcmVzcG9uc2UgdmFsdWUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24gaWYgdGhlIGdlbmVyYXRlZCBmaWxlIGlzIHRvbyBiaWcgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdCBpbnRvIHRoZSBhdmFpbGFibGUgcHJvY2VzcyBtZW1vcnkuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVzZXIgLSBUaGUgbmFtZSBvZiB0aGUgdXNlciBmb3IgdGhlIHJlbW90ZSBhdXRoZW50aWNhdGlvbi4gT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHBhc3MgLSBUaGUgcGFzc3dvcmQgZm9yIHRoZSByZW1vdGUgYXV0aGVudGljYXRpb24uIE9ubHkgd29ya3MgaWYgYHJlbW90ZVBhdGhgIGlzIHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtZXRob2QgW1BVVF0gLSBUaGUgaHR0cCBtdWx0aXBhcnQgdXBsb2FkIG1ldGhvZCBuYW1lLiBPbmx5IHdvcmtzIGlmIGByZW1vdGVQYXRoYCBpcyBwcm92aWRlZC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gcHJvZmlsZU5hbWUgW0FjdGl2aXR5IE1vbml0b3JdIC0gVGhlIG5hbWUgb2YgYW4gZXhpc3RpbmcgcGVyZm9ybWFuY2UgcHJvZmlsZSBmb3Igd2hpY2ggdGhlIHJlY29yZGluZyBoYXMgYmVlbiBtYWRlLlxuICogQHByb3BlcnR5IHs/T2JqZWN0fSBoZWFkZXJzIC0gQWRkaXRpb25hbCBoZWFkZXJzIG1hcHBpbmcgZm9yIG11bHRpcGFydCBodHRwKHMpIHVwbG9hZHNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZmlsZUZpZWxkTmFtZSBbZmlsZV0gLSBUaGUgbmFtZSBvZiB0aGUgZm9ybSBmaWVsZCwgd2hlcmUgdGhlIGZpbGUgY29udGVudCBCTE9CIHNob3VsZCBiZSBzdG9yZWQgZm9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cChzKSB1cGxvYWRzXG4gKiBAcHJvcGVydHkgez9PYmplY3R8QXJyYXk8UGFpcj59IGZvcm1GaWVsZHMgLSBBZGRpdGlvbmFsIGZvcm0gZmllbGRzIGZvciBtdWx0aXBhcnQgaHR0cChzKSB1cGxvYWRzXG4gKi9cblxuLyoqXG4gKiBTdG9wcyBwZXJmb3JtYW5jZSBwcm9maWxpbmcgZm9yIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqIFRoZSByZXN1bHRpbmcgZmlsZSBpbiAudHJhY2UgZm9ybWF0IGNhbiBiZSBlaXRoZXIgcmV0dXJuZWRcbiAqIGRpcmVjdGx5IGFzIGJhc2U2NC1lbmNvZGVkIHppcCBhcmNoaXZlIG9yIHVwbG9hZGVkIHRvIGEgcmVtb3RlIGxvY2F0aW9uXG4gKiAoc3VjaCBmaWxlcyBjYW4gYmUgcHJldHR5IGxhcmdlKS4gQWZ0ZXJ3YXJkcyBpdCBpcyBwb3NzaWJsZSB0byB1bmFyY2hpdmUgYW5kXG4gKiBvcGVuIHN1Y2ggZmlsZSB3aXRoIFhjb2RlIERldiBUb29scy5cbiAqXG4gKiBAcGFyYW0gez9TdG9wUmVjb3JkaW5nT3B0aW9uc30gb3B0cyAtIFRoZSBzZXQgb2YgcG9zc2libGUgc3RvcCByZWNvcmQgb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfSBFaXRoZXIgYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSB1cGxvYWQgd2FzIHN1Y2Nlc3NmdWwgb3IgYmFzZS02NCBlbmNvZGVkXG4gKiBjb250ZW50IG9mIHppcHBlZCAudHJhY2UgZmlsZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBubyBwZXJmb3JtYW5jZSByZWNvcmRpbmcgd2l0aCBnaXZlbiBwcm9maWxlIG5hbWUvZGV2aWNlIHVkaWQgY29tYmluYXRpb25cbiAqIGhhcyBiZWVuIHN0YXJ0ZWQgYmVmb3JlIG9yIHRoZSByZXN1bHRpbmcgLnRyYWNlIGZpbGUgaGFzIG5vdCBiZWVuIGdlbmVyYXRlZCBwcm9wZXJseS5cbiAqL1xuY29tbWFuZHMubW9iaWxlU3RvcFBlcmZSZWNvcmQgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTdG9wUGVyZlJlY29yZCAob3B0cyA9IHt9KSB7XG4gIGlmICghdGhpcy5pc0ZlYXR1cmVFbmFibGVkKFBFUkZfUkVDT1JEX0ZFQVRfTkFNRSkgJiYgIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhQRVJGX1JFQ09SRF9TRUNVUklUWV9NRVNTQUdFKTtcbiAgfVxuXG4gIGlmIChfLmlzRW1wdHkodGhpcy5fcGVyZlJlY29yZGVycykpIHtcbiAgICBsb2cuaW5mbygnTm8gcGVyZm9ybWFuY2UgcmVjb3JkZXJzIGhhdmUgYmVlbiBzdGFydGVkLiBEb2luZyBub3RoaW5nJyk7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIHByb2ZpbGVOYW1lID0gREVGQVVMVF9QUk9GSUxFX05BTUUsXG4gICAgcmVtb3RlUGF0aCxcbiAgfSA9IG9wdHM7XG5cbiAgY29uc3QgcmVjb3JkZXJzID0gdGhpcy5fcGVyZlJlY29yZGVycy5maWx0ZXIoKHgpID0+IHgucHJvZmlsZU5hbWUgPT09IHByb2ZpbGVOYW1lKTtcbiAgaWYgKF8uaXNFbXB0eShyZWNvcmRlcnMpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZXJlIGFyZSBubyByZWNvcmRzIGZvciBwZXJmb3JtYW5jZSBwcm9maWxlICcke3Byb2ZpbGVOYW1lfScgYCArXG4gICAgICBgYW5kIGRldmljZSAke3RoaXMub3B0cy5kZXZpY2UudWRpZH0uIEhhdmUgeW91IHN0YXJ0ZWQgdGhlIHByb2ZpbGluZyBiZWZvcmU/YCk7XG4gIH1cbiAgY29uc3QgcmVzdWx0UGF0aCA9IGF3YWl0IHJlY29yZGVyc1swXS5zdG9wKCk7XG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKHJlc3VsdFBhdGgpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZXJlIGlzIG5vIC4ke0RFRkFVTFRfRVhUfSBmaWxlIGZvdW5kIGZvciBwZXJmb3JtYW5jZSBwcm9maWxlICcke3Byb2ZpbGVOYW1lfScgYCArXG4gICAgICBgYW5kIGRldmljZSAke3RoaXMub3B0cy5kZXZpY2UudWRpZH0uIE1ha2Ugc3VyZSB0aGUgc2VsZWN0ZWQgcHJvZmlsZSBpcyBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2VgKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBlbmNvZGVCYXNlNjRPclVwbG9hZChyZXN1bHRQYXRoLCByZW1vdGVQYXRoLCBvcHRzKTtcbn07XG5cblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvcGVyZm9ybWFuY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
