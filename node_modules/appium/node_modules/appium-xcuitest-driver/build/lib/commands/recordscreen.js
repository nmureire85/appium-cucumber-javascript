"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _deviceConnectionsFactory = _interopRequireDefault(require("../device-connections-factory"));

var _appiumWebdriveragent = require("appium-webdriveragent");

var _asyncbox = require("asyncbox");

var _url = _interopRequireDefault(require("url"));

let commands = {};
exports.commands = commands;
const MAX_RECORDING_TIME_SEC = 60 * 30;
const DEFAULT_RECORDING_TIME_SEC = 60 * 3;
const DEFAULT_MJPEG_SERVER_PORT = 9100;
const DEFAULT_FPS = 10;
const DEFAULT_QUALITY = 'medium';
const DEFAULT_VCODEC = 'mjpeg';
const MP4_EXT = '.mp4';
const FFMPEG_BINARY = 'ffmpeg';

const ffmpegLogger = _appiumSupport.logger.getLogger(FFMPEG_BINARY);

const QUALITY_MAPPING = {
  low: 10,
  medium: 25,
  high: 75,
  photo: 100
};

class ScreenRecorder {
  constructor(udid, videoPath, opts = {}) {
    this.videoPath = videoPath;
    this.opts = opts;
    this.udid = udid;
    this.mainProcess = null;
    this.timeoutHandler = null;
  }

  async start(timeoutMs) {
    try {
      await _appiumSupport.fs.which(FFMPEG_BINARY);
    } catch (err) {
      throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` + `Check https://www.ffmpeg.org/download.html for more details.`);
    }

    const {
      remotePort,
      remoteUrl,
      usePortForwarding,
      videoFps,
      videoType,
      videoScale,
      videoFilters,
      pixelFormat
    } = this.opts;

    try {
      await _deviceConnectionsFactory.default.requestConnection(this.udid, remotePort, {
        devicePort: remotePort,
        usePortForwarding
      });
    } catch (err) {
      _logger.default.warn(`Cannot forward the local port ${remotePort} to ${remotePort} ` + `on the device ${this.udid}. Set the custom value to 'mjpegServerPort' ` + `capability if this is an undesired behavior.`);
    }

    const args = ['-f', 'mjpeg'];

    if (videoFps && videoType === 'libx264') {
      args.push('-r', videoFps);
    }

    const {
      protocol,
      hostname
    } = _url.default.parse(remoteUrl);

    args.push('-i', `${protocol}//${hostname}:${remotePort}`);

    if (videoFilters || videoScale) {
      args.push('-vf', videoFilters || `scale=${videoScale}`);
    }

    if (pixelFormat) {
      args.push('-pix_fmt', pixelFormat);
    }

    args.push('-vcodec', videoType, '-y', this.videoPath);
    this.mainProcess = new _teen_process.SubProcess(FFMPEG_BINARY, args);
    let isCaptureStarted = false;
    this.mainProcess.on('output', (stdout, stderr) => {
      if (stderr) {
        if (stderr.trim().startsWith('frame=')) {
          if (!isCaptureStarted) {
            isCaptureStarted = true;
          }
        } else {
          ffmpegLogger.info(`${stderr}`);
        }
      }
    });
    await this.mainProcess.start(0);
    const startupTimeout = 5000;

    try {
      await (0, _asyncbox.waitForCondition)(() => isCaptureStarted, {
        waitMs: startupTimeout,
        intervalMs: 300
      });
    } catch (e) {
      _logger.default.warn(`Screen capture process did not start within ${startupTimeout}ms. Continuing anyway`);
    }

    if (!this.mainProcess.isRunning) {
      throw new Error(`The screen capture process '${FFMPEG_BINARY}' died unexpectedly. ` + `Check server logs for more details`);
    }

    _logger.default.info(`Starting screen capture on the device '${this.udid}' with command: '${FFMPEG_BINARY} ${args.join(' ')}'. ` + `Will timeout in ${timeoutMs}ms`);

    this.timeoutHandler = setTimeout(async () => {
      if (!(await this.interrupt())) {
        _logger.default.warn(`Cannot finish the active screen recording on the device '${this.udid}' after ${timeoutMs}ms timeout`);
      }
    }, timeoutMs);
  }

  async interrupt(force = false) {
    let result = true;

    if (this.timeoutHandler) {
      clearTimeout(this.timeoutHandler);
      this.timeoutHandler = null;
    }

    if (this.mainProcess && this.mainProcess.isRunning) {
      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');
      this.mainProcess = null;

      try {
        await interruptPromise;
      } catch (e) {
        _logger.default.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` + `Original error: ${e.message}`);

        result = false;
      }
    }

    _deviceConnectionsFactory.default.releaseConnection(this.udid, this.opts.remotePort);

    return result;
  }

  async finish() {
    await this.interrupt();
    return this.videoPath;
  }

  async cleanup() {
    if (await _appiumSupport.fs.exists(this.videoPath)) {
      await _appiumSupport.fs.rimraf(this.videoPath);
    }
  }

}

commands.startRecordingScreen = async function startRecordingScreen(options = {}) {
  const {
    videoType = DEFAULT_VCODEC,
    timeLimit = DEFAULT_RECORDING_TIME_SEC,
    videoQuality = DEFAULT_QUALITY,
    videoFps = DEFAULT_FPS,
    videoFilters,
    videoScale,
    forceRestart,
    pixelFormat
  } = options;
  let result = '';

  if (!forceRestart) {
    _logger.default.info(`Checking if there is/was a previous screen recording. ` + `Set 'forceRestart' option to 'true' if you'd like to skip this step.`);

    result = await this.stopRecordingScreen(options);
  }

  const videoPath = await _appiumSupport.tempDir.path({
    prefix: `appium_${Math.random().toString(16).substring(2, 8)}`,
    suffix: MP4_EXT
  });
  const wdaBaseUrl = this.opts.wdaBaseUrl || _appiumWebdriveragent.WDA_BASE_URL;
  const screenRecorder = new ScreenRecorder(this.opts.device.udid, videoPath, {
    remotePort: this.opts.mjpegServerPort || DEFAULT_MJPEG_SERVER_PORT,
    remoteUrl: wdaBaseUrl,
    usePortForwarding: this.isRealDevice() && (0, _utils.isLocalHost)(wdaBaseUrl),
    videoType,
    videoFilters,
    videoScale,
    videoFps,
    pixelFormat
  });

  if (!(await screenRecorder.interrupt(true))) {
    _logger.default.errorAndThrow('Unable to stop screen recording process');
  }

  if (this._recentScreenRecorder) {
    await this._recentScreenRecorder.cleanup();
    this._recentScreenRecorder = null;
  }

  const timeoutSeconds = parseFloat(timeLimit);

  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {
    _logger.default.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` + `The value of '${timeLimit}' has been passed instead.`);
  }

  let {
    mjpegServerScreenshotQuality,
    mjpegServerFramerate
  } = await this.proxyCommand('/appium/settings', 'GET');

  if (videoQuality) {
    const quality = _lodash.default.isInteger(videoQuality) ? videoQuality : QUALITY_MAPPING[_lodash.default.toLower(videoQuality)];

    if (!quality) {
      throw new Error(`videoQuality value should be one of ${JSON.stringify(_lodash.default.keys(QUALITY_MAPPING))} or a number in range 1..100. ` + `'${videoQuality}' is given instead`);
    }

    mjpegServerScreenshotQuality = mjpegServerScreenshotQuality !== quality ? quality : undefined;
  } else {
    mjpegServerScreenshotQuality = undefined;
  }

  if (videoFps) {
    const fps = parseInt(videoFps, 10);

    if (isNaN(fps)) {
      throw new Error(`videoFps value should be a valid number in range 1..60. ` + `'${videoFps}' is given instead`);
    }

    mjpegServerFramerate = mjpegServerFramerate !== fps ? fps : undefined;
  } else {
    mjpegServerFramerate = undefined;
  }

  if (_appiumSupport.util.hasValue(mjpegServerScreenshotQuality) || _appiumSupport.util.hasValue(mjpegServerFramerate)) {
    await this.proxyCommand('/appium/settings', 'POST', {
      settings: {
        mjpegServerScreenshotQuality,
        mjpegServerFramerate
      }
    });
  }

  try {
    await screenRecorder.start(timeoutSeconds * 1000);
  } catch (e) {
    await screenRecorder.interrupt(true);
    await screenRecorder.cleanup();
    throw e;
  }

  this._recentScreenRecorder = screenRecorder;
  return result;
};

commands.stopRecordingScreen = async function stopRecordingScreen(options = {}) {
  if (!this._recentScreenRecorder) {
    _logger.default.info('Screen recording is not running. There is nothing to stop.');

    return '';
  }

  try {
    const videoPath = await this._recentScreenRecorder.finish();

    if (!(await _appiumSupport.fs.exists(videoPath))) {
      _logger.default.errorAndThrow(`The screen recorder utility has failed ` + `to store the actual screen recording at '${videoPath}'`);
    }

    return await (0, _utils.encodeBase64OrUpload)(videoPath, options.remotePath, options);
  } finally {
    await this._recentScreenRecorder.interrupt(true);
    await this._recentScreenRecorder.cleanup();
    this._recentScreenRecorder = null;
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9yZWNvcmRzY3JlZW4uanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJNQVhfUkVDT1JESU5HX1RJTUVfU0VDIiwiREVGQVVMVF9SRUNPUkRJTkdfVElNRV9TRUMiLCJERUZBVUxUX01KUEVHX1NFUlZFUl9QT1JUIiwiREVGQVVMVF9GUFMiLCJERUZBVUxUX1FVQUxJVFkiLCJERUZBVUxUX1ZDT0RFQyIsIk1QNF9FWFQiLCJGRk1QRUdfQklOQVJZIiwiZmZtcGVnTG9nZ2VyIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiUVVBTElUWV9NQVBQSU5HIiwibG93IiwibWVkaXVtIiwiaGlnaCIsInBob3RvIiwiU2NyZWVuUmVjb3JkZXIiLCJjb25zdHJ1Y3RvciIsInVkaWQiLCJ2aWRlb1BhdGgiLCJvcHRzIiwibWFpblByb2Nlc3MiLCJ0aW1lb3V0SGFuZGxlciIsInN0YXJ0IiwidGltZW91dE1zIiwiZnMiLCJ3aGljaCIsImVyciIsIkVycm9yIiwicmVtb3RlUG9ydCIsInJlbW90ZVVybCIsInVzZVBvcnRGb3J3YXJkaW5nIiwidmlkZW9GcHMiLCJ2aWRlb1R5cGUiLCJ2aWRlb1NjYWxlIiwidmlkZW9GaWx0ZXJzIiwicGl4ZWxGb3JtYXQiLCJERVZJQ0VfQ09OTkVDVElPTlNfRkFDVE9SWSIsInJlcXVlc3RDb25uZWN0aW9uIiwiZGV2aWNlUG9ydCIsImxvZyIsIndhcm4iLCJhcmdzIiwicHVzaCIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJ1cmwiLCJwYXJzZSIsIlN1YlByb2Nlc3MiLCJpc0NhcHR1cmVTdGFydGVkIiwib24iLCJzdGRvdXQiLCJzdGRlcnIiLCJ0cmltIiwic3RhcnRzV2l0aCIsImluZm8iLCJzdGFydHVwVGltZW91dCIsIndhaXRNcyIsImludGVydmFsTXMiLCJlIiwiaXNSdW5uaW5nIiwiam9pbiIsInNldFRpbWVvdXQiLCJpbnRlcnJ1cHQiLCJmb3JjZSIsInJlc3VsdCIsImNsZWFyVGltZW91dCIsImludGVycnVwdFByb21pc2UiLCJzdG9wIiwibWVzc2FnZSIsInJlbGVhc2VDb25uZWN0aW9uIiwiZmluaXNoIiwiY2xlYW51cCIsImV4aXN0cyIsInJpbXJhZiIsInN0YXJ0UmVjb3JkaW5nU2NyZWVuIiwib3B0aW9ucyIsInRpbWVMaW1pdCIsInZpZGVvUXVhbGl0eSIsImZvcmNlUmVzdGFydCIsInN0b3BSZWNvcmRpbmdTY3JlZW4iLCJ0ZW1wRGlyIiwicGF0aCIsInByZWZpeCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInN1ZmZpeCIsIndkYUJhc2VVcmwiLCJXREFfQkFTRV9VUkwiLCJzY3JlZW5SZWNvcmRlciIsImRldmljZSIsIm1qcGVnU2VydmVyUG9ydCIsImlzUmVhbERldmljZSIsImVycm9yQW5kVGhyb3ciLCJfcmVjZW50U2NyZWVuUmVjb3JkZXIiLCJ0aW1lb3V0U2Vjb25kcyIsInBhcnNlRmxvYXQiLCJpc05hTiIsIm1qcGVnU2VydmVyU2NyZWVuc2hvdFF1YWxpdHkiLCJtanBlZ1NlcnZlckZyYW1lcmF0ZSIsInByb3h5Q29tbWFuZCIsInF1YWxpdHkiLCJfIiwiaXNJbnRlZ2VyIiwidG9Mb3dlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXlzIiwidW5kZWZpbmVkIiwiZnBzIiwicGFyc2VJbnQiLCJ1dGlsIiwiaGFzVmFsdWUiLCJzZXR0aW5ncyIsInJlbW90ZVBhdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7O0FBRUEsTUFBTUMsc0JBQXNCLEdBQUcsS0FBSyxFQUFwQztBQUNBLE1BQU1DLDBCQUEwQixHQUFHLEtBQUssQ0FBeEM7QUFDQSxNQUFNQyx5QkFBeUIsR0FBRyxJQUFsQztBQUNBLE1BQU1DLFdBQVcsR0FBRyxFQUFwQjtBQUNBLE1BQU1DLGVBQWUsR0FBRyxRQUF4QjtBQUNBLE1BQU1DLGNBQWMsR0FBRyxPQUF2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QUFDRCxHQUZELENBRUUsT0FBT3RDLENBQVAsRUFBVTtBQUNWLFVBQU1nQyxjQUFjLENBQUM1QixTQUFmLENBQXlCLElBQXpCLENBQU47QUFDQSxVQUFNNEIsY0FBYyxDQUFDbkIsT0FBZixFQUFOO0FBQ0EsVUFBTWIsQ0FBTjtBQUNEOztBQUNELE9BQUtxQyxxQkFBTCxHQUE2QkwsY0FBN0I7QUFFQSxTQUFPMUIsTUFBUDtBQUNELENBNUZEOztBQTZIQWxFLFFBQVEsQ0FBQ2lGLG1CQUFULEdBQStCLGVBQWVBLG1CQUFmLENBQW9DSixPQUFPLEdBQUcsRUFBOUMsRUFBa0Q7QUFDL0UsTUFBSSxDQUFDLEtBQUtvQixxQkFBVixFQUFpQztBQUMvQnhELG9CQUFJZSxJQUFKLENBQVMsNERBQVQ7O0FBQ0EsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFVBQU1wQyxTQUFTLEdBQUcsTUFBTSxLQUFLNkUscUJBQUwsQ0FBMkJ6QixNQUEzQixFQUF4Qjs7QUFDQSxRQUFJLEVBQUMsTUFBTTlDLGtCQUFHZ0QsTUFBSCxDQUFVdEQsU0FBVixDQUFQLENBQUosRUFBaUM7QUFDL0JxQixzQkFBSXVELGFBQUosQ0FBbUIseUNBQUQsR0FDZiw0Q0FBMkM1RSxTQUFVLEdBRHhEO0FBRUQ7O0FBQ0QsV0FBTyxNQUFNLGlDQUFxQkEsU0FBckIsRUFBZ0N5RCxPQUFPLENBQUN3QyxVQUF4QyxFQUFvRHhDLE9BQXBELENBQWI7QUFDRCxHQVBELFNBT1U7QUFDUixVQUFNLEtBQUtvQixxQkFBTCxDQUEyQmpDLFNBQTNCLENBQXFDLElBQXJDLENBQU47QUFDQSxVQUFNLEtBQUtpQyxxQkFBTCxDQUEyQnhCLE9BQTNCLEVBQU47QUFDQSxTQUFLd0IscUJBQUwsR0FBNkIsSUFBN0I7QUFDRDtBQUNGLENBbEJEOztlQXNCZWpHLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZnMsIHRlbXBEaXIsIGxvZ2dlciwgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IFN1YlByb2Nlc3MgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgZW5jb2RlQmFzZTY0T3JVcGxvYWQsIGlzTG9jYWxIb3N0IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IERFVklDRV9DT05ORUNUSU9OU19GQUNUT1JZIGZyb20gJy4uL2RldmljZS1jb25uZWN0aW9ucy1mYWN0b3J5JztcbmltcG9ydCB7IFdEQV9CQVNFX1VSTCB9IGZyb20gJ2FwcGl1bS13ZWJkcml2ZXJhZ2VudCc7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29uc3QgTUFYX1JFQ09SRElOR19USU1FX1NFQyA9IDYwICogMzA7XG5jb25zdCBERUZBVUxUX1JFQ09SRElOR19USU1FX1NFQyA9IDYwICogMztcbmNvbnN0IERFRkFVTFRfTUpQRUdfU0VSVkVSX1BPUlQgPSA5MTAwO1xuY29uc3QgREVGQVVMVF9GUFMgPSAxMDtcbmNvbnN0IERFRkFVTFRfUVVBTElUWSA9ICdtZWRpdW0nO1xuY29uc3QgREVGQVVMVF9WQ09ERUMgPSAnbWpwZWcnO1xuY29uc3QgTVA0X0VYVCA9ICcubXA0JztcbmNvbnN0IEZGTVBFR19CSU5BUlkgPSAnZmZtcGVnJztcbmNvbnN0IGZmbXBlZ0xvZ2dlciA9IGxvZ2dlci5nZXRMb2dnZXIoRkZNUEVHX0JJTkFSWSk7XG5jb25zdCBRVUFMSVRZX01BUFBJTkcgPSB7XG4gIGxvdzogMTAsXG4gIG1lZGl1bTogMjUsXG4gIGhpZ2g6IDc1LFxuICBwaG90bzogMTAwLFxufTtcblxuXG5jbGFzcyBTY3JlZW5SZWNvcmRlciB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCB2aWRlb1BhdGgsIG9wdHMgPSB7fSkge1xuICAgIHRoaXMudmlkZW9QYXRoID0gdmlkZW9QYXRoO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLm1haW5Qcm9jZXNzID0gbnVsbDtcbiAgICB0aGlzLnRpbWVvdXRIYW5kbGVyID0gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0ICh0aW1lb3V0TXMpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnMud2hpY2goRkZNUEVHX0JJTkFSWSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke0ZGTVBFR19CSU5BUll9JyBiaW5hcnkgaXMgbm90IGZvdW5kIGluIFBBVEguIEluc3RhbGwgaXQgdXNpbmcgJ2JyZXcgaW5zdGFsbCBmZm1wZWcnLiBgICtcbiAgICAgICAgYENoZWNrIGh0dHBzOi8vd3d3LmZmbXBlZy5vcmcvZG93bmxvYWQuaHRtbCBmb3IgbW9yZSBkZXRhaWxzLmApO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHJlbW90ZVBvcnQsXG4gICAgICByZW1vdGVVcmwsXG4gICAgICB1c2VQb3J0Rm9yd2FyZGluZyxcbiAgICAgIHZpZGVvRnBzLFxuICAgICAgdmlkZW9UeXBlLFxuICAgICAgdmlkZW9TY2FsZSxcbiAgICAgIHZpZGVvRmlsdGVycyxcbiAgICAgIHBpeGVsRm9ybWF0LFxuICAgIH0gPSB0aGlzLm9wdHM7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgREVWSUNFX0NPTk5FQ1RJT05TX0ZBQ1RPUlkucmVxdWVzdENvbm5lY3Rpb24odGhpcy51ZGlkLCByZW1vdGVQb3J0LCB7XG4gICAgICAgIGRldmljZVBvcnQ6IHJlbW90ZVBvcnQsXG4gICAgICAgIHVzZVBvcnRGb3J3YXJkaW5nLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cud2FybihgQ2Fubm90IGZvcndhcmQgdGhlIGxvY2FsIHBvcnQgJHtyZW1vdGVQb3J0fSB0byAke3JlbW90ZVBvcnR9IGAgK1xuICAgICAgICBgb24gdGhlIGRldmljZSAke3RoaXMudWRpZH0uIFNldCB0aGUgY3VzdG9tIHZhbHVlIHRvICdtanBlZ1NlcnZlclBvcnQnIGAgK1xuICAgICAgICBgY2FwYWJpbGl0eSBpZiB0aGlzIGlzIGFuIHVuZGVzaXJlZCBiZWhhdmlvci5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBhcmdzID0gW1xuICAgICAgJy1mJywgJ21qcGVnJyxcbiAgICBdO1xuICAgIC8vUGFyYW1ldGVyIGAtcmAgaXMgb3B0aW9uYWwuIFNlZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvMTIwNjdcbiAgICBpZiAodmlkZW9GcHMgJiYgdmlkZW9UeXBlID09PSAnbGlieDI2NCcpIHtcbiAgICAgIGFyZ3MucHVzaCgnLXInLCB2aWRlb0Zwcyk7XG4gICAgfVxuICAgIGNvbnN0IHtwcm90b2NvbCwgaG9zdG5hbWV9ID0gdXJsLnBhcnNlKHJlbW90ZVVybCk7XG4gICAgYXJncy5wdXNoKCctaScsIGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX06JHtyZW1vdGVQb3J0fWApO1xuICAgIGlmICh2aWRlb0ZpbHRlcnMgfHwgdmlkZW9TY2FsZSkge1xuICAgICAgYXJncy5wdXNoKCctdmYnLCB2aWRlb0ZpbHRlcnMgfHwgYHNjYWxlPSR7dmlkZW9TY2FsZX1gKTtcbiAgICB9XG4gICAgLy8gUXVpY2t0aW1lIGNvbXBhdGliaWxpdHkgdmlhIHBpeGVsRm9ybWF0OiAneXV2NDIwcCdcbiAgICBpZiAocGl4ZWxGb3JtYXQpIHtcbiAgICAgIGFyZ3MucHVzaCgnLXBpeF9mbXQnLCBwaXhlbEZvcm1hdCk7XG4gICAgfVxuICAgIGFyZ3MucHVzaChcbiAgICAgICctdmNvZGVjJywgdmlkZW9UeXBlLFxuICAgICAgJy15JywgdGhpcy52aWRlb1BhdGhcbiAgICApO1xuXG4gICAgdGhpcy5tYWluUHJvY2VzcyA9IG5ldyBTdWJQcm9jZXNzKEZGTVBFR19CSU5BUlksIGFyZ3MpO1xuICAgIGxldCBpc0NhcHR1cmVTdGFydGVkID0gZmFsc2U7XG4gICAgdGhpcy5tYWluUHJvY2Vzcy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoc3RkZXJyKSB7XG4gICAgICAgIGlmIChzdGRlcnIudHJpbSgpLnN0YXJ0c1dpdGgoJ2ZyYW1lPScpKSB7XG4gICAgICAgICAgaWYgKCFpc0NhcHR1cmVTdGFydGVkKSB7XG4gICAgICAgICAgICBpc0NhcHR1cmVTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmZtcGVnTG9nZ2VyLmluZm8oYCR7c3RkZXJyfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5tYWluUHJvY2Vzcy5zdGFydCgwKTtcbiAgICBjb25zdCBzdGFydHVwVGltZW91dCA9IDUwMDA7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oKCkgPT4gaXNDYXB0dXJlU3RhcnRlZCwge1xuICAgICAgICB3YWl0TXM6IHN0YXJ0dXBUaW1lb3V0LFxuICAgICAgICBpbnRlcnZhbE1zOiAzMDAsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cud2FybihgU2NyZWVuIGNhcHR1cmUgcHJvY2VzcyBkaWQgbm90IHN0YXJ0IHdpdGhpbiAke3N0YXJ0dXBUaW1lb3V0fW1zLiBDb250aW51aW5nIGFueXdheWApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubWFpblByb2Nlc3MuaXNSdW5uaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzY3JlZW4gY2FwdHVyZSBwcm9jZXNzICcke0ZGTVBFR19CSU5BUll9JyBkaWVkIHVuZXhwZWN0ZWRseS4gYCArXG4gICAgICAgIGBDaGVjayBzZXJ2ZXIgbG9ncyBmb3IgbW9yZSBkZXRhaWxzYCk7XG4gICAgfVxuICAgIGxvZy5pbmZvKGBTdGFydGluZyBzY3JlZW4gY2FwdHVyZSBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nIHdpdGggY29tbWFuZDogJyR7RkZNUEVHX0JJTkFSWX0gJHthcmdzLmpvaW4oJyAnKX0nLiBgICtcbiAgICAgIGBXaWxsIHRpbWVvdXQgaW4gJHt0aW1lb3V0TXN9bXNgKTtcblxuICAgIHRoaXMudGltZW91dEhhbmRsZXIgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghYXdhaXQgdGhpcy5pbnRlcnJ1cHQoKSkge1xuICAgICAgICBsb2cud2FybihgQ2Fubm90IGZpbmlzaCB0aGUgYWN0aXZlIHNjcmVlbiByZWNvcmRpbmcgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9JyBhZnRlciAke3RpbWVvdXRNc31tcyB0aW1lb3V0YCk7XG4gICAgICB9XG4gICAgfSwgdGltZW91dE1zKTtcbiAgfVxuXG4gIGFzeW5jIGludGVycnVwdCAoZm9yY2UgPSBmYWxzZSkge1xuICAgIGxldCByZXN1bHQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMudGltZW91dEhhbmRsZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRIYW5kbGVyKTtcbiAgICAgIHRoaXMudGltZW91dEhhbmRsZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1haW5Qcm9jZXNzICYmIHRoaXMubWFpblByb2Nlc3MuaXNSdW5uaW5nKSB7XG4gICAgICBjb25zdCBpbnRlcnJ1cHRQcm9taXNlID0gdGhpcy5tYWluUHJvY2Vzcy5zdG9wKGZvcmNlID8gJ1NJR1RFUk0nIDogJ1NJR0lOVCcpO1xuICAgICAgdGhpcy5tYWluUHJvY2VzcyA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBpbnRlcnJ1cHRQcm9taXNlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cud2FybihgQ2Fubm90ICR7Zm9yY2UgPyAndGVybWluYXRlJyA6ICdpbnRlcnJ1cHQnfSAke0ZGTVBFR19CSU5BUll9LiBgICtcbiAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBERVZJQ0VfQ09OTkVDVElPTlNfRkFDVE9SWS5yZWxlYXNlQ29ubmVjdGlvbih0aGlzLnVkaWQsIHRoaXMub3B0cy5yZW1vdGVQb3J0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBmaW5pc2ggKCkge1xuICAgIGF3YWl0IHRoaXMuaW50ZXJydXB0KCk7XG4gICAgcmV0dXJuIHRoaXMudmlkZW9QYXRoO1xuICB9XG5cbiAgYXN5bmMgY2xlYW51cCAoKSB7XG4gICAgaWYgKGF3YWl0IGZzLmV4aXN0cyh0aGlzLnZpZGVvUGF0aCkpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZih0aGlzLnZpZGVvUGF0aCk7XG4gICAgfVxuICB9XG59XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGFydFJlY29yZGluZ09wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcGF0aCB0byB0aGUgcmVtb3RlIGxvY2F0aW9uLCB3aGVyZSB0aGUgcmVzdWx0aW5nIHZpZGVvIHNob3VsZCBiZSB1cGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBmb2xsb3dpbmcgcHJvdG9jb2xzIGFyZSBzdXBwb3J0ZWQ6IGh0dHAvaHR0cHMsIGZ0cC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bGwgb3IgZW1wdHkgc3RyaW5nIHZhbHVlICh0aGUgZGVmYXVsdCBzZXR0aW5nKSBtZWFucyB0aGUgY29udGVudCBvZiByZXN1bHRpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgc2hvdWxkIGJlIGVuY29kZWQgYXMgQmFzZTY0IGFuZCBwYXNzZWQgYXMgdGhlIGVuZHBvaW50IHJlc3BvbnNlIHZhbHVlLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGlmIHRoZSBnZW5lcmF0ZWQgbWVkaWEgZmlsZSBpcyB0b28gYmlnIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQgaW50byB0aGUgYXZhaWxhYmxlIHByb2Nlc3MgbWVtb3J5LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0IGlmIHRoZXJlIGlzIHNjcmVlbiByZWNvcmRpbmcgcHJvY2VzcyBpbiBwcm9ncmVzc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGBmb3JjZVJlc3RhcnRgIHBhcmFtZXRlciBpcyBub3Qgc2V0IHRvIGB0cnVlYC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdXNlciAtIFRoZSBuYW1lIG9mIHRoZSB1c2VyIGZvciB0aGUgcmVtb3RlIGF1dGhlbnRpY2F0aW9uLiBPbmx5IHdvcmtzIGlmIGByZW1vdGVQYXRoYCBpcyBwcm92aWRlZC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gcGFzcyAtIFRoZSBwYXNzd29yZCBmb3IgdGhlIHJlbW90ZSBhdXRoZW50aWNhdGlvbi4gT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IG1ldGhvZCAtIFRoZSBodHRwIG11bHRpcGFydCB1cGxvYWQgbWV0aG9kIG5hbWUuIFRoZSAnUFVUJyBvbmUgaXMgdXNlZCBieSBkZWZhdWx0LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbmx5IHdvcmtzIGlmIGByZW1vdGVQYXRoYCBpcyBwcm92aWRlZC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdmlkZW9UeXBlIC0gVGhlIHZpZGVvIGNvZGVjIHR5cGUgdXNlZCBmb3IgZW5jb2Rpbmcgb2YgdGhlIGJlIHJlY29yZGVkIHNjcmVlbiBjYXB0dXJlLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGVjdXRlIGBmZm1wZWcgLWNvZGVjc2AgaW4gdGhlIHRlcm1pbmFsIHRvIHNlZSB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgdmlkZW8gY29kZWNzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWpwZWcnIGJ5IGRlZmF1bHQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd8bnVtYmVyfSB2aWRlb1F1YWxpdHkgLSBUaGUgdmlkZW8gZW5jb2RpbmcgcXVhbGl0eSAobG93LCBtZWRpdW0sIGhpZ2gsIHBob3RvIC0gZGVmYXVsdHMgdG8gbWVkaXVtKS5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ3xudW1iZXJ9IHZpZGVvRnBzIC0gVGhlIEZyYW1lcyBQZXIgU2Vjb25kIHJhdGUgb2YgdGhlIHJlY29yZGVkIHZpZGVvLiBDaGFuZ2UgdGhpcyB2YWx1ZSBpZiB0aGUgcmVzdWx0aW5nIHZpZGVvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgdG9vIHNsb3cgb3IgdG9vIGZhc3QuIERlZmF1bHRzIHRvIDEwLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB2aWRlb0ZpbHRlcnMgLSBUaGUgRkZNUEVHIHZpZGVvIGZpbHRlcnMgdG8gYXBwbHkuIFRoZXNlIGZpbHRlcnMgYWxsb3cgdG8gc2NhbGUsIGZsaXAsIHJvdGF0ZSBhbmQgZG8gbWFueVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlciB1c2VmdWwgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBzb3VyY2UgdmlkZW8gc3RyZWFtLiBUaGUgZm9ybWF0IG9mIHRoZSBwcm9wZXJ0eVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXN0IGNvbXBseSB3aXRoIGh0dHBzOi8vZmZtcGVnLm9yZy9mZm1wZWctZmlsdGVycy5odG1sXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHZpZGVvU2NhbGUgLSBUaGUgc2NhbGluZyB2YWx1ZSB0byBhcHBseS4gUmVhZCBodHRwczovL3RyYWMuZmZtcGVnLm9yZy93aWtpL1NjYWxpbmcgZm9yIHBvc3NpYmxlIHZhbHVlcy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vIHNjYWxlIGlzIGFwcGxpZWQgYnkgZGVmYXVsdC4gSWYgYm90aCBgdmlkZW9GaWx0ZXJzYCBhbmQgYHZpZGVvU2NhbGVgIGFyZSBzZXQgdGhlblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25seSBgdmlkZW9GaWx0ZXJzYCB2YWx1ZSB3aWxsIGJlIHJlc3BlY3RlZC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gcGl4ZWxGb3JtYXQgLSBPdXRwdXQgcGl4ZWwgZm9ybWF0LiBSdW4gYGZmbXBlZyAtcGl4X2ZtdHNgIHRvIGxpc3QgcG9zc2libGUgdmFsdWVzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvciBRdWlja3RpbWUgY29tcGF0aWJpbGl0eSwgc2V0IHRvIFwieXV2NDIwcFwiIGFsb25nIHdpdGggdmlkZW9UeXBlOiBcImxpYngyNjRcIi5cbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IGZvcmNlUmVzdGFydCAtIFdoZXRoZXIgdG8gdHJ5IHRvIGNhdGNoIGFuZCB1cGxvYWQvcmV0dXJuIHRoZSBjdXJyZW50bHkgcnVubmluZyBzY3JlZW4gcmVjb3JkaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYGZhbHNlYCwgdGhlIGRlZmF1bHQgc2V0dGluZykgb3IgaWdub3JlIHRoZSByZXN1bHQgb2YgaXQgYW5kIHN0YXJ0IGEgbmV3IHJlY29yZGluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd8bnVtYmVyfSB0aW1lTGltaXQgLSBUaGUgbWF4aW11bSByZWNvcmRpbmcgdGltZSwgaW4gc2Vjb25kcy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDE4MCwgdGhlIG1heGltdW0gdmFsdWUgaXMgNjAwICgxMCBtaW51dGVzKS5cbiAqL1xuXG4vKipcbiAqIFJlY29yZCB0aGUgZGlzcGxheSBvZiBkZXZpY2VzIHJ1bm5pbmcgaU9TIFNpbXVsYXRvciBzaW5jZSBYY29kZSA5IG9yIHJlYWwgZGV2aWNlcyBzaW5jZSBpT1MgMTFcbiAqIChmZm1wZWcgdXRpbGl0eSBpcyByZXF1aXJlZDogJ2JyZXcgaW5zdGFsbCBmZm1wZWcnKS5cbiAqIEl0IHJlY29yZHMgc2NyZWVuIGFjdGl2aXR5IHRvIGEgTVBFRy00IGZpbGUuIEF1ZGlvIGlzIG5vdCByZWNvcmRlZCB3aXRoIHRoZSB2aWRlbyBmaWxlLlxuICogSWYgc2NyZWVuIHJlY29yZGluZyBoYXMgYmVlbiBhbHJlYWR5IHN0YXJ0ZWQgdGhlbiB0aGUgY29tbWFuZCB3aWxsIHN0b3AgaXQgZm9yY2VmdWxseSBhbmQgc3RhcnQgYSBuZXcgb25lLlxuICogVGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmlkZW8gZmlsZSB3aWxsIGJlIGRlbGV0ZWQuXG4gKlxuICogQHBhcmFtIHs/U3RhcnRSZWNvcmRpbmdPcHRpb25zfSBvcHRpb25zIC0gVGhlIGF2YWlsYWJsZSBvcHRpb25zLlxuICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0LWVuY29kZWQgY29udGVudCBvZiB0aGUgcmVjb3JkZWQgbWVkaWEgZmlsZSBpZlxuICogICAgICAgICAgICAgICAgICAgYW55IHNjcmVlbiByZWNvcmRpbmcgaXMgY3VycmVudGx5IHJ1bm5pbmcgb3IgYW4gZW1wdHkgc3RyaW5nLlxuICogQHRocm93cyB7RXJyb3J9IElmIHNjcmVlbiByZWNvcmRpbmcgaGFzIGZhaWxlZCB0byBzdGFydC5cbiAqL1xuY29tbWFuZHMuc3RhcnRSZWNvcmRpbmdTY3JlZW4gPSBhc3luYyBmdW5jdGlvbiBzdGFydFJlY29yZGluZ1NjcmVlbiAob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICB2aWRlb1R5cGUgPSBERUZBVUxUX1ZDT0RFQyxcbiAgICB0aW1lTGltaXQgPSBERUZBVUxUX1JFQ09SRElOR19USU1FX1NFQyxcbiAgICB2aWRlb1F1YWxpdHkgPSBERUZBVUxUX1FVQUxJVFksXG4gICAgdmlkZW9GcHMgPSBERUZBVUxUX0ZQUyxcbiAgICB2aWRlb0ZpbHRlcnMsXG4gICAgdmlkZW9TY2FsZSxcbiAgICBmb3JjZVJlc3RhcnQsXG4gICAgcGl4ZWxGb3JtYXRcbiAgfSA9IG9wdGlvbnM7XG5cbiAgbGV0IHJlc3VsdCA9ICcnO1xuICBpZiAoIWZvcmNlUmVzdGFydCkge1xuICAgIGxvZy5pbmZvKGBDaGVja2luZyBpZiB0aGVyZSBpcy93YXMgYSBwcmV2aW91cyBzY3JlZW4gcmVjb3JkaW5nLiBgICtcbiAgICAgIGBTZXQgJ2ZvcmNlUmVzdGFydCcgb3B0aW9uIHRvICd0cnVlJyBpZiB5b3UnZCBsaWtlIHRvIHNraXAgdGhpcyBzdGVwLmApO1xuICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuc3RvcFJlY29yZGluZ1NjcmVlbihvcHRpb25zKTtcbiAgfVxuXG4gIGNvbnN0IHZpZGVvUGF0aCA9IGF3YWl0IHRlbXBEaXIucGF0aCh7XG4gICAgcHJlZml4OiBgYXBwaXVtXyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDIsIDgpfWAsXG4gICAgc3VmZml4OiBNUDRfRVhULFxuICB9KTtcblxuICBjb25zdCB3ZGFCYXNlVXJsID0gdGhpcy5vcHRzLndkYUJhc2VVcmwgfHwgV0RBX0JBU0VfVVJMO1xuICBjb25zdCBzY3JlZW5SZWNvcmRlciA9IG5ldyBTY3JlZW5SZWNvcmRlcih0aGlzLm9wdHMuZGV2aWNlLnVkaWQsIHZpZGVvUGF0aCwge1xuICAgIHJlbW90ZVBvcnQ6IHRoaXMub3B0cy5tanBlZ1NlcnZlclBvcnQgfHwgREVGQVVMVF9NSlBFR19TRVJWRVJfUE9SVCxcbiAgICByZW1vdGVVcmw6IHdkYUJhc2VVcmwsXG4gICAgdXNlUG9ydEZvcndhcmRpbmc6IHRoaXMuaXNSZWFsRGV2aWNlKCkgJiYgaXNMb2NhbEhvc3Qod2RhQmFzZVVybCksXG4gICAgdmlkZW9UeXBlLFxuICAgIHZpZGVvRmlsdGVycyxcbiAgICB2aWRlb1NjYWxlLFxuICAgIHZpZGVvRnBzLFxuICAgIHBpeGVsRm9ybWF0XG4gIH0pO1xuICBpZiAoIWF3YWl0IHNjcmVlblJlY29yZGVyLmludGVycnVwdCh0cnVlKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdVbmFibGUgdG8gc3RvcCBzY3JlZW4gcmVjb3JkaW5nIHByb2Nlc3MnKTtcbiAgfVxuICBpZiAodGhpcy5fcmVjZW50U2NyZWVuUmVjb3JkZXIpIHtcbiAgICBhd2FpdCB0aGlzLl9yZWNlbnRTY3JlZW5SZWNvcmRlci5jbGVhbnVwKCk7XG4gICAgdGhpcy5fcmVjZW50U2NyZWVuUmVjb3JkZXIgPSBudWxsO1xuICB9XG5cbiAgY29uc3QgdGltZW91dFNlY29uZHMgPSBwYXJzZUZsb2F0KHRpbWVMaW1pdCk7XG4gIGlmIChpc05hTih0aW1lb3V0U2Vjb25kcykgfHwgdGltZW91dFNlY29uZHMgPiBNQVhfUkVDT1JESU5HX1RJTUVfU0VDIHx8IHRpbWVvdXRTZWNvbmRzIDw9IDApIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIHRpbWVMaW1pdCB2YWx1ZSBtdXN0IGJlIGluIHJhbmdlIFsxLCAke01BWF9SRUNPUkRJTkdfVElNRV9TRUN9XSBzZWNvbmRzLiBgICtcbiAgICAgIGBUaGUgdmFsdWUgb2YgJyR7dGltZUxpbWl0fScgaGFzIGJlZW4gcGFzc2VkIGluc3RlYWQuYCk7XG4gIH1cblxuICBsZXQge1xuICAgIG1qcGVnU2VydmVyU2NyZWVuc2hvdFF1YWxpdHksXG4gICAgbWpwZWdTZXJ2ZXJGcmFtZXJhdGUsXG4gIH0gPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FwcGl1bS9zZXR0aW5ncycsICdHRVQnKTtcbiAgaWYgKHZpZGVvUXVhbGl0eSkge1xuICAgIGNvbnN0IHF1YWxpdHkgPSBfLmlzSW50ZWdlcih2aWRlb1F1YWxpdHkpID8gdmlkZW9RdWFsaXR5IDogUVVBTElUWV9NQVBQSU5HW18udG9Mb3dlcih2aWRlb1F1YWxpdHkpXTtcbiAgICBpZiAoIXF1YWxpdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdmlkZW9RdWFsaXR5IHZhbHVlIHNob3VsZCBiZSBvbmUgb2YgJHtKU09OLnN0cmluZ2lmeShfLmtleXMoUVVBTElUWV9NQVBQSU5HKSl9IG9yIGEgbnVtYmVyIGluIHJhbmdlIDEuLjEwMC4gYCArXG4gICAgICAgIGAnJHt2aWRlb1F1YWxpdHl9JyBpcyBnaXZlbiBpbnN0ZWFkYCk7XG4gICAgfVxuICAgIG1qcGVnU2VydmVyU2NyZWVuc2hvdFF1YWxpdHkgPSBtanBlZ1NlcnZlclNjcmVlbnNob3RRdWFsaXR5ICE9PSBxdWFsaXR5ID8gcXVhbGl0eSA6IHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICBtanBlZ1NlcnZlclNjcmVlbnNob3RRdWFsaXR5ID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh2aWRlb0Zwcykge1xuICAgIGNvbnN0IGZwcyA9IHBhcnNlSW50KHZpZGVvRnBzLCAxMCk7XG4gICAgaWYgKGlzTmFOKGZwcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdmlkZW9GcHMgdmFsdWUgc2hvdWxkIGJlIGEgdmFsaWQgbnVtYmVyIGluIHJhbmdlIDEuLjYwLiBgICtcbiAgICAgICAgYCcke3ZpZGVvRnBzfScgaXMgZ2l2ZW4gaW5zdGVhZGApO1xuICAgIH1cbiAgICBtanBlZ1NlcnZlckZyYW1lcmF0ZSA9IG1qcGVnU2VydmVyRnJhbWVyYXRlICE9PSBmcHMgPyBmcHMgOiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgbWpwZWdTZXJ2ZXJGcmFtZXJhdGUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHV0aWwuaGFzVmFsdWUobWpwZWdTZXJ2ZXJTY3JlZW5zaG90UXVhbGl0eSkgfHwgdXRpbC5oYXNWYWx1ZShtanBlZ1NlcnZlckZyYW1lcmF0ZSkpIHtcbiAgICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FwcGl1bS9zZXR0aW5ncycsICdQT1NUJywge1xuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgbWpwZWdTZXJ2ZXJTY3JlZW5zaG90UXVhbGl0eSxcbiAgICAgICAgbWpwZWdTZXJ2ZXJGcmFtZXJhdGUsXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGF3YWl0IHNjcmVlblJlY29yZGVyLnN0YXJ0KHRpbWVvdXRTZWNvbmRzICogMTAwMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhd2FpdCBzY3JlZW5SZWNvcmRlci5pbnRlcnJ1cHQodHJ1ZSk7XG4gICAgYXdhaXQgc2NyZWVuUmVjb3JkZXIuY2xlYW51cCgpO1xuICAgIHRocm93IGU7XG4gIH1cbiAgdGhpcy5fcmVjZW50U2NyZWVuUmVjb3JkZXIgPSBzY3JlZW5SZWNvcmRlcjtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdG9wUmVjb3JkaW5nT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gcmVtb3RlUGF0aCAtIFRoZSBwYXRoIHRvIHRoZSByZW1vdGUgbG9jYXRpb24sIHdoZXJlIHRoZSByZXN1bHRpbmcgdmlkZW8gc2hvdWxkIGJlIHVwbG9hZGVkLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZvbGxvd2luZyBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZDogaHR0cC9odHRwcywgZnRwLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVsbCBvciBlbXB0eSBzdHJpbmcgdmFsdWUgKHRoZSBkZWZhdWx0IHNldHRpbmcpIG1lYW5zIHRoZSBjb250ZW50IG9mIHJlc3VsdGluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSBzaG91bGQgYmUgZW5jb2RlZCBhcyBCYXNlNjQgYW5kIHBhc3NlZCBhcyB0aGUgZW5kcG9pbnQgcmVzcG9uc2UgdmFsdWUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24gaWYgdGhlIGdlbmVyYXRlZCBtZWRpYSBmaWxlIGlzIHRvbyBiaWcgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdCBpbnRvIHRoZSBhdmFpbGFibGUgcHJvY2VzcyBtZW1vcnkuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVzZXIgLSBUaGUgbmFtZSBvZiB0aGUgdXNlciBmb3IgdGhlIHJlbW90ZSBhdXRoZW50aWNhdGlvbi4gT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHBhc3MgLSBUaGUgcGFzc3dvcmQgZm9yIHRoZSByZW1vdGUgYXV0aGVudGljYXRpb24uIE9ubHkgd29ya3MgaWYgYHJlbW90ZVBhdGhgIGlzIHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtZXRob2QgLSBUaGUgaHR0cCBtdWx0aXBhcnQgdXBsb2FkIG1ldGhvZCBuYW1lLiBUaGUgJ1BVVCcgb25lIGlzIHVzZWQgYnkgZGVmYXVsdC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9PYmplY3R9IGhlYWRlcnMgLSBBZGRpdGlvbmFsIGhlYWRlcnMgbWFwcGluZyBmb3IgbXVsdGlwYXJ0IGh0dHAocykgdXBsb2Fkc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBmaWxlRmllbGROYW1lIFtmaWxlXSAtIFRoZSBuYW1lIG9mIHRoZSBmb3JtIGZpZWxkLCB3aGVyZSB0aGUgZmlsZSBjb250ZW50IEJMT0Igc2hvdWxkIGJlIHN0b3JlZCBmb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwKHMpIHVwbG9hZHNcbiAqIEBwcm9wZXJ0eSB7P09iamVjdHxBcnJheTxQYWlyPn0gZm9ybUZpZWxkcyAtIEFkZGl0aW9uYWwgZm9ybSBmaWVsZHMgZm9yIG11bHRpcGFydCBodHRwKHMpIHVwbG9hZHNcbiAqL1xuXG4vKipcbiAqIFN0b3AgcmVjb3JkaW5nIHRoZSBzY3JlZW4uIElmIG5vIHNjcmVlbiByZWNvcmRpbmcgcHJvY2VzcyBpcyBydW5uaW5nIHRoZW5cbiAqIHRoZSBlbmRwb2ludCB3aWxsIHRyeSB0byBnZXQgdGhlIHJlY2VudGx5IHJlY29yZGVkIGZpbGUuXG4gKiBJZiBubyBwcmV2aW91c2x5IHJlY29yZGVkIGZpbGUgaXMgZm91bmQgYW5kIG5vIGFjdGl2ZSBzY3JlZW4gcmVjb3JkaW5nXG4gKiBwcm9jZXNzZXMgYXJlIHJ1bm5pbmcgdGhlbiB0aGUgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7P1N0b3BSZWNvcmRpbmdPcHRpb25zfSBvcHRpb25zIC0gVGhlIGF2YWlsYWJsZSBvcHRpb25zLlxuICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0LWVuY29kZWQgY29udGVudCBvZiB0aGUgcmVjb3JkZWQgbWVkaWEgZmlsZSBpZiAncmVtb3RlUGF0aCdcbiAqICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlciBpcyBlbXB0eSBvciBudWxsIG9yIGFuIGVtcHR5IHN0cmluZy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgZ2V0dGluZyB0aGUgbmFtZSBvZiBhIG1lZGlhIGZpbGVcbiAqICAgICAgICAgICAgICAgICBvciB0aGUgZmlsZSBjb250ZW50IGNhbm5vdCBiZSB1cGxvYWRlZCB0byB0aGUgcmVtb3RlIGxvY2F0aW9uLlxuICovXG5jb21tYW5kcy5zdG9wUmVjb3JkaW5nU2NyZWVuID0gYXN5bmMgZnVuY3Rpb24gc3RvcFJlY29yZGluZ1NjcmVlbiAob3B0aW9ucyA9IHt9KSB7XG4gIGlmICghdGhpcy5fcmVjZW50U2NyZWVuUmVjb3JkZXIpIHtcbiAgICBsb2cuaW5mbygnU2NyZWVuIHJlY29yZGluZyBpcyBub3QgcnVubmluZy4gVGhlcmUgaXMgbm90aGluZyB0byBzdG9wLicpO1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgdmlkZW9QYXRoID0gYXdhaXQgdGhpcy5fcmVjZW50U2NyZWVuUmVjb3JkZXIuZmluaXNoKCk7XG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHModmlkZW9QYXRoKSkge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZSBzY3JlZW4gcmVjb3JkZXIgdXRpbGl0eSBoYXMgZmFpbGVkIGAgK1xuICAgICAgICBgdG8gc3RvcmUgdGhlIGFjdHVhbCBzY3JlZW4gcmVjb3JkaW5nIGF0ICcke3ZpZGVvUGF0aH0nYCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBlbmNvZGVCYXNlNjRPclVwbG9hZCh2aWRlb1BhdGgsIG9wdGlvbnMucmVtb3RlUGF0aCwgb3B0aW9ucyk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgdGhpcy5fcmVjZW50U2NyZWVuUmVjb3JkZXIuaW50ZXJydXB0KHRydWUpO1xuICAgIGF3YWl0IHRoaXMuX3JlY2VudFNjcmVlblJlY29yZGVyLmNsZWFudXAoKTtcbiAgICB0aGlzLl9yZWNlbnRTY3JlZW5SZWNvcmRlciA9IG51bGw7XG4gIH1cbn07XG5cblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvcmVjb3Jkc2NyZWVuLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
