"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const IPHONE_TOP_BAR_HEIGHT = 71;
const IPHONE_SCROLLED_TOP_BAR_HEIGHT = 41;
const IPHONE_X_SCROLLED_OFFSET = 55;
const IPHONE_X_NOTCH_OFFSET_IOS = 24;
const IPHONE_X_NOTCH_OFFSET_IOS_13 = 20;
const IPHONE_LANDSCAPE_TOP_BAR_HEIGHT = 51;
const IPHONE_BOTTOM_BAR_OFFSET = 49;
const TAB_BAR_OFFSET = 33;
const IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET = 84;
const IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET = 95;
const NOTCHED_DEVICE_SIZES = [{
  w: 1125,
  h: 2436
}, {
  w: 828,
  h: 1792
}, {
  w: 1242,
  h: 2688
}];
const ATOM_WAIT_TIMEOUT = 2 * 60000;
const ATOM_WAIT_ALERT_WAIT = 400;
let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.web);
extensions.getSafariIsIphone = _lodash.default.memoize(async function getSafariIsIphone() {
  try {
    const userAgent = await this.execute('return navigator.userAgent');
    return userAgent.toLowerCase().includes('iphone');
  } catch (err) {
    _logger.default.warn(`Unable to find device type from useragent. Assuming iPhone`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return true;
});
extensions.getSafariDeviceSize = _lodash.default.memoize(async function getSafariDeviceSize() {
  const script = 'return {height: window.screen.availHeight * window.devicePixelRatio, width: window.screen.availWidth * window.devicePixelRatio};';
  const {
    width,
    height
  } = await this.execute(script);
  const [normHeight, normWidth] = height > width ? [height, width] : [width, height];
  return {
    width: normWidth,
    height: normHeight
  };
});
extensions.getSafariIsNotched = _lodash.default.memoize(async function getSafariIsNotched() {
  try {
    const {
      width,
      height
    } = await this.getSafariDeviceSize();

    for (const device of NOTCHED_DEVICE_SIZES) {
      if (device.w === width && device.h === height) {
        return true;
      }
    }
  } catch (err) {
    _logger.default.warn(`Unable to find device type from dimensions. Assuming the device is not notched`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return false;
});

extensions.getExtraTranslateWebCoordsOffset = async function getExtraTranslateWebCoordsOffset(wvPos, realDims) {
  let topOffset = 0;
  let bottomOffset = 0;
  const isIphone = await this.getSafariIsIphone();
  const isNotched = isIphone && (await this.getSafariIsNotched());
  const orientation = realDims.h > realDims.w ? 'PORTRAIT' : 'LANDSCAPE';
  const notchOffset = isNotched ? _appiumSupport.util.compareVersions(this.opts.platformVersion, '=', '13.0') ? IPHONE_X_NOTCH_OFFSET_IOS_13 : IPHONE_X_NOTCH_OFFSET_IOS : 0;
  const isScrolled = await this.execute('return document.documentElement.scrollTop > 0');

  if (isScrolled) {
    topOffset = IPHONE_SCROLLED_TOP_BAR_HEIGHT + notchOffset;

    if (isNotched) {
      topOffset -= IPHONE_X_SCROLLED_OFFSET;
    }

    if (orientation === 'LANDSCAPE' && isIphone) {
      topOffset = 0;
    }
  } else {
    topOffset = IPHONE_TOP_BAR_HEIGHT + notchOffset;

    if (isIphone) {
      if (orientation === 'PORTRAIT') {
        bottomOffset = IPHONE_BOTTOM_BAR_OFFSET;
      } else {
        topOffset = IPHONE_LANDSCAPE_TOP_BAR_HEIGHT;
      }
    }

    if (orientation === 'LANDSCAPE' || !isIphone) {
      const tabs = await this.findNativeElementOrElements('-ios predicate string', `name LIKE '*, Tab' AND visible = 1`, true);

      if (tabs.length > 0) {
        topOffset += TAB_BAR_OFFSET;
      }
    }
  }

  topOffset += await this.getExtraNativeWebTapOffset();
  wvPos.y += topOffset;
  realDims.h -= topOffset + bottomOffset;
};

extensions.getExtraNativeWebTapOffset = async function getExtraNativeWebTapOffset() {
  let offset = 0;
  const banners = await this.findNativeElementOrElements('accessibility id', 'Close app download offer', true);

  if (banners.length > 0) {
    offset += (await this.getSafariIsIphone()) ? IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET : IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;
  }

  _logger.default.debug(`Additional native web tap offset computed: ${offset}`);

  return offset;
};

async function tapWebElementNatively(driver, atomsElement) {
  try {
    let text = await driver.executeAtom('get_text', [atomsElement]);

    if (!text) {
      text = await driver.executeAtom('get_attribute_value', [atomsElement, 'value']);
    }

    if (text) {
      const els = await driver.findNativeElementOrElements('accessibility id', text, true);

      if (els.length === 1 || els.length === 2) {
        const el = els[0];
        const rect = await driver.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(el)}/rect`, 'GET');

        if (els.length === 2) {
          const el2 = els[1];
          const rect2 = await driver.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(el2)}/rect`, 'GET');

          if (rect.x !== rect2.x || rect.y !== rect2.y || rect.width !== rect2.width || rect.height !== rect2.height) {
            return false;
          }
        }

        const coords = {
          x: Math.round(rect.x + rect.width / 2),
          y: Math.round(rect.y + rect.height / 2)
        };
        await driver.clickCoords(coords);
        return true;
      }
    }
  } catch (err) {
    _logger.default.warn(`Error attempting to click: ${err.message}`);
  }

  return false;
}

extensions.nativeWebTap = async function nativeWebTap(el) {
  const atomsElement = this.useAtomsElement(el);

  if (!(await this.settings.getSettings()).nativeWebTapStrict && (await tapWebElementNatively(this, atomsElement))) {
    return;
  }

  _logger.default.warn('Unable to do simple native web tap. Attempting to convert coordinates');

  await this.executeAtom('get_size', [atomsElement]);
  await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  const {
    width,
    height
  } = await this.executeAtom('get_size', [atomsElement]);
  let {
    x,
    y
  } = await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  x += width / 2;
  y += height / 2;
  this.curWebCoords = {
    x,
    y
  };
  await this.clickWebCoords();
};

extensions.clickCoords = async function clickCoords(coords) {
  await this.performTouch([{
    action: 'tap',
    options: coords
  }]);
};

extensions.translateWebCoords = async function translateWebCoords(coords) {
  _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

  let webview = await (0, _asyncbox.retryInterval)(5, 100, async () => {
    const webviews = await this.findNativeElementOrElements('class name', 'XCUIElementTypeWebView', true);

    if (webviews.length === 0) {
      throw new Error(`No webviews found. Unable to translate web coordinates for native web tap`);
    }

    return webviews[0];
  });
  webview = _appiumSupport.util.unwrapElement(webview);
  const rect = await this.proxyCommand(`/element/${webview}/rect`, 'GET');
  const wvPos = {
    x: rect.x,
    y: rect.y
  };
  const realDims = {
    w: rect.width,
    h: rect.height
  };
  const cmd = '(function () { return {w: window.innerWidth, h: window.innerHeight}; })()';
  const wvDims = await this.remote.execute(cmd);
  await this.getExtraTranslateWebCoordsOffset(wvPos, realDims);

  if (wvDims && realDims && wvPos) {
    let xRatio = realDims.w / wvDims.w;
    let yRatio = realDims.h / wvDims.h;
    let newCoords = {
      x: wvPos.x + Math.round(xRatio * coords.x),
      y: wvPos.y + Math.round(yRatio * coords.y)
    };

    _logger.default.debug(`Converted coordinates: ${JSON.stringify(newCoords)}`);

    _logger.default.debug(`    rect: ${JSON.stringify(rect)}`);

    _logger.default.debug(`    wvPos: ${JSON.stringify(wvPos)}`);

    _logger.default.debug(`    realDims: ${JSON.stringify(realDims)}`);

    _logger.default.debug(`    wvDims: ${JSON.stringify(wvDims)}`);

    _logger.default.debug(`    xRatio: ${JSON.stringify(xRatio)}`);

    _logger.default.debug(`    yRatio: ${JSON.stringify(yRatio)}`);

    _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

    return newCoords;
  }
};

extensions.checkForAlert = async function checkForAlert() {
  return _lodash.default.isString(await this.getAlertText());
};

extensions.waitForAtom = async function waitForAtom(promise) {
  const timer = new _appiumSupport.timing.Timer().start();
  let done = false;
  let error = null;
  promise = _bluebird.default.resolve(promise).timeout(ATOM_WAIT_TIMEOUT).catch(function (err) {
    _logger.default.debug(`Error received while executing atom: ${err.message}`);

    if (err instanceof _bluebird.default.TimeoutError) {
      err = new Error(`Did not get any response for atom execution after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    }

    error = err;
  }).finally(function () {
    done = true;
  });

  for (let i = 0; i < 10; i++) {
    try {
      await (0, _asyncbox.waitForCondition)(() => done, {
        waitMs: ATOM_WAIT_ALERT_WAIT,
        intervalMs: 0
      });
      break;
    } catch (ign) {}

    try {
      const res = await _bluebird.default.any([this.checkForAlert(), promise]);

      if (error) {
        throw error;
      }

      return this.parseExecuteResponse(res);
    } catch (err) {
      _logger.default.debug(`No alert found: ${err.message}`);
    }
  }

  const res = await promise;

  if (error) {
    throw error;
  }

  return this.parseExecuteResponse(res);
};

extensions.mobileWebNav = async function mobileWebNav(navType) {
  this.remote.allowNavigationWithoutReload = true;

  try {
    await this.executeAtom('execute_script', [`history.${navType}();`, null]);
  } finally {
    this.remote.allowNavigationWithoutReload = false;
  }
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
