"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.extensions = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _appiumIosDevice = require("appium-ios-device");

let commands = {},
    helpers = {},
    extensions = {};
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
const MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';

commands.active = async function active() {
  if (this.isWebContext()) {
    return await this.executeAtom('active_element', []);
  }

  return await this.proxyCommand(`/element/active`, 'GET');
};

commands.background = async function background(seconds) {
  const homescreen = '/wda/homescreen';
  const deactivateApp = '/wda/deactivateApp';
  let endpoint;
  let params = {};

  const selectEndpoint = timeoutSeconds => {
    if (!_appiumSupport.util.hasValue(timeoutSeconds)) {
      endpoint = homescreen;
    } else if (!isNaN(timeoutSeconds)) {
      const duration = parseFloat(timeoutSeconds);

      if (duration >= 0) {
        params = {
          duration
        };
        endpoint = deactivateApp;
      } else {
        endpoint = homescreen;
      }
    }
  };

  if (_lodash.default.has(seconds, 'timeout')) {
    const {
      timeout
    } = seconds;
    selectEndpoint(isNaN(timeout) ? timeout : parseFloat(timeout) / 1000.0);
  } else {
    selectEndpoint(seconds);
  }

  if (!endpoint) {
    _logger.default.errorAndThrow(`Argument value is expected to be a valid number. ` + `${JSON.stringify(seconds)} has been provided instead`);
  }

  return await this.proxyCommand(endpoint, 'POST', params, endpoint !== homescreen);
};

commands.touchId = async function touchId(match = true) {
  await this.mobileSendBiometricMatch({
    match
  });
};

commands.toggleEnrollTouchId = async function toggleEnrollTouchId(isEnabled = true) {
  await this.mobileEnrollBiometric({
    isEnabled
  });
};

helpers.getWindowSizeWeb = async function getWindowSizeWeb() {
  return await this.executeAtom('get_window_size', []);
};

helpers.getWindowSizeNative = async function getWindowSizeNative() {
  return await this.proxyCommand(`/window/size`, 'GET');
};

commands.getWindowSize = async function getWindowSize(windowHandle = 'current') {
  if (windowHandle !== 'current') {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
  }

  if (!this.isWebContext()) {
    return await this.getWindowSizeNative();
  } else {
    return await this.getWindowSizeWeb();
  }
};

commands.getDeviceTime = async function getDeviceTime(format = MOMENT_FORMAT_ISO8601) {
  _logger.default.info('Attempting to capture iOS device date and time');

  if (!this.isRealDevice()) {
    return await _appiumIosDriver.iosCommands.general.getDeviceTime.call(this, format);
  }

  const {
    timestamp,
    utcOffset,
    timeZone
  } = await _appiumIosDevice.utilities.getDeviceTime(this.opts.udid);

  _logger.default.debug(`timestamp: ${timestamp}, utcOffset: ${utcOffset}, timeZone: ${timeZone}`);

  const utc = _momentTimezone.default.unix(timestamp).utc();

  if (Math.abs(utcOffset) <= 12 * 60) {
    return utc.utcOffset(utcOffset).format(format);
  }

  if (_lodash.default.includes(timeZone, '/')) {
    return utc.tz(timeZone).format(format);
  }

  if (Math.abs(timeZone) <= 12 * 60 * 60) {
    return utc.utcOffset(timeZone / 60).format(format);
  }

  _logger.default.warn('Did not know how to apply the UTC offset. Returning the timestamp without it');

  return utc.format(format);
};

commands.mobileGetDeviceTime = async function mobileGetDeviceTime(opts = {}) {
  return await this.getDeviceTime(opts.format);
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.hideKeyboard = async function hideKeyboard(strategy, ...possibleKeys) {
  if (!(this.opts.deviceName || '').includes('iPhone')) {
    try {
      await this.proxyCommand('/wda/keyboard/dismiss', 'POST');
      return;
    } catch (ign) {}
  }

  _logger.default.debug('Cannot dismiss the keyboard using the native call. Trying to apply a workaround...');

  let keyboard;

  try {
    keyboard = await this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
  } catch (err) {
    _logger.default.debug('No keyboard found. Unable to hide.');

    return;
  }

  possibleKeys.pop();
  possibleKeys = possibleKeys.filter(element => !!element);

  if (possibleKeys.length) {
    for (const key of possibleKeys) {
      let el = _lodash.default.last(await this.findNativeElementOrElements('accessibility id', key, true, keyboard));

      if (el) {
        _logger.default.debug(`Attempting to hide keyboard by pressing '${key}' key.`);

        await this.nativeClick(el);
        return;
      }
    }
  } else {
    _logger.default.debug('Finding keyboard and clicking final button to close');

    if ((await this.getNativeAttribute('visible', keyboard)) === 'false') {
      _logger.default.debug('No visible keyboard found. Returning');

      return;
    }

    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard);

    if (_lodash.default.isEmpty(buttons)) {
      _logger.default.warn(`No button elements found. Unable to hide.`);

      return;
    }

    await this.nativeClick(_lodash.default.last(buttons));
  }
};

commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = async function removeApp(bundleId) {
  return await this.mobileRemoveApp({
    bundleId
  });
};

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;
commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

commands.keys = async function keys(keys) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');
  }

  let el = _appiumSupport.util.unwrapElement(await this.active());

  if (_lodash.default.isEmpty(el)) {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }

  await this.setValue(keys, el);
};

commands.setUrl = async function setUrl(url) {
  if (this.isWebContext()) {
    return await _appiumIosDriver.iosCommands.general.setUrl.call(this, url);
  }

  if (this.isRealDevice()) {
    await this.proxyCommand('/url', 'POST', {
      url
    });
  } else {
    await this.opts.device.simctl.openUrl(url);
  }
};

commands.getViewportRect = _appiumIosDriver.iosCommands.device.getViewportRect;

commands.getScreenInfo = async function getScreenInfo() {
  return await this.proxyCommand('/wda/screen', 'GET');
};

commands.getStatusBarHeight = async function getStatusBarHeight() {
  const {
    statusBarSize
  } = await this.getScreenInfo();
  return statusBarSize.height;
};

commands.getDevicePixelRatio = async function getDevicePixelRatio() {
  const {
    scale
  } = await this.getScreenInfo();
  return scale;
};

commands.mobilePressButton = async function mobilePressButton(opts = {}) {
  const {
    name
  } = opts;

  if (!name) {
    _logger.default.errorAndThrow('Button name is mandatory');
  }

  return await this.proxyCommand('/wda/pressButton', 'POST', {
    name
  });
};

commands.mobileSiriCommand = async function mobileSiriCommand(opts = {}) {
  const {
    text
  } = opts;

  if (!_appiumSupport.util.hasValue(text)) {
    _logger.default.errorAndThrow('"text" argument is mandatory');
  }

  return await this.proxyCommand('/wda/siri/activate', 'POST', {
    text
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
