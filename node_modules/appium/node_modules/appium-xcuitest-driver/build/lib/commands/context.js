"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const WEBVIEW_BASE = `${_appiumIosDriver.WEBVIEW_WIN}_`;
let commands = {},
    helpers = {},
    extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.context);

extensions.closeAlertBeforeTest = async function closeAlertBeforeTest() {
  return true;
};

extensions.navToInitialWebview = async function navToInitialWebview() {
  if (this.useNewSafari()) {
    await this.typeAndNavToUrl();
  } else if (!this.isRealDevice() && this.opts.safari) {
    await this.navToViewThroughFavorites();
  } else {
    await this.navToViewWithTitle(/.*/);
  }
};

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  const currentUrl = this.getCurrentUrl();

  const contexts = _lodash.default.filter(await this.getContextsAndViews(), 'view');

  if (currentUrl) {
    for (const ctx of contexts) {
      if ((ctx.view.url || '') === this.getCurrentUrl()) {
        return ctx.id;
      }
    }
  }

  for (const ctx of contexts) {
    if (ctx.view.title && regExp.test(ctx.view.title) || ctx.view.url && regExp.test(ctx.view.url)) {
      return ctx.id;
    }
  }
};

extensions.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function isWebview() {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  let socketPath;

  if (!this.isRealDevice()) {
    socketPath = await this.opts.device.getWebInspectorSocket();
  }

  return (0, _appiumRemoteDebugger.createRemoteDebugger)({
    bundleId: this.opts.bundleId,
    additionalBundleIds: this.opts.additionalWebviewBundleIds,
    isSafari: this.isSafari(),
    includeSafari: this.opts.includeSafariInWebviews,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    socketPath,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : false,
    udid: this.opts.udid,
    logAllCommunication: this.opts.safariLogAllCommunication,
    logAllCommunicationHexDump: this.opts.safariLogAllCommunicationHexDump,
    socketChunkSize: this.opts.safariSocketChunkSize,
    webInspectorMaxFrameLength: this.opts.safariWebInspectorMaxFrameLength
  }, this.isRealDevice());
};

commands.setContext = async function setContext(name, callback, skipReadyCheck) {
  function alreadyInContext(desired, current) {
    return desired === current || desired === null && current === _appiumIosDriver.NATIVE_WIN || desired === _appiumIosDriver.NATIVE_WIN && current === null;
  }

  function isNativeContext(context) {
    return context === _appiumIosDriver.NATIVE_WIN || context === null;
  }

  if (name && name.id) {
    name = name.id;
  }

  _logger.default.debug(`Attempting to set context to '${name || _appiumIosDriver.NATIVE_WIN}' from '${this.curContext ? this.curContext : _appiumIosDriver.NATIVE_WIN}'`);

  if (alreadyInContext(name, this.curContext) || alreadyInContext(_lodash.default.replace(name, WEBVIEW_BASE, ''), this.curContext)) {
    _logger.default.debug(`Already in '${name || _appiumIosDriver.NATIVE_WIN}' context. Doing nothing.`);

    return;
  }

  if (isNativeContext(name)) {
    this.curContext = null;
    return;
  }

  if (_lodash.default.isUndefined(this.contexts)) {
    await this.getContexts();
  }

  let contextId = _lodash.default.replace(name, WEBVIEW_BASE, '');

  if (contextId === '') {
    contextId = this.contexts[1];
  }

  if (!_lodash.default.includes(this.contexts, contextId)) {
    throw new _appiumBaseDriver.errors.NoSuchContextError();
  }

  const oldContext = this.curContext;
  this.curContext = this.curWindowHandle = contextId;

  const [appIdKey, pageIdKey] = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10));

  try {
    this.selectingNewPage = true;
    await this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
  } catch (err) {
    this.curContext = this.curWindowHandle = oldContext;
    throw err;
  } finally {
    this.selectingNewPage = false;
  }

  if (this.opts.enablePerformanceLogging && this.remote) {
    _logger.default.debug(`Starting performance log on '${this.curContext}'`);

    this.logs.performance = new _appiumIosDriver.IOSPerformanceLog(this.remote);
    await this.logs.performance.startCapture();
  }

  if (name && name !== _appiumIosDriver.NATIVE_WIN && this.logs) {
    if (this.logs.safariConsole) {
      await this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole));
    }

    if (this.logs.safariNetwork) {
      await this.remote.startNetwork(this.logs.safariNetwork.addLogLine.bind(this.logs.safariNetwork));
    }
  }
};

extensions.connectToRemoteDebugger = async function connectToRemoteDebugger() {
  this.remote = await this.getNewRemoteDebugger();
  this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
  this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
    if (!_lodash.default.isEmpty(this.curWebFrames)) {
      _logger.default.debug(`Clearing ${_appiumSupport.util.pluralize('frame', this.curWebFrames.length, true)}: ${this.curWebFrames.join(', ')}`);
    }

    this.curWebFrames = [];
  });
  await this.remote.connect(this.opts.webviewConnectTimeout);
};

extensions.listWebFrames = async function listWebFrames(useUrl = true) {
  if (!this.opts.bundleId) {
    _logger.default.errorAndThrow('Cannot enter web frame without a bundle ID');
  }

  useUrl = useUrl && !this.isRealDevice() && !!this.getCurrentUrl();

  _logger.default.debug(`Selecting by url: ${useUrl} ${useUrl ? `(expected url: '${this.getCurrentUrl()}')` : ''}`);

  const currentUrl = useUrl ? this.getCurrentUrl() : undefined;
  let pageArray = [];

  const getWebviewPages = async () => {
    try {
      return await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    } catch (err) {
      _logger.default.debug(`No available web pages: ${err.message}`);

      return [];
    }
  };

  if (this.remote && this.remote.appIdKey) {
    pageArray = await getWebviewPages();
  } else {
    if (!this.remote) {
      await this.connectToRemoteDebugger();
    }

    await this.remote.setConnectionKey();
    pageArray = await getWebviewPages();
    const alertErrorMsg = 'Close alert failed. Retry.';

    try {
      await (0, _asyncbox.retryInterval)(6, 1000, async () => {
        if (!(await this.closeAlertBeforeTest())) {
          throw new Error(alertErrorMsg);
        }
      });
    } catch (err) {
      if (err.message !== alertErrorMsg) {
        _logger.default.errorAndThrow(err);
      }
    }
  }

  if (pageArray.length === 0) {
    _logger.default.debug('No web frames found.');
  }

  return pageArray;
};

commands.getContexts = async function getContexts() {
  _logger.default.debug('Getting list of available contexts');

  const contexts = await this.getContextsAndViews(false);
  const mapFn = this.opts.fullContextList ? function (context) {
    return {
      id: context.id.toString(),
      title: context.view.title,
      url: context.view.url,
      bundleId: context.view.bundleId
    };
  } : context => context.id.toString();
  return contexts.map(mapFn);
};

extensions.mobileGetContexts = async function mobileGetContexts(opts = {}) {
  let {
    waitForWebviewMs = 0
  } = opts;

  if (!_lodash.default.isNumber(waitForWebviewMs)) {
    waitForWebviewMs = parseInt(waitForWebviewMs, 10);

    if (isNaN(waitForWebviewMs)) {
      waitForWebviewMs = 0;
    }
  }

  const curOpt = this.opts.fullContextList;
  this.opts.fullContextList = true;
  const timer = new _appiumSupport.timing.Timer().start();

  try {
    let contexts;

    do {
      contexts = await this.getContexts();

      if (contexts.length >= 2) {
        _logger.default.debug(`Found webview context after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

        return contexts;
      }

      _logger.default.debug(`No webviews found in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    } while (timer.getDuration().asMilliSeconds < waitForWebviewMs);

    return contexts;
  } finally {
    this.opts.fullContextList = curOpt;
  }
};

commands.setWindow = async function setWindow(name, skipReadyCheck) {
  try {
    await this.setContext(name, _lodash.default.noop, skipReadyCheck);
  } catch (err) {
    throw (0, _appiumBaseDriver.isErrorType)(err, _appiumBaseDriver.errors.NoSuchContextError) ? new _appiumBaseDriver.errors.NoSuchWindowError() : err;
  }
};

commands.getWindowHandle = async function getWindowHandle() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug(`Getting current window handle`);

  return this.curContext;
};

commands.getWindowHandles = async function getWindowHandles() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug('Getting list of available window handles');

  const contexts = await this.getContextsAndViews(false);
  return contexts.filter(context => context.id !== _appiumIosDriver.NATIVE_WIN).map(context => context.view.id.toString());
};

extensions.onPageChange = async function onPageChange(pageChangeNotification) {
  _logger.default.debug(`Remote debugger notified us of a new page listing: ${JSON.stringify(pageChangeNotification)}`);

  if (this.selectingNewPage) {
    _logger.default.debug('We are in the middle of selecting a page, ignoring');

    return;
  }

  if (!this.remote || !this.remote.isConnected) {
    _logger.default.debug('We have not yet connected, ignoring');

    return;
  }

  const {
    appIdKey,
    pageArray
  } = pageChangeNotification;
  let newIds = [];
  let newPages = [];
  let keyId = null;

  for (const page of pageArray) {
    const id = page.id.toString();
    newIds.push(id);

    if (page.isKey) {
      keyId = id;
    }

    const contextId = `${appIdKey}.${id}`;

    if (!_lodash.default.includes(this.contexts, contextId)) {
      newPages.push(id);
      this.contexts.push(contextId);
    }
  }

  if (!keyId) {
    _logger.default.debug('No key id found. Choosing first id from page array');

    keyId = newIds[0] || null;
  }

  if (!_appiumSupport.util.hasValue(this.curContext)) {
    _logger.default.debug('We do not appear to have window set yet, ignoring');

    return;
  }

  const [curAppIdKey, curPageIdKey] = this.curContext.split('.');

  if (curAppIdKey !== appIdKey) {
    _logger.default.debug('Page change not referring to currently selected app, ignoring.');

    return;
  }

  let newPage = null;

  if (newPages.length) {
    newPage = _lodash.default.last(newPages);

    _logger.default.debug(`We have new pages, selecting page '${newPage}'`);
  } else if (!_lodash.default.includes(newIds, curPageIdKey)) {
    _logger.default.debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

    if (!_appiumSupport.util.hasValue(keyId)) {
      _logger.default.error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');

      this.setCurrentUrl(undefined);
      return;
    }

    _logger.default.debug(`Debugger already selected page '${keyId}', ` + `confirming that choice.`);

    this.curContext = `${appIdKey}.${keyId}`;
    newPage = keyId;
  } else {
    _logger.default.debug('Checking if page needs to load');

    const needsPageLoad = (() => {
      const contextArray = _lodash.default.map(pageArray, page => `${appIdKey}.${page.id}`);

      return !_lodash.default.isEqual(_lodash.default.find(this.contexts, this.curContext), _lodash.default.find(contextArray, this.curContext));
    })();

    if (needsPageLoad) {
      _logger.default.debug('Page load needed. Loading...');

      await this.remote.pageLoad();
    }

    _logger.default.debug('New page listing is same as old, doing nothing');
  }

  if (_appiumSupport.util.hasValue(this.curContext)) {
    let currentPageId = parseInt(_lodash.default.last(this.curContext.split('.')), 10);

    let page = _lodash.default.find(pageArray, p => parseInt(p.id, 10) === currentPageId);

    if (page && page.url !== this.getCurrentUrl()) {
      _logger.default.debug(`Redirected from '${this.getCurrentUrl()}' to '${page.url}'`);

      this.setCurrentUrl(page.url);
    }
  }

  if (_appiumSupport.util.hasValue(newPage)) {
    this.selectingNewPage = true;
    const oldContext = this.curContext;
    this.curContext = `${appIdKey}.${newPage}`;
    this.remote.selectPage(appIdKey, parseInt(newPage, 10)).catch(err => {
      _logger.default.warn(`Failed to select page: ${err.message}`);

      this.curContext = oldContext;
    });
    this.selectingNewPage = false;
  }

  this.windowHandleCache = pageArray;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
