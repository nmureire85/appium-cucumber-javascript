"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gesturesChainToString = gesturesChainToString;
exports.default = exports.commands = exports.helpers = exports.extensions = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _appiumIosDriver = require("appium-ios-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

let helpers = {},
    extensions = {},
    commands = {};
exports.commands = commands;
exports.extensions = extensions;
exports.helpers = helpers;
commands.moveTo = _appiumIosDriver.iosCommands.gesture.moveTo;

function requireFloatParameter(paramName, paramValue, methodName) {
  if (_lodash.default.isUndefined(paramValue)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter is mandatory for "${methodName}" call`);
  }

  const result = parseFloat(paramValue);

  if (isNaN(result)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter should be a valid number. "${paramValue}" is given instead`);
  }

  return result;
}

function requireIntParameter(paramName, paramValue, methodName) {
  if (_lodash.default.isUndefined(paramValue)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter is mandatory for "${methodName}" call`);
  }

  const result = parseInt(paramValue, 10);

  if (isNaN(result)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter should be a valid integer. "${paramValue}" is given instead`);
  }

  return result;
}

commands.mobileShake = async function mobileShake() {
  if (!this.isSimulator()) {
    throw new _appiumBaseDriver.errors.UnknownError('Shake is not supported on real devices');
  }

  await this.opts.device.shake();
};

commands.click = async function click(el) {
  if (!this.isWebContext()) {
    return await this.nativeClick(el);
  }

  el = _appiumSupport.util.unwrapElement(el);

  if ((await this.settings.getSettings()).nativeWebTap || (await this.settings.getSettings()).nativeWebTapStrict) {
    _logger.default.debug('Using native web tap');

    await this.nativeWebTap(el);
  } else {
    const atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('click', [atomsElement]);
  }
};

function gesturesChainToString(gestures, keysToInclude = ['options']) {
  return gestures.map(item => {
    let otherKeys = _lodash.default.difference(_lodash.default.keys(item), ['action']);

    otherKeys = _lodash.default.isArray(keysToInclude) ? _lodash.default.intersection(otherKeys, keysToInclude) : otherKeys;

    if (otherKeys.length) {
      return `${item.action}` + `(${_lodash.default.map(otherKeys, x => x + '=' + (_lodash.default.isPlainObject(item[x]) ? JSON.stringify(item[x]) : item[x])).join(', ')})`;
    }

    return item.action;
  }).join('-');
}

commands.performActions = async function performActions(actions) {
  _logger.default.debug(`Received the following W3C actions: ${JSON.stringify(actions, null, '  ')}`);

  const preprocessedActions = actions.map(action => Object.assign({}, action, action.type === 'pointer' ? {
    parameters: {
      pointerType: 'touch'
    }
  } : {})).map(action => {
    const modifiedAction = _lodash.default.clone(action) || {};
    modifiedAction.actions = (action.actions || []).filter(innerAction => !(innerAction.type === 'pause' && innerAction.duration === 0));
    return modifiedAction;
  });

  _logger.default.debug(`Preprocessed actions: ${JSON.stringify(preprocessedActions, null, '  ')}`);

  return await this.proxyCommand('/actions', 'POST', {
    actions: preprocessedActions
  });
};

commands.performTouch = async function performTouch(gestures) {
  _logger.default.debug(`Received the following touch action: ${gesturesChainToString(gestures)}`);

  try {
    return await this.proxyCommand('/wda/touch/perform', 'POST', {
      actions: gestures
    });
  } catch (e) {
    if (!this.isWebContext()) {
      throw e;
    }

    _logger.default.errorAndThrow('The Touch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate touch events being in WEBVIEW context. Original error: ${e.message}`);
  }
};

commands.performMultiAction = async function performMultiAction(actions) {
  _logger.default.debug(`Received the following multi touch action:`);

  for (let i in actions) {
    _logger.default.debug(`    ${parseInt(i, 10) + 1}: ${_lodash.default.map(actions[i], 'action').join('-')}`);
  }

  try {
    return await this.proxyCommand('/wda/touch/multi/perform', 'POST', {
      actions
    });
  } catch (e) {
    if (!this.isWebContext()) {
      throw e;
    }

    _logger.default.errorAndThrow('The MultiTouch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate multitouch events being in WEBVIEW context. Original error: ${e.message}`);
  }
};

commands.nativeClick = async function nativeClick(el) {
  el = _appiumSupport.util.unwrapElement(el);
  let endpoint = `/element/${el}/click`;
  return await this.proxyCommand(endpoint, 'POST', {});
};

helpers.mobileScroll = async function mobileScroll(opts = {}, swipe = false) {
  if (!opts.element) {
    opts.element = await this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
  }

  let params = {};

  if (opts.name && !swipe) {
    params.name = opts.name;
  } else if (opts.direction) {
    if (!['up', 'down', 'left', 'right'].includes(opts.direction.toLowerCase())) {
      let msg = 'Direction must be up, down, left or right';

      _logger.default.errorAndThrow(msg);
    }

    params.direction = opts.direction;
  } else if (opts.predicateString && !swipe) {
    params.predicateString = opts.predicateString;
  } else if (opts.toVisible && !swipe) {
    params.toVisible = opts.toVisible;
  } else {
    let msg = swipe ? 'Mobile swipe requires direction' : 'Mobile scroll supports the following strategies: name, direction, predicateString, and toVisible. Specify one of these';

    _logger.default.errorAndThrow(msg);
  }

  if (!swipe && opts.distance) {
    params.distance = opts.distance;
  }

  let element = _appiumSupport.util.unwrapElement(opts.element);

  let endpoint = `/wda/element/${element}/${swipe ? 'swipe' : 'scroll'}`;
  return await this.proxyCommand(endpoint, 'POST', params);
};

helpers.mobileSwipe = async function mobileSwipe(opts = {}) {
  return await this.mobileScroll(opts, true);
};

helpers.mobilePinch = async function mobilePinch(opts = {}) {
  if (!opts.element) {
    opts.element = await this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
  }

  const params = {
    scale: requireFloatParameter('scale', opts.scale, 'pinch'),
    velocity: requireFloatParameter('velocity', opts.velocity, 'pinch')
  };

  const el = _appiumSupport.util.unwrapElement(opts.element);

  return await this.proxyCommand(`/wda/element/${el}/pinch`, 'POST', params);
};

helpers.mobileDoubleTap = async function mobileDoubleTap(opts = {}) {
  if (opts.element) {
    const el = _appiumSupport.util.unwrapElement(opts.element);

    return await this.proxyCommand(`/wda/element/${el}/doubleTap`, 'POST');
  }

  const params = {
    x: requireFloatParameter('x', opts.x, 'doubleTap'),
    y: requireFloatParameter('y', opts.y, 'doubleTap')
  };
  return await this.proxyCommand('/wda/doubleTap', 'POST', params);
};

helpers.mobileTwoFingerTap = async function mobileTwoFingerTap(opts = {}) {
  if (!opts.element) {
    opts.element = await this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
  }

  const el = _appiumSupport.util.unwrapElement(opts.element);

  return await this.proxyCommand(`/wda/element/${el}/twoFingerTap`, 'POST');
};

helpers.mobileTouchAndHold = async function mobileTouchAndHold(opts = {}) {
  let params = {
    duration: requireFloatParameter('duration', opts.duration, 'touchAndHold')
  };

  if (opts.element) {
    const el = _appiumSupport.util.unwrapElement(opts.element);

    return await this.proxyCommand(`/wda/element/${el}/touchAndHold`, 'POST', params);
  }

  params.x = requireFloatParameter('x', opts.x, 'touchAndHold');
  params.y = requireFloatParameter('y', opts.y, 'touchAndHold');
  return await this.proxyCommand('/wda/touchAndHold', 'POST', params);
};

helpers.mobileTap = async function mobileTap(opts = {}) {
  const params = {
    x: requireFloatParameter('x', opts.x, 'tap'),
    y: requireFloatParameter('y', opts.y, 'tap')
  };
  const el = opts.element ? _appiumSupport.util.unwrapElement(opts.element) : '0';
  return await this.proxyCommand(`/wda/tap/${el}`, 'POST', params);
};

helpers.mobileDragFromToForDuration = async function mobileDragFromToForDuration(opts = {}) {
  const params = {
    duration: requireFloatParameter('duration', opts.duration, 'dragFromToForDuration'),
    fromX: requireFloatParameter('fromX', opts.fromX, 'dragFromToForDuration'),
    fromY: requireFloatParameter('fromY', opts.fromY, 'dragFromToForDuration'),
    toX: requireFloatParameter('toX', opts.toX, 'dragFromToForDuration'),
    toY: requireFloatParameter('toY', opts.toY, 'dragFromToForDuration')
  };

  if (opts.element) {
    const el = _appiumSupport.util.unwrapElement(opts.element);

    return await this.proxyCommand(`/wda/element/${el}/dragfromtoforduration`, 'POST', params);
  }

  return await this.proxyCommand('/wda/dragfromtoforduration', 'POST', params);
};

helpers.mobileTapWithNumberOfTaps = async function mobileTapWithNumberOfTaps(opts = {}) {
  if (!opts.element) {
    _logger.default.errorAndThrow('Element id is expected to be set for tapWithNumberOfTaps method');
  }

  const params = {
    numberOfTaps: requireIntParameter('numberOfTaps', opts.numberOfTaps, 'tapWithNumberOfTaps'),
    numberOfTouches: requireIntParameter('numberOfTouches', opts.numberOfTouches, 'tapWithNumberOfTaps')
  };

  const el = _appiumSupport.util.unwrapElement(opts.element);

  return await this.proxyCommand(`/wda/element/${el}/tapWithNumberOfTaps`, 'POST', params);
};

helpers.mobileSelectPickerWheelValue = async function mobileSelectPickerWheelValue(opts = {}) {
  if (!opts.element) {
    _logger.default.errorAndThrow('Element id is expected to be set for selectPickerWheelValue method');
  }

  if (!_lodash.default.isString(opts.order) || !['next', 'previous'].includes(opts.order.toLowerCase())) {
    _logger.default.errorAndThrow(`The mandatory 'order' parameter is expected to be equal either to 'next' or 'previous'. ` + `'${opts.order}' is given instead`);
  }

  const el = _appiumSupport.util.unwrapElement(opts.element);

  const params = {
    order: opts.order
  };

  if (opts.offset) {
    params.offset = requireFloatParameter('offset', opts.offset, 'selectPickerWheelValue');
  }

  return await this.proxyCommand(`/wda/pickerwheel/${el}/select`, 'POST', params);
};

helpers.mobileRotateElement = async function mobileRotateElement(opts = {}) {
  if (!opts.element) {
    _logger.default.errorAndThrow('Element id is expected to be set for rotateElement method');
  }

  const el = _appiumSupport.util.unwrapElement(opts.element);

  const params = {
    rotation: requireFloatParameter('rotation', opts.rotation, 'rotateElement'),
    velocity: requireFloatParameter('velocity', opts.velocity, 'rotateElement')
  };
  return await this.proxyCommand(`/wda/element/${el}/rotate`, 'POST', params);
};

helpers.getCoordinates = async function getCoordinates(gesture) {
  let el = gesture.options.element;
  let coordinates = {
    x: 0,
    y: 0,
    areOffsets: false
  };
  let optionX = null;

  if (gesture.options.x) {
    optionX = requireFloatParameter('x', gesture.options.x, 'getCoordinates');
  }

  let optionY = null;

  if (gesture.options.y) {
    optionY = requireFloatParameter('y', gesture.options.y, 'getCoordinates');
  }

  if (el) {
    let rect = await this.getElementRect(el);
    let pos = {
      x: rect.x,
      y: rect.y
    };
    let size = {
      w: rect.width,
      h: rect.height
    };
    let offsetX = 0;
    let offsetY = 0;

    if (optionX || optionY) {
      offsetX = optionX || 0;
      offsetY = optionY || 0;
    } else {
      offsetX = size.w / 2;
      offsetY = size.h / 2;
    }

    coordinates.x = pos.x + offsetX;
    coordinates.y = pos.y + offsetY;
  } else {
    coordinates.areOffsets = gesture.action === 'moveTo';
    coordinates.x = optionX || 0;
    coordinates.y = optionY || 0;
  }

  return coordinates;
};

helpers.applyMoveToOffset = function applyMoveToOffset(firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

Object.assign(extensions, helpers, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
