"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    extensions = {};
exports.commands = commands;
Object.assign(extensions, _appiumIosDriver.iosCommands.element);

commands.getNativeAttribute = async function getNativeAttribute(attribute, el) {
  if (attribute === 'contentSize') {
    return await this.getContentSize(el);
  }

  el = _appiumSupport.util.unwrapElement(el);
  let value = await this.proxyCommand(`/element/${el}/attribute/${attribute}`, 'GET');

  if ([0, 1].includes(value)) {
    value = !!value;
  }

  return _lodash.default.isNull(value) || _lodash.default.isString(value) ? value : JSON.stringify(value);
};

commands.getAttribute = async function getAttribute(attribute, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.getNativeAttribute(attribute, el);
  }

  const atomsElement = this.getAtomsElement(el);

  if (_lodash.default.isNull(atomsElement)) {
    throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}`);
  }

  return await this.executeAtom('get_attribute_value', [atomsElement, attribute]);
};

commands.getText = async function getText(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.proxyCommand(`/element/${el}/text`, 'GET');
  }

  let atomsElement = this.useAtomsElement(el);
  return await this.executeAtom('get_text', [atomsElement]);
};

commands.getElementRect = async function getElementRect(el) {
  if (this.isWebContext()) {
    const {
      x,
      y
    } = await this.getLocation(el);
    const {
      width,
      height
    } = await this.getSize(el);
    return {
      x,
      y,
      width,
      height
    };
  }

  el = _appiumSupport.util.unwrapElement(el);
  return await this.getNativeRect(el);
};

extensions.getNativeRect = async function getNativeRect(el) {
  return await this.proxyCommand(`/element/${el}/rect`, 'GET');
};

commands.getLocation = async function getLocation(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = await this.useAtomsElement(el);
    let loc = await this.executeAtom('get_top_left_coordinates', [atomsElement]);

    if (this.opts.absoluteWebLocations) {
      const script = 'return [document.body.scrollLeft, document.body.scrollTop];';
      const [xOffset, yOffset] = await this.execute(script);
      loc.x += xOffset;
      loc.y += yOffset;
    }

    return loc;
  }

  const rect = await this.getElementRect(el);
  return {
    x: rect.x,
    y: rect.y
  };
};

commands.getLocationInView = async function getLocationInView(el) {
  return await this.getLocation(el);
};

commands.getSize = async function getSize(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    let atomsElement = this.getAtomsElement(el);

    if (atomsElement === null) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
    }

    return await this.executeAtom('get_size', [atomsElement]);
  }

  const rect = await this.getElementRect(el);
  return {
    width: rect.width,
    height: rect.height
  };
};

function prepareInputValue(inp) {
  if (![_lodash.default.isArray, _lodash.default.isString, _lodash.default.isFinite].some(f => f(inp))) {
    throw new Error(`Only strings, numbers and arrays are supported as input arguments. ` + `Received: ${JSON.stringify(inp)}`);
  }

  if (_lodash.default.isArray(inp)) {
    inp = inp.join('');
  } else if (_lodash.default.isFinite(inp)) {
    inp = `${inp}`;
  }

  return [...inp].map(k => {
    if (['\uE006', '\uE007'].includes(k)) {
      return '\n';
    }

    if (['\uE003', '\ue017'].includes(k)) {
      return '\b';
    }

    return k;
  });
}

commands.setValueImmediate = async function setValueImmediate(value, el) {
  _logger.default.info('There is currently no way to bypass typing using XCUITest. Setting value through keyboard');

  await this.setValue(value, el);
};

commands.setValue = async function setValue(value, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    await this.proxyCommand(`/element/${el}/value`, 'POST', {
      value: prepareInputValue(value)
    });
    return;
  }

  const atomsElement = this.useAtomsElement(el);
  await this.executeAtom('click', [atomsElement]);
  await this.executeAtom('type', [atomsElement, value]);
};

commands.keys = async function keys(value) {
  await this.proxyCommand('/wda/keys', 'POST', {
    value: prepareInputValue(value)
  });
};

commands.clear = async function clear(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    await this.executeAtom('clear', [atomsElement]);
    return;
  }

  await this.proxyCommand(`/element/${el}/clear`, 'POST');
};

commands.getContentSize = async function getContentSize(el) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for getContentSize for web context is not yet implemented. Please contact an Appium dev');
  }

  const type = await this.getAttribute('type', el);

  if (type !== 'XCUIElementTypeTable' && type !== 'XCUIElementTypeCollectionView') {
    throw new Error(`Can't get content size for type '${type}', only for ` + `tables and collection views`);
  }

  let locator = '*';

  if (type === 'XCUIElementTypeTable') {
    locator = 'XCUIElementTypeCell';
  }

  let contentHeight = 0;
  const children = await this.findElOrEls(`class chain`, locator, true, el);

  if (children.length === 1) {
    const rect = await this.getElementRect(_lodash.default.head(children));
    contentHeight = rect.height;
  } else if (children.length) {
    switch (type) {
      case 'XCUIElementTypeTable':
        {
          const firstRect = await this.getElementRect(_lodash.default.head(children));
          const lastRect = await this.getElementRect(_lodash.default.last(children));
          contentHeight = lastRect.y + lastRect.height - firstRect.y;
          break;
        }

      case 'XCUIElementTypeCollectionView':
        {
          let elsInRow = 1;
          let firstRect = await this.getElementRect(_lodash.default.head(children));
          let initialRects = [firstRect];

          for (let i = 1; i < children.length; i++) {
            const rect = await this.getElementRect(children[i]);
            initialRects.push(rect);

            if (rect.y !== firstRect.y) {
              elsInRow = i;
              break;
            }
          }

          const spaceBetweenEls = initialRects[elsInRow].y - initialRects[elsInRow - 1].y - initialRects[elsInRow - 1].height;
          const numRows = Math.ceil(children.length / elsInRow);
          contentHeight = numRows * firstRect.height + spaceBetweenEls * (numRows - 1);
          break;
        }

      default:
        throw new Error(`Programming error: type '${type}' was not ` + `valid but should have already been rejected`);
    }
  }

  const size = await this.getSize(el);
  const origin = await this.getLocationInView(el);
  return JSON.stringify({
    width: size.width,
    height: size.height,
    top: origin.y,
    left: origin.x,
    scrollableOffset: contentHeight
  });
};

commands.isKeyboardShown = async function isKeyboardShown() {
  try {
    await this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
    return true;
  } catch (ign) {
    return false;
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
