"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

const MAGIC_FIRST_VIS_CHILD_SEL = /\/\*\[@firstVisible\s*=\s*('|")true\1\]/;
const MAGIC_SCROLLABLE_SEL = /\/\/\*\[@scrollable\s*=\s*('|")true\1\]/;
const WDA_CLASS_CHAIN_STRATEGY = 'class chain';
let helpers = {},
    commands = {},
    extensions = {};
exports.commands = commands;
exports.helpers = helpers;

helpers.findElOrEls = async function findElOrEls(strategy, selector, mult, context) {
  if (this.isWebview()) {
    return await this.findWebElementOrElements(strategy, selector, mult, context);
  } else {
    return await this.findNativeElementOrElements(strategy, selector, mult, context);
  }
};

helpers.findNativeElementOrElements = async function findNativeElementOrElements(strategy, selector, mult, context) {
  const initSelector = selector;
  let rewroteSelector = false;

  if (strategy === '-ios predicate string') {
    strategy = 'predicate string';
  } else if (strategy === '-ios class chain') {
    strategy = WDA_CLASS_CHAIN_STRATEGY;
  }

  function stripViewFromSelector(selector) {
    const keepView = ['XCUIElementTypeScrollView', 'XCUIElementTypeCollectionView', 'XCUIElementTypeTextView', 'XCUIElementTypeWebView'].includes(selector);

    if (!keepView && selector.indexOf('View') === selector.length - 4) {
      return selector.substr(0, selector.length - 4);
    } else {
      return selector;
    }
  }

  if (strategy === 'class name') {
    if (selector.startsWith('UIA')) {
      selector = selector.substring(3);
    }

    if (!selector.startsWith('XCUIElementType')) {
      selector = stripViewFromSelector(`XCUIElementType${selector}`);
      rewroteSelector = true;
    }
  }

  if (strategy === 'xpath' && MAGIC_FIRST_VIS_CHILD_SEL.test(selector)) {
    return await this.getFirstVisibleChild(mult, context);
  } else if (strategy === 'xpath' && MAGIC_SCROLLABLE_SEL.test(selector)) {
    [strategy, selector] = rewriteMagicScrollable(mult);
  } else if (strategy === 'xpath') {
    selector = selector.replace(/(^|\/)(UIA)([^[/]+)/g, (str, g1, g2, g3) => {
      rewroteSelector = true;
      return g1 + stripViewFromSelector(`XCUIElementType${g3}`);
    });
  }

  if (rewroteSelector) {
    _logger.default.info(`Rewrote incoming selector from '${initSelector}' to ` + `'${selector}' to match XCUI type. You should consider ` + `updating your tests to use the new selectors directly`);
  }

  return await this.doNativeFind(strategy, selector, mult, context);
};

helpers.doNativeFind = async function doNativeFind(strategy, selector, mult, context) {
  context = _appiumSupport.util.unwrapElement(context);
  let endpoint = `/element${context ? `/${context}/element` : ''}${mult ? 's' : ''}`;
  let body = {
    using: strategy,
    value: selector
  };
  let method = 'POST';
  let els;

  try {
    await this.implicitWaitForCondition(async () => {
      try {
        els = await this.proxyCommand(endpoint, method, body);
      } catch (err) {
        els = [];
      }

      return !_lodash.default.isEmpty(els);
    });
  } catch (err) {
    if (err.message && err.message.match(/Condition unmet/)) {
      els = [];
    } else {
      throw err;
    }
  }

  if (mult) {
    return els;
  }

  if (_lodash.default.isEmpty(els)) {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }

  return els;
};

helpers.getFirstVisibleChild = async function getFirstVisibleChild(mult, context) {
  _logger.default.info(`Getting first visible child`);

  if (mult) {
    throw new Error('Cannot get multiple first visible children!');
  }

  if (!context) {
    throw new Error('Cannot get first visible child without a context element');
  }

  let index = 1;

  while (true) {
    const strategy = WDA_CLASS_CHAIN_STRATEGY;
    const selector = `*[${index}]`;
    const nthChild = await this.doNativeFind(strategy, selector, false, context);
    const visible = await this.getAttribute('visible', nthChild);

    if (visible === 'true') {
      _logger.default.info(`Found first visible child at position ${index}`);

      return nthChild;
    }

    index++;
  }
};

function rewriteMagicScrollable(mult) {
  const pred = ['ScrollView', 'Table', 'CollectionView', 'WebView'].map(t => `type == "XCUIElementType${t}"`).join(' OR ');
  const strategy = WDA_CLASS_CHAIN_STRATEGY;
  let selector = '**/*[`' + pred + '`]';

  if (!mult) {
    selector += '[1]';
  }

  _logger.default.info('Rewrote request for scrollable descendants to class chain ' + `format with selector '${selector}'`);

  return [strategy, selector];
}

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
