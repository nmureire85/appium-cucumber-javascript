"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {};
exports.commands = commands;

commands.getWindowSize = async function getWindowSize() {
  const size = await this.winAppDriver.sendCommand('/window/size', 'GET');

  if (_lodash.default.isPlainObject(size)) {
    return size;
  }

  _logger.default.info('Cannot retrieve window size from WinAppDriver. ' + 'Falling back to Windows Forms to calculate dimensions');

  return await getScreenSize();
};

async function getScreenSize() {
  const {
    stdout
  } = await (0, _teen_process.exec)('powershell', ['-command', 'Add-Type -AssemblyName System.Windows.Forms;[System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Size']);

  _logger.default.debug(`Screen size information retrieved: ${stdout}`);

  const match = /^\s*(True|False)\s+(\d+)\s+(\d+)/m.exec(stdout);

  if (!match) {
    throw new Error('Cannot retrieve the screen size. Check the server log for more details');
  }

  return {
    width: parseInt(match[2], 10),
    height: parseInt(match[3], 10)
  };
}

commands.getScreenshot = async function getScreenshot() {
  return await this.winAppDriver.sendCommand('/screenshot', 'GET');
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiZ2V0V2luZG93U2l6ZSIsInNpemUiLCJ3aW5BcHBEcml2ZXIiLCJzZW5kQ29tbWFuZCIsIl8iLCJpc1BsYWluT2JqZWN0IiwibG9nIiwiaW5mbyIsImdldFNjcmVlblNpemUiLCJzdGRvdXQiLCJkZWJ1ZyIsIm1hdGNoIiwiZXhlYyIsIkVycm9yIiwid2lkdGgiLCJwYXJzZUludCIsImhlaWdodCIsImdldFNjcmVlbnNob3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCOzs7QUFJQUEsUUFBUSxDQUFDQyxhQUFULEdBQXlCLGVBQWVBLGFBQWYsR0FBZ0M7QUFDdkQsUUFBTUMsSUFBSSxHQUFHLE1BQU0sS0FBS0MsWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsY0FBOUIsRUFBOEMsS0FBOUMsQ0FBbkI7O0FBQ0EsTUFBSUMsZ0JBQUVDLGFBQUYsQ0FBZ0JKLElBQWhCLENBQUosRUFBMkI7QUFDekIsV0FBT0EsSUFBUDtBQUNEOztBQUVESyxrQkFBSUMsSUFBSixDQUFTLG9EQUNMLHVEQURKOztBQUVBLFNBQU8sTUFBTUMsYUFBYSxFQUExQjtBQUNELENBVEQ7O0FBV0EsZUFBZUEsYUFBZixHQUFnQztBQUM5QixRQUFNO0FBQUNDLElBQUFBO0FBQUQsTUFBVyxNQUFNLHdCQUFLLFlBQUwsRUFBbUIsQ0FDeEMsVUFEd0MsRUFDNUIsc0dBRDRCLENBQW5CLENBQXZCOztBQUdBSCxrQkFBSUksS0FBSixDQUFXLHNDQUFxQ0QsTUFBTyxFQUF2RDs7QUFDQSxRQUFNRSxLQUFLLEdBQUcsb0NBQW9DQyxJQUFwQyxDQUF5Q0gsTUFBekMsQ0FBZDs7QUFDQSxNQUFJLENBQUNFLEtBQUwsRUFBWTtBQUNWLFVBQU0sSUFBSUUsS0FBSixDQUFVLHdFQUFWLENBQU47QUFDRDs7QUFDRCxTQUFPO0FBQ0xDLElBQUFBLEtBQUssRUFBRUMsUUFBUSxDQUFDSixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQURWO0FBRUxLLElBQUFBLE1BQU0sRUFBRUQsUUFBUSxDQUFDSixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWDtBQUZYLEdBQVA7QUFJRDs7QUFFRFosUUFBUSxDQUFDa0IsYUFBVCxHQUF5QixlQUFlQSxhQUFmLEdBQWdDO0FBQ3ZELFNBQU8sTUFBTSxLQUFLZixZQUFMLENBQWtCQyxXQUFsQixDQUE4QixhQUE5QixFQUE2QyxLQUE3QyxDQUFiO0FBQ0QsQ0FGRDs7ZUFLZUosUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuLy8gVGhlIG5leHQgdHdvIGNvbW1hbmRzIGFyZSByZXF1aXJlZFxuLy8gZm9yIHByb3BlciBgLWltYWdlYCBsb2NhdG9yIGZ1bmN0aW9uYWxpdHlcbmNvbW1hbmRzLmdldFdpbmRvd1NpemUgPSBhc3luYyBmdW5jdGlvbiBnZXRXaW5kb3dTaXplICgpIHtcbiAgY29uc3Qgc2l6ZSA9IGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnNlbmRDb21tYW5kKCcvd2luZG93L3NpemUnLCAnR0VUJyk7XG4gIGlmIChfLmlzUGxhaW5PYmplY3Qoc2l6ZSkpIHtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuICAvLyB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1dpbkFwcERyaXZlci9pc3N1ZXMvMTEwNFxuICBsb2cuaW5mbygnQ2Fubm90IHJldHJpZXZlIHdpbmRvdyBzaXplIGZyb20gV2luQXBwRHJpdmVyLiAnICtcbiAgICAgICdGYWxsaW5nIGJhY2sgdG8gV2luZG93cyBGb3JtcyB0byBjYWxjdWxhdGUgZGltZW5zaW9ucycpO1xuICByZXR1cm4gYXdhaXQgZ2V0U2NyZWVuU2l6ZSgpO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0U2NyZWVuU2l6ZSAoKSB7XG4gIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygncG93ZXJzaGVsbCcsIFtcbiAgICAnLWNvbW1hbmQnLCAnQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uV2luZG93cy5Gb3JtcztbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Cb3VuZHMuU2l6ZScsXG4gIF0pO1xuICBsb2cuZGVidWcoYFNjcmVlbiBzaXplIGluZm9ybWF0aW9uIHJldHJpZXZlZDogJHtzdGRvdXR9YCk7XG4gIGNvbnN0IG1hdGNoID0gL15cXHMqKFRydWV8RmFsc2UpXFxzKyhcXGQrKVxccysoXFxkKykvbS5leGVjKHN0ZG91dCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZXRyaWV2ZSB0aGUgc2NyZWVuIHNpemUuIENoZWNrIHRoZSBzZXJ2ZXIgbG9nIGZvciBtb3JlIGRldGFpbHMnKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoOiBwYXJzZUludChtYXRjaFsyXSwgMTApLFxuICAgIGhlaWdodDogcGFyc2VJbnQobWF0Y2hbM10sIDEwKSxcbiAgfTtcbn1cblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFNjcmVlbnNob3QgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc2VuZENvbW1hbmQoJy9zY3JlZW5zaG90JywgJ0dFVCcpO1xufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
