"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _os = _interopRequireDefault(require("os"));

const commands = {};
const RETRY_PAUSE = 300;
const RETRY_TIMEOUT = 5000;
const DEFAULT_TIME_LIMIT = 60 * 10;
const PROCESS_SHUTDOWN_TIMEOUT = 10 * 1000;
const DEFAULT_EXT = 'mp4';
const FFMPEG_BINARY = `ffmpeg${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
const DEFAULT_FPS = 15;
const DEFAULT_PRESET = 'veryfast';

async function uploadRecordedMedia(localFile, remotePath = null, uploadOptions = {}) {
  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _appiumSupport.fs.stat(localFile);

    _logger.default.debug(`The size of the resulting screen recording is ${_appiumSupport.util.toReadableSizeString(size)}`);

    return (await _appiumSupport.util.toInMemoryBase64(localFile)).toString();
  }

  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields
  };

  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }

  await _appiumSupport.net.uploadFile(localFile, remotePath, options);
  return '';
}

async function requireFfmpegPath() {
  try {
    return await _appiumSupport.fs.which(FFMPEG_BINARY);
  } catch (e) {
    _logger.default.errorAndThrow(`${FFMPEG_BINARY} has not been found in PATH. ` + `Please make sure it is installed`);
  }
}

class ScreenRecorder {
  constructor(videoPath, opts = {}) {
    this._videoPath = videoPath;
    this._process = null;
    this._fps = opts.fps && opts.fps > 0 ? opts.fps : DEFAULT_FPS;
    this._audioInput = opts.audioInput;
    this._captureCursor = opts.captureCursor;
    this._captureClicks = opts.captureClicks;
    this._preset = opts.preset || DEFAULT_PRESET;
    this._videoFilter = opts.videoFilter;
    this._timeLimit = opts.timeLimit && opts.timeLimit > 0 ? opts.timeLimit : DEFAULT_TIME_LIMIT;
  }

  async getVideoPath() {
    return (await _appiumSupport.fs.exists(this._videoPath)) ? this._videoPath : '';
  }

  isRunning() {
    var _this$_process;

    return !!((_this$_process = this._process) === null || _this$_process === void 0 ? void 0 : _this$_process.isRunning);
  }

  async _enforceTermination() {
    if (this._process && this.isRunning()) {
      _logger.default.debug('Force-stopping the currently running video recording');

      try {
        await this._process.stop('SIGKILL');
      } catch (ign) {}
    }

    this._process = null;
    const videoPath = await this.getVideoPath();

    if (videoPath) {
      await _appiumSupport.fs.rimraf(videoPath);
    }

    return '';
  }

  async start() {
    const ffmpeg = await requireFfmpegPath();
    const args = ['-loglevel', 'error', '-t', `${this._timeLimit}`, '-f', 'gdigrab', ...(this._captureCursor ? ['-capture_cursor', '1'] : []), ...(this._captureClicks ? ['-capture_mouse_clicks', '1'] : []), '-framerate', `${this._fps}`, '-i', 'desktop', ...(this._audioInput ? ['-f', 'dshow', '-i', `audio=${this._audioInput}`] : []), '-vcodec', 'libx264', '-preset', this._preset, '-tune', 'zerolatency', '-pix_fmt', 'yuv420p', '-movflags', '+faststart', '-fflags', 'nobuffer', '-f', DEFAULT_EXT, '-r', `${this._fps}`, ...(this._videoFilter ? ['-filter:v', this._videoFilter] : [])];
    const fullCmd = [ffmpeg, ...args, this._videoPath];
    this._process = new _teen_process.SubProcess(fullCmd[0], fullCmd.slice(1), {
      windowsHide: true
    });

    _logger.default.debug(`Starting ${FFMPEG_BINARY}: ${_appiumSupport.util.quote(fullCmd)}`);

    this._process.on('output', (stdout, stderr) => {
      if (_lodash.default.trim(stdout || stderr)) {
        _logger.default.debug(`[${FFMPEG_BINARY}] ${stdout || stderr}`);
      }
    });

    this._process.once('exit', async (code, signal) => {
      this._process = null;

      if (code === 0) {
        _logger.default.debug('Screen recording exited without errors');
      } else {
        await this._enforceTermination();

        _logger.default.warn(`Screen recording exited with error code ${code}, signal ${signal}`);
      }
    });

    await this._process.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (await this.getVideoPath()) {
          return true;
        }

        if (!this._process) {
          throw new Error(`${FFMPEG_BINARY} process died unexpectedly`);
        }

        return false;
      }, {
        waitMs: RETRY_TIMEOUT,
        intervalMs: RETRY_PAUSE
      });
    } catch (e) {
      await this._enforceTermination();

      _logger.default.errorAndThrow(`The expected screen record file '${this._videoPath}' does not exist. ` + `Check the server log for more details`);
    }

    _logger.default.info(`The video recording has started. Will timeout in ${_appiumSupport.util.pluralize('second', this._timeLimit, true)}`);
  }

  async stop(force = false) {
    if (force) {
      return await this._enforceTermination();
    }

    if (!this.isRunning()) {
      _logger.default.debug('Screen recording is not running. Returning the recent result');

      return await this.getVideoPath();
    }

    return new _bluebird.default((resolve, reject) => {
      const timer = setTimeout(async () => {
        await this._enforceTermination();
        reject(new Error(`Screen recording has failed to exit after ${PROCESS_SHUTDOWN_TIMEOUT}ms`));
      }, PROCESS_SHUTDOWN_TIMEOUT);

      this._process.once('exit', async (code, signal) => {
        clearTimeout(timer);

        if (code === 0) {
          resolve((await this.getVideoPath()));
        } else {
          reject(new Error(`Screen recording exited with error code ${code}, signal ${signal}`));
        }
      });

      this._process.proc.stdin.write('q');

      this._process.proc.stdin.end();
    });
  }

}

commands.startRecordingScreen = async function startRecordingScreen(options = {}) {
  var _this$_screenRecorder, _this$_screenRecorder2;

  const {
    timeLimit,
    videoFilter,
    fps,
    preset,
    captureCursor,
    captureClicks,
    audioInput,
    forceRestart = true
  } = options;

  if ((_this$_screenRecorder = this._screenRecorder) === null || _this$_screenRecorder === void 0 ? void 0 : (_this$_screenRecorder2 = _this$_screenRecorder.isRunning) === null || _this$_screenRecorder2 === void 0 ? void 0 : _this$_screenRecorder2.call(_this$_screenRecorder)) {
    _logger.default.debug('The screen recording is already running');

    if (!forceRestart) {
      _logger.default.debug('Doing nothing');

      return;
    }

    _logger.default.debug('Forcing the active screen recording to stop');

    await this._screenRecorder.stop(true);
  }

  this._screenRecorder = null;

  const videoPath = _path.default.resolve(_os.default.tmpdir(), `${_appiumSupport.util.uuidV4().substring(0, 8)}.${DEFAULT_EXT}`);

  this._screenRecorder = new ScreenRecorder(videoPath, {
    fps: parseInt(fps, 10),
    timeLimit: parseInt(timeLimit, 10),
    preset,
    captureCursor,
    captureClicks,
    videoFilter,
    audioInput
  });

  try {
    await this._screenRecorder.start();
  } catch (e) {
    this._screenRecorder = null;
    throw e;
  }
};

commands.stopRecordingScreen = async function stopRecordingScreen(options = {}) {
  if (!this._screenRecorder) {
    _logger.default.debug('No screen recording has been started. Doing nothing');

    return '';
  }

  _logger.default.debug('Retrieving the resulting video data');

  const videoPath = await this._screenRecorder.stop();

  if (!videoPath) {
    _logger.default.debug('No video data is found. Returning an empty string');

    return '';
  }

  return await uploadRecordedMedia(videoPath, options.remotePath, options);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9yZWNvcmQtc2NyZWVuLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiUkVUUllfUEFVU0UiLCJSRVRSWV9USU1FT1VUIiwiREVGQVVMVF9USU1FX0xJTUlUIiwiUFJPQ0VTU19TSFVURE9XTl9USU1FT1VUIiwiREVGQVVMVF9FWFQiLCJGRk1QRUdfQklOQVJZIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiREVGQVVMVF9GUFMiLCJERUZBVUxUX1BSRVNFVCIsInVwbG9hZFJlY29yZGVkTWVkaWEiLCJsb2NhbEZpbGUiLCJyZW1vdGVQYXRoIiwidXBsb2FkT3B0aW9ucyIsIl8iLCJpc0VtcHR5Iiwic2l6ZSIsImZzIiwic3RhdCIsImxvZyIsImRlYnVnIiwidXRpbCIsInRvUmVhZGFibGVTaXplU3RyaW5nIiwidG9Jbk1lbW9yeUJhc2U2NCIsInRvU3RyaW5nIiwidXNlciIsInBhc3MiLCJtZXRob2QiLCJoZWFkZXJzIiwiZmlsZUZpZWxkTmFtZSIsImZvcm1GaWVsZHMiLCJvcHRpb25zIiwiYXV0aCIsIm5ldCIsInVwbG9hZEZpbGUiLCJyZXF1aXJlRmZtcGVnUGF0aCIsIndoaWNoIiwiZSIsImVycm9yQW5kVGhyb3ciLCJTY3JlZW5SZWNvcmRlciIsImNvbnN0cnVjdG9yIiwidmlkZW9QYXRoIiwib3B0cyIsIl92aWRlb1BhdGgiLCJfcHJvY2VzcyIsIl9mcHMiLCJmcHMiLCJfYXVkaW9JbnB1dCIsImF1ZGlvSW5wdXQiLCJfY2FwdHVyZUN1cnNvciIsImNhcHR1cmVDdXJzb3IiLCJfY2FwdHVyZUNsaWNrcyIsImNhcHR1cmVDbGlja3MiLCJfcHJlc2V0IiwicHJlc2V0IiwiX3ZpZGVvRmlsdGVyIiwidmlkZW9GaWx0ZXIiLCJfdGltZUxpbWl0IiwidGltZUxpbWl0IiwiZ2V0VmlkZW9QYXRoIiwiZXhpc3RzIiwiaXNSdW5uaW5nIiwiX2VuZm9yY2VUZXJtaW5hdGlvbiIsInN0b3AiLCJpZ24iLCJyaW1yYWYiLCJzdGFydCIsImZmbXBlZyIsImFyZ3MiLCJmdWxsQ21kIiwiU3ViUHJvY2VzcyIsInNsaWNlIiwid2luZG93c0hpZGUiLCJxdW90ZSIsIm9uIiwic3Rkb3V0Iiwic3RkZXJyIiwidHJpbSIsIm9uY2UiLCJjb2RlIiwic2lnbmFsIiwid2FybiIsIkVycm9yIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsImluZm8iLCJwbHVyYWxpemUiLCJmb3JjZSIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwidGltZXIiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicHJvYyIsInN0ZGluIiwid3JpdGUiLCJlbmQiLCJzdGFydFJlY29yZGluZ1NjcmVlbiIsImZvcmNlUmVzdGFydCIsIl9zY3JlZW5SZWNvcmRlciIsInBhdGgiLCJvcyIsInRtcGRpciIsInV1aWRWNCIsInN1YnN0cmluZyIsInBhcnNlSW50Iiwic3RvcFJlY29yZGluZ1NjcmVlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFFQSxNQUFNQyxXQUFXLEdBQUcsR0FBcEI7QUFDQSxNQUFNQyxhQUFhLEdBQUcsSUFBdEI7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxLQUFLLEVBQWhDO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsS0FBSyxJQUF0QztBQUNBLE1BQU1DLFdBQVcsR0FBRyxLQUFwQjtBQUNBLE1BQU1DLGFBQWEsR0FBSSxTQUFRQyxzQkFBT0MsU0FBUCxLQUFxQixNQUFyQixHQUE4QixFQUFHLEVBQWhFO0FBQ0EsTUFBTUMsV0FBVyxHQUFHLEVBQXBCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLFVBQXZCOztBQUdBLGVBQWVDLG1CQUFmLENBQW9DQyxTQUFwQyxFQUErQ0MsVUFBVSxHQUFHLElBQTVELEVBQWtFQyxhQUFhLEdBQUcsRUFBbEYsRUFBc0Y7QUFDcEYsTUFBSUMsZ0JBQUVDLE9BQUYsQ0FBVUgsVUFBVixDQUFKLEVBQTJCO0FB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SUMsS0FBSixDQUFVLHFDQUFWOztBQUNBLFFBQU1xQixTQUFTLEdBQUcsTUFBTSxLQUFLMkQsZUFBTCxDQUFxQnJDLElBQXJCLEVBQXhCOztBQUNBLE1BQUksQ0FBQ3RCLFNBQUwsRUFBZ0I7QUFDZHRCLG9CQUFJQyxLQUFKLENBQVUsbURBQVY7O0FBQ0EsV0FBTyxFQUFQO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNVixtQkFBbUIsQ0FBQytCLFNBQUQsRUFBWVYsT0FBTyxDQUFDbkIsVUFBcEIsRUFBZ0NtQixPQUFoQyxDQUFoQztBQUNELENBYkQ7O2VBZWVoQyxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyB1dGlsLCBmcywgbmV0LCBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG5jb25zdCBSRVRSWV9QQVVTRSA9IDMwMDtcbmNvbnN0IFJFVFJZX1RJTUVPVVQgPSA1MDAwO1xuY29uc3QgREVGQVVMVF9USU1FX0xJTUlUID0gNjAgKiAxMDsgLy8gMTAgbWludXRlc1xuY29uc3QgUFJPQ0VTU19TSFVURE9XTl9USU1FT1VUID0gMTAgKiAxMDAwO1xuY29uc3QgREVGQVVMVF9FWFQgPSAnbXA0JztcbmNvbnN0IEZGTVBFR19CSU5BUlkgPSBgZmZtcGVnJHtzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnLmV4ZScgOiAnJ31gO1xuY29uc3QgREVGQVVMVF9GUFMgPSAxNTtcbmNvbnN0IERFRkFVTFRfUFJFU0VUID0gJ3ZlcnlmYXN0JztcblxuXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRSZWNvcmRlZE1lZGlhIChsb2NhbEZpbGUsIHJlbW90ZVBhdGggPSBudWxsLCB1cGxvYWRPcHRpb25zID0ge30pIHtcbiAgaWYgKF8uaXNFbXB0eShyZW1vdGVQYXRoKSkge1xuICAgIGNvbnN0IHtzaXplfSA9IGF3YWl0IGZzLnN0YXQobG9jYWxGaWxlKTtcbiAgICBsb2cuZGVidWcoYFRoZSBzaXplIG9mIHRoZSByZXN1bHRpbmcgc2NyZWVuIHJlY29yZGluZyBpcyAke3V0aWwudG9SZWFkYWJsZVNpemVTdHJpbmcoc2l6ZSl9YCk7XG4gICAgcmV0dXJuIChhd2FpdCB1dGlsLnRvSW5NZW1vcnlCYXNlNjQobG9jYWxGaWxlKSkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGNvbnN0IHt1c2VyLCBwYXNzLCBtZXRob2QsIGhlYWRlcnMsIGZpbGVGaWVsZE5hbWUsIGZvcm1GaWVsZHN9ID0gdXBsb2FkT3B0aW9ucztcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtZXRob2Q6IG1ldGhvZCB8fCAnUFVUJyxcbiAgICBoZWFkZXJzLFxuICAgIGZpbGVGaWVsZE5hbWUsXG4gICAgZm9ybUZpZWxkcyxcbiAgfTtcbiAgaWYgKHVzZXIgJiYgcGFzcykge1xuICAgIG9wdGlvbnMuYXV0aCA9IHt1c2VyLCBwYXNzfTtcbiAgfVxuICBhd2FpdCBuZXQudXBsb2FkRmlsZShsb2NhbEZpbGUsIHJlbW90ZVBhdGgsIG9wdGlvbnMpO1xuICByZXR1cm4gJyc7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlcXVpcmVGZm1wZWdQYXRoICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgZnMud2hpY2goRkZNUEVHX0JJTkFSWSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgJHtGRk1QRUdfQklOQVJZfSBoYXMgbm90IGJlZW4gZm91bmQgaW4gUEFUSC4gYCArXG4gICAgICBgUGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWRgKTtcbiAgfVxufVxuXG5jbGFzcyBTY3JlZW5SZWNvcmRlciB7XG4gIGNvbnN0cnVjdG9yICh2aWRlb1BhdGgsIG9wdHMgPSB7fSkge1xuICAgIHRoaXMuX3ZpZGVvUGF0aCA9IHZpZGVvUGF0aDtcbiAgICB0aGlzLl9wcm9jZXNzID0gbnVsbDtcbiAgICB0aGlzLl9mcHMgPSAob3B0cy5mcHMgJiYgb3B0cy5mcHMgPiAwKSA/IG9wdHMuZnBzIDogREVGQVVMVF9GUFM7XG4gICAgdGhpcy5fYXVkaW9JbnB1dCA9IG9wdHMuYXVkaW9JbnB1dDtcbiAgICB0aGlzLl9jYXB0dXJlQ3Vyc29yID0gb3B0cy5jYXB0dXJlQ3Vyc29yO1xuICAgIHRoaXMuX2NhcHR1cmVDbGlja3MgPSBvcHRzLmNhcHR1cmVDbGlja3M7XG4gICAgdGhpcy5fcHJlc2V0ID0gb3B0cy5wcmVzZXQgfHwgREVGQVVMVF9QUkVTRVQ7XG4gICAgdGhpcy5fdmlkZW9GaWx0ZXIgPSBvcHRzLnZpZGVvRmlsdGVyO1xuICAgIHRoaXMuX3RpbWVMaW1pdCA9IChvcHRzLnRpbWVMaW1pdCAmJiBvcHRzLnRpbWVMaW1pdCA+IDApXG4gICAgICA/IG9wdHMudGltZUxpbWl0XG4gICAgICA6IERFRkFVTFRfVElNRV9MSU1JVDtcbiAgfVxuXG4gIGFzeW5jIGdldFZpZGVvUGF0aCAoKSB7XG4gICAgcmV0dXJuIChhd2FpdCBmcy5leGlzdHModGhpcy5fdmlkZW9QYXRoKSkgPyB0aGlzLl92aWRlb1BhdGggOiAnJztcbiAgfVxuXG4gIGlzUnVubmluZyAoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuX3Byb2Nlc3M/LmlzUnVubmluZyk7XG4gIH1cblxuICBhc3luYyBfZW5mb3JjZVRlcm1pbmF0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcHJvY2VzcyAmJiB0aGlzLmlzUnVubmluZygpKSB7XG4gICAgICBsb2cuZGVidWcoJ0ZvcmNlLXN0b3BwaW5nIHRoZSBjdXJyZW50bHkgcnVubmluZyB2aWRlbyByZWNvcmRpbmcnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3Byb2Nlc3Muc3RvcCgnU0lHS0lMTCcpO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIH1cbiAgICB0aGlzLl9wcm9jZXNzID0gbnVsbDtcbiAgICBjb25zdCB2aWRlb1BhdGggPSBhd2FpdCB0aGlzLmdldFZpZGVvUGF0aCgpO1xuICAgIGlmICh2aWRlb1BhdGgpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZih2aWRlb1BhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBhc3luYyBzdGFydCAoKSB7XG4gICAgY29uc3QgZmZtcGVnID0gYXdhaXQgcmVxdWlyZUZmbXBlZ1BhdGgoKTtcblxuICAgIGNvbnN0IGFyZ3MgPSBbXG4gICAgICAnLWxvZ2xldmVsJywgJ2Vycm9yJyxcbiAgICAgICctdCcsIGAke3RoaXMuX3RpbWVMaW1pdH1gLFxuICAgICAgJy1mJywgJ2dkaWdyYWInLFxuICAgICAgLi4uKHRoaXMuX2NhcHR1cmVDdXJzb3IgPyBbJy1jYXB0dXJlX2N1cnNvcicsICcxJ10gOiBbXSksXG4gICAgICAuLi4odGhpcy5fY2FwdHVyZUNsaWNrcyA/IFsnLWNhcHR1cmVfbW91c2VfY2xpY2tzJywgJzEnXSA6IFtdKSxcbiAgICAgICctZnJhbWVyYXRlJywgYCR7dGhpcy5fZnBzfWAsXG4gICAgICAnLWknLCAnZGVza3RvcCcsXG4gICAgICAuLi4odGhpcy5fYXVkaW9JbnB1dCA/IFsnLWYnLCAnZHNob3cnLCAnLWknLCBgYXVkaW89JHt0aGlzLl9hdWRpb0lucHV0fWBdIDogW10pLFxuICAgICAgJy12Y29kZWMnLCAnbGlieDI2NCcsXG4gICAgICAnLXByZXNldCcsIHRoaXMuX3ByZXNldCxcbiAgICAgICctdHVuZScsICd6ZXJvbGF0ZW5jeScsXG4gICAgICAnLXBpeF9mbXQnLCAneXV2NDIwcCcsXG4gICAgICAnLW1vdmZsYWdzJywgJytmYXN0c3RhcnQnLFxuICAgICAgJy1mZmxhZ3MnLCAnbm9idWZmZXInLFxuICAgICAgJy1mJywgREVGQVVMVF9FWFQsXG4gICAgICAnLXInLCBgJHt0aGlzLl9mcHN9YCxcbiAgICAgIC4uLih0aGlzLl92aWRlb0ZpbHRlciA/IFsnLWZpbHRlcjp2JywgdGhpcy5fdmlkZW9GaWx0ZXJdIDogW10pLFxuICAgIF07XG5cbiAgICBjb25zdCBmdWxsQ21kID0gW1xuICAgICAgZmZtcGVnLFxuICAgICAgLi4uYXJncyxcbiAgICAgIHRoaXMuX3ZpZGVvUGF0aCxcbiAgICBdO1xuICAgIHRoaXMuX3Byb2Nlc3MgPSBuZXcgU3ViUHJvY2VzcyhmdWxsQ21kWzBdLCBmdWxsQ21kLnNsaWNlKDEpLCB7XG4gICAgICB3aW5kb3dzSGlkZTogdHJ1ZSxcbiAgICB9KTtcbiAgICBsb2cuZGVidWcoYFN0YXJ0aW5nICR7RkZNUEVHX0JJTkFSWX06ICR7dXRpbC5xdW90ZShmdWxsQ21kKX1gKTtcbiAgICB0aGlzLl9wcm9jZXNzLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgIGlmIChfLnRyaW0oc3Rkb3V0IHx8IHN0ZGVycikpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBbJHtGRk1QRUdfQklOQVJZfV0gJHtzdGRvdXQgfHwgc3RkZXJyfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3Byb2Nlc3Mub25jZSgnZXhpdCcsIGFzeW5jIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIHRoaXMuX3Byb2Nlc3MgPSBudWxsO1xuICAgICAgaWYgKGNvZGUgPT09IDApIHtcbiAgICAgICAgbG9nLmRlYnVnKCdTY3JlZW4gcmVjb3JkaW5nIGV4aXRlZCB3aXRob3V0IGVycm9ycycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fZW5mb3JjZVRlcm1pbmF0aW9uKCk7XG4gICAgICAgIGxvZy53YXJuKGBTY3JlZW4gcmVjb3JkaW5nIGV4aXRlZCB3aXRoIGVycm9yIGNvZGUgJHtjb2RlfSwgc2lnbmFsICR7c2lnbmFsfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGF3YWl0IHRoaXMuX3Byb2Nlc3Muc3RhcnQoMCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy5nZXRWaWRlb1BhdGgoKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fcHJvY2Vzcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtGRk1QRUdfQklOQVJZfSBwcm9jZXNzIGRpZWQgdW5leHBlY3RlZGx5YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSwge1xuICAgICAgICB3YWl0TXM6IFJFVFJZX1RJTUVPVVQsXG4gICAgICAgIGludGVydmFsTXM6IFJFVFJZX1BBVVNFLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgdGhpcy5fZW5mb3JjZVRlcm1pbmF0aW9uKCk7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIGV4cGVjdGVkIHNjcmVlbiByZWNvcmQgZmlsZSAnJHt0aGlzLl92aWRlb1BhdGh9JyBkb2VzIG5vdCBleGlzdC4gYCArXG4gICAgICAgIGBDaGVjayB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBkZXRhaWxzYCk7XG4gICAgfVxuICAgIGxvZy5pbmZvKGBUaGUgdmlkZW8gcmVjb3JkaW5nIGhhcyBzdGFydGVkLiBXaWxsIHRpbWVvdXQgaW4gJHt1dGlsLnBsdXJhbGl6ZSgnc2Vjb25kJywgdGhpcy5fdGltZUxpbWl0LCB0cnVlKX1gKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3AgKGZvcmNlID0gZmFsc2UpIHtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lbmZvcmNlVGVybWluYXRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgIGxvZy5kZWJ1ZygnU2NyZWVuIHJlY29yZGluZyBpcyBub3QgcnVubmluZy4gUmV0dXJuaW5nIHRoZSByZWNlbnQgcmVzdWx0Jyk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRWaWRlb1BhdGgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fZW5mb3JjZVRlcm1pbmF0aW9uKCk7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNjcmVlbiByZWNvcmRpbmcgaGFzIGZhaWxlZCB0byBleGl0IGFmdGVyICR7UFJPQ0VTU19TSFVURE9XTl9USU1FT1VUfW1zYCkpO1xuICAgICAgfSwgUFJPQ0VTU19TSFVURE9XTl9USU1FT1VUKTtcblxuICAgICAgdGhpcy5fcHJvY2Vzcy5vbmNlKCdleGl0JywgYXN5bmMgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgICAgIHJlc29sdmUoYXdhaXQgdGhpcy5nZXRWaWRlb1BhdGgoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU2NyZWVuIHJlY29yZGluZyBleGl0ZWQgd2l0aCBlcnJvciBjb2RlICR7Y29kZX0sIHNpZ25hbCAke3NpZ25hbH1gKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9wcm9jZXNzLnByb2Muc3RkaW4ud3JpdGUoJ3EnKTtcbiAgICAgIHRoaXMuX3Byb2Nlc3MucHJvYy5zdGRpbi5lbmQoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhcnRSZWNvcmRpbmdPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB2aWRlb0ZpbHRlciAtIFRoZSB2aWRlbyBmaWx0ZXIgc3BlYyB0byBhcHBseSBmb3IgZmZtcGVnLlxuICogU2VlIGh0dHBzOi8vdHJhYy5mZm1wZWcub3JnL3dpa2kvRmlsdGVyaW5nR3VpZGUgZm9yIG1vcmUgZGV0YWlscyBvbiB0aGUgcG9zc2libGUgdmFsdWVzLlxuICogRXhhbXBsZTogU2V0IGl0IHRvIGBzY2FsZT1pZm5vdChndGUoaXdcXCwxMDI0KVxcLGl3XFwsMTAyNCk6LTJgIGluIG9yZGVyIHRvIGxpbWl0IHRoZSB2aWRlbyB3aWR0aFxuICogdG8gMTAyNHB4LiBUaGUgaGVpZ2h0IHdpbGwgYmUgYWRqdXN0ZWQgYXV0b21hdGljYWxseSB0byBtYXRjaCB0aGUgYWN0dWFsIHJhdGlvLlxuICogQHByb3BlcnR5IHtudW1iZXJ8c3RyaW5nfSBmcHMgWzE1XSAtIFRoZSBjb3VudCBvZiBmcmFtZXMgcGVyIHNlY29uZCBpbiB0aGUgcmVzdWx0aW5nIHZpZGVvLlxuICogVGhlIGdyZWF0ZXIgZnBzIGl0IGhhcyB0aGUgYmlnZ2VyIGZpbGUgc2l6ZSBpcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcmVzZXQgW3ZlcnlmYXN0XSAtIE9uZSBvZiB0aGUgc3VwcG9ydGVkIGVuY29kaW5nIHByZXNldHMuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gKiAtIHVsdHJhZmFzdFxuICogLSBzdXBlcmZhc3RcbiAqIC0gdmVyeWZhc3RcbiAqIC0gZmFzdGVyXG4gKiAtIGZhc3RcbiAqIC0gbWVkaXVtXG4gKiAtIHNsb3dcbiAqIC0gc2xvd2VyXG4gKiAtIHZlcnlzbG93XG4gKiBBIHByZXNldCBpcyBhIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgcHJvdmlkZSBhIGNlcnRhaW4gZW5jb2Rpbmcgc3BlZWQgdG8gY29tcHJlc3Npb24gcmF0aW8uXG4gKiBBIHNsb3dlciBwcmVzZXQgd2lsbCBwcm92aWRlIGJldHRlciBjb21wcmVzc2lvbiAoY29tcHJlc3Npb24gaXMgcXVhbGl0eSBwZXIgZmlsZXNpemUpLlxuICogVGhpcyBtZWFucyB0aGF0LCBmb3IgZXhhbXBsZSwgaWYgeW91IHRhcmdldCBhIGNlcnRhaW4gZmlsZSBzaXplIG9yIGNvbnN0YW50IGJpdCByYXRlLCB5b3Ugd2lsbCBhY2hpZXZlIGJldHRlclxuICogcXVhbGl0eSB3aXRoIGEgc2xvd2VyIHByZXNldC4gUmVhZCBodHRwczovL3RyYWMuZmZtcGVnLm9yZy93aWtpL0VuY29kZS9ILjI2NCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBjYXB0dXJlQ3Vyc29yIFtmYWxzZV0gLSBXaGV0aGVyIHRvIGNhcHR1cmUgdGhlIG1vdXNlIGN1cnNvciB3aGlsZSByZWNvcmRpbmdcbiAqIHRoZSBzY3JlZW5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY2FwdHVyZUNsaWNrcyBbZmFsc2VdIC0gV2hldGhlciB0byBjYXB0dXJlIG1vdXNlIGNsaWNrcyB3aGlsZSByZWNvcmRpbmcgdGhlXG4gKiBzY3JlZW5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYXVkaW9JbnB1dCAtIElmIHNldCB0aGVuIHRoZSBnaXZlbiBhdWRpbyBpbnB1dCB3aWxsIGJlIHVzZWQgdG8gcmVjb3JkIHRoZSBjb21wdXRlciBhdWRpb1xuICogYWxvbmcgd2l0aCB0aGUgZGVza3RvcCB2aWRlby4gVGhlIGxpc3Qgb2YgYXZhaWxhYmxlIGRldmljZXMgY291bGQgYmUgcmV0cmlldmVkIHVzaW5nXG4gKiBgZmZtcGVnIC1saXN0X2RldmljZXMgdHJ1ZSAtZiBkc2hvdyAtaSBkdW1teWAgY29tbWFuZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bWJlcn0gdGltZUxpbWl0IFs2MDBdIC0gVGhlIG1heGltdW0gcmVjb3JkaW5nIHRpbWUsIGluIHNlY29uZHMuIFRoZSBkZWZhdWx0XG4gKiB2YWx1ZSBpcyA2MDAgc2Vjb25kcyAoMTAgbWludXRlcykuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGZvcmNlUmVzdGFydCBbdHJ1ZV0gLSBXaGV0aGVyIHRvIGlnbm9yZSB0aGUgY2FsbCBpZiBhIHNjcmVlbiByZWNvcmRpbmcgaXMgY3VycmVudGx5IHJ1bm5pbmdcbiAqIChgZmFsc2VgKSBvciB0byBzdGFydCBhIG5ldyByZWNvcmRpbmcgaW1tZWRpYXRlbHkgYW5kIHRlcm1pbmF0ZSB0aGUgZXhpc3Rpbmcgb25lIGlmIHJ1bm5pbmcgKGB0cnVlYCkuXG4gKi9cblxuLyoqXG4gKiBSZWNvcmQgdGhlIGRpc3BsYXkgaW4gYmFja2dyb3VuZCB3aGlsZSB0aGUgYXV0b21hdGVkIHRlc3QgaXMgcnVubmluZy5cbiAqIFRoaXMgbWV0aG9kIHJlcXVpcmVzIEZGTVBFRyAoaHR0cHM6Ly93d3cuZmZtcGVnLm9yZy9kb3dubG9hZC5odG1sKSB0byBiZSBpbnN0YWxsZWRcbiAqIGFuZCBwcmVzZW50IGluIFBBVEguXG4gKiBUaGUgcmVzdWx0aW5nIHZpZGVvIHVzZXMgSDI2NCBjb2RlYyBhbmQgaXMgcmVhZHkgdG8gYmUgcGxheWVkIGJ5IG1lZGlhIHBsYXllcnMgYnVpbHQtaW4gaW50byB3ZWIgYnJvd3NlcnMuXG4gKlxuICogQHBhcmFtIHs/U3RhcnRSZWNvcmRpbmdPcHRpb25zfSBvcHRpb25zIC0gVGhlIGF2YWlsYWJsZSBvcHRpb25zLlxuICogQHRocm93cyB7RXJyb3J9IElmIHNjcmVlbiByZWNvcmRpbmcgaGFzIGZhaWxlZCB0byBzdGFydCBvciBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqL1xuY29tbWFuZHMuc3RhcnRSZWNvcmRpbmdTY3JlZW4gPSBhc3luYyBmdW5jdGlvbiBzdGFydFJlY29yZGluZ1NjcmVlbiAob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICB0aW1lTGltaXQsXG4gICAgdmlkZW9GaWx0ZXIsXG4gICAgZnBzLFxuICAgIHByZXNldCxcbiAgICBjYXB0dXJlQ3Vyc29yLFxuICAgIGNhcHR1cmVDbGlja3MsXG4gICAgYXVkaW9JbnB1dCxcbiAgICBmb3JjZVJlc3RhcnQgPSB0cnVlLFxuICB9ID0gb3B0aW9ucztcbiAgaWYgKHRoaXMuX3NjcmVlblJlY29yZGVyPy5pc1J1bm5pbmc/LigpKSB7XG4gICAgbG9nLmRlYnVnKCdUaGUgc2NyZWVuIHJlY29yZGluZyBpcyBhbHJlYWR5IHJ1bm5pbmcnKTtcbiAgICBpZiAoIWZvcmNlUmVzdGFydCkge1xuICAgICAgbG9nLmRlYnVnKCdEb2luZyBub3RoaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5kZWJ1ZygnRm9yY2luZyB0aGUgYWN0aXZlIHNjcmVlbiByZWNvcmRpbmcgdG8gc3RvcCcpO1xuICAgIGF3YWl0IHRoaXMuX3NjcmVlblJlY29yZGVyLnN0b3AodHJ1ZSk7XG4gIH1cbiAgdGhpcy5fc2NyZWVuUmVjb3JkZXIgPSBudWxsO1xuXG4gIGNvbnN0IHZpZGVvUGF0aCA9IHBhdGgucmVzb2x2ZShvcy50bXBkaXIoKSxcbiAgICBgJHt1dGlsLnV1aWRWNCgpLnN1YnN0cmluZygwLCA4KX0uJHtERUZBVUxUX0VYVH1gKTtcbiAgdGhpcy5fc2NyZWVuUmVjb3JkZXIgPSBuZXcgU2NyZWVuUmVjb3JkZXIodmlkZW9QYXRoLCB7XG4gICAgZnBzOiBwYXJzZUludChmcHMsIDEwKSxcbiAgICB0aW1lTGltaXQ6IHBhcnNlSW50KHRpbWVMaW1pdCwgMTApLFxuICAgIHByZXNldCxcbiAgICBjYXB0dXJlQ3Vyc29yLFxuICAgIGNhcHR1cmVDbGlja3MsXG4gICAgdmlkZW9GaWx0ZXIsXG4gICAgYXVkaW9JbnB1dCxcbiAgfSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5fc2NyZWVuUmVjb3JkZXIuc3RhcnQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMuX3NjcmVlblJlY29yZGVyID0gbnVsbDtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0b3BSZWNvcmRpbmdPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSByZW1vdGVQYXRoIC0gVGhlIHBhdGggdG8gdGhlIHJlbW90ZSBsb2NhdGlvbiwgd2hlcmUgdGhlIHJlc3VsdGluZyB2aWRlbyBzaG91bGQgYmUgdXBsb2FkZWQuXG4gKiBUaGUgZm9sbG93aW5nIHByb3RvY29scyBhcmUgc3VwcG9ydGVkOiBodHRwL2h0dHBzLCBmdHAuXG4gKiBOdWxsIG9yIGVtcHR5IHN0cmluZyB2YWx1ZSAodGhlIGRlZmF1bHQgc2V0dGluZykgbWVhbnMgdGhlIGNvbnRlbnQgb2YgcmVzdWx0aW5nXG4gKiBmaWxlIHNob3VsZCBiZSBlbmNvZGVkIGFzIEJhc2U2NCBhbmQgcGFzc2VkIGFzIHRoZSBlbmRwb2ludCByZXNwb25zZSB2YWx1ZS5cbiAqIEFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biBpZiB0aGUgZ2VuZXJhdGVkIG1lZGlhIGZpbGUgaXMgdG9vIGJpZyB0b1xuICogZml0IGludG8gdGhlIGF2YWlsYWJsZSBwcm9jZXNzIG1lbW9yeS5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdXNlciAtIFRoZSBuYW1lIG9mIHRoZSB1c2VyIGZvciB0aGUgcmVtb3RlIGF1dGhlbnRpY2F0aW9uLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBwYXNzIC0gVGhlIHBhc3N3b3JkIGZvciB0aGUgcmVtb3RlIGF1dGhlbnRpY2F0aW9uLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtZXRob2QgLSBUaGUgaHR0cCBtdWx0aXBhcnQgdXBsb2FkIG1ldGhvZCBuYW1lLiBUaGUgJ1BVVCcgb25lIGlzIHVzZWQgYnkgZGVmYXVsdC5cbiAqIEBwcm9wZXJ0eSB7P09iamVjdH0gaGVhZGVycyAtIEFkZGl0aW9uYWwgaGVhZGVycyBtYXBwaW5nIGZvciBtdWx0aXBhcnQgaHR0cChzKSB1cGxvYWRzXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGZpbGVGaWVsZE5hbWUgW2ZpbGVdIC0gVGhlIG5hbWUgb2YgdGhlIGZvcm0gZmllbGQsIHdoZXJlIHRoZSBmaWxlIGNvbnRlbnQgQkxPQiBzaG91bGQgYmUgc3RvcmVkIGZvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHAocykgdXBsb2Fkc1xuICogQHByb3BlcnR5IHs/T2JqZWN0fEFycmF5PFBhaXI+fSBmb3JtRmllbGRzIC0gQWRkaXRpb25hbCBmb3JtIGZpZWxkcyBmb3IgbXVsdGlwYXJ0IGh0dHAocykgdXBsb2Fkc1xuICovXG5cbi8qKlxuICogU3RvcCByZWNvcmRpbmcgdGhlIHNjcmVlbi5cbiAqIElmIG5vIHNjcmVlbiByZWNvcmRpbmcgaGFzIGJlZW4gc3RhcnRlZCBiZWZvcmUgdGhlbiB0aGUgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7P1N0b3BSZWNvcmRpbmdPcHRpb25zfSBvcHRpb25zIC0gVGhlIGF2YWlsYWJsZSBvcHRpb25zLlxuICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0LWVuY29kZWQgY29udGVudCBvZiB0aGUgcmVjb3JkZWQgbWVkaWEgZmlsZSBpZiAncmVtb3RlUGF0aCdcbiAqIHBhcmFtZXRlciBpcyBmYWxzeSBvciBhbiBlbXB0eSBzdHJpbmcuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGdldHRpbmcgdGhlIG5hbWUgb2YgYSBtZWRpYSBmaWxlXG4gKiBvciB0aGUgZmlsZSBjb250ZW50IGNhbm5vdCBiZSB1cGxvYWRlZCB0byB0aGUgcmVtb3RlIGxvY2F0aW9uXG4gKiBvciBzY3JlZW4gcmVjb3JkaW5nIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICovXG5jb21tYW5kcy5zdG9wUmVjb3JkaW5nU2NyZWVuID0gYXN5bmMgZnVuY3Rpb24gc3RvcFJlY29yZGluZ1NjcmVlbiAob3B0aW9ucyA9IHt9KSB7XG4gIGlmICghdGhpcy5fc2NyZWVuUmVjb3JkZXIpIHtcbiAgICBsb2cuZGVidWcoJ05vIHNjcmVlbiByZWNvcmRpbmcgaGFzIGJlZW4gc3RhcnRlZC4gRG9pbmcgbm90aGluZycpO1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGxvZy5kZWJ1ZygnUmV0cmlldmluZyB0aGUgcmVzdWx0aW5nIHZpZGVvIGRhdGEnKTtcbiAgY29uc3QgdmlkZW9QYXRoID0gYXdhaXQgdGhpcy5fc2NyZWVuUmVjb3JkZXIuc3RvcCgpO1xuICBpZiAoIXZpZGVvUGF0aCkge1xuICAgIGxvZy5kZWJ1ZygnTm8gdmlkZW8gZGF0YSBpcyBmb3VuZC4gUmV0dXJuaW5nIGFuIGVtcHR5IHN0cmluZycpO1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gYXdhaXQgdXBsb2FkUmVjb3JkZWRNZWRpYSh2aWRlb1BhdGgsIG9wdGlvbnMucmVtb3RlUGF0aCwgb3B0aW9ucyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3JlY29yZC1zY3JlZW4uanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
