"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.desiredCapConstraints = void 0;

require("source-map-support/register");

const desiredCapConstraints = {
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: ['Windows']
  },
  browserName: {
    isString: true
  },
  app: {
    isString: true
  },
  launchTimeout: {},
  createSessionTimeout: {
    isNumber: true
  },
  calendarFormat: {
    isString: true
  },
  bundleId: {
    isString: true
  },
  udid: {
    isString: true
  },
  locationServicesEnabled: {
    isBoolean: true
  },
  locationServicesAuthorized: {
    isBoolean: true
  },
  autoAcceptAlerts: {
    isBoolean: true
  },
  autoDismissAlerts: {
    isBoolean: true
  },
  nativeInstrumentsLib: {
    isBoolean: true
  },
  nativeWebTap: {
    isBoolean: true
  },
  safariInitialUrl: {
    isString: true
  },
  safariAllowPopups: {
    isBoolean: true
  },
  safariIgnoreFraudWarning: {
    isBoolean: true
  },
  safariOpenLinksInBackground: {
    isBoolean: true
  },
  keepKeyChains: {
    isBoolean: true
  },
  localizableStringsDir: {
    isString: true
  },
  processArguments: {},
  interKeyDelay: {
    isNumber: true
  },
  showIOSLog: {
    isBoolean: true
  },
  sendKeyStrategy: {
    isString: true,
    inclusion: ['oneByOne', 'grouped', 'setValue']
  },
  screenshotWaitTimeout: {
    isNumber: true
  },
  waitForAppScript: {
    isString: true
  },
  webviewConnectRetries: {
    isNumber: true
  },
  appName: {
    isString: true
  }
};
exports.desiredCapConstraints = desiredCapConstraints;
var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXNpcmVkLWNhcHMuanMiXSwibmFtZXMiOlsiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwicGxhdGZvcm1OYW1lIiwicHJlc2VuY2UiLCJpc1N0cmluZyIsImluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSIsImJyb3dzZXJOYW1lIiwiYXBwIiwibGF1bmNoVGltZW91dCIsImNyZWF0ZVNlc3Npb25UaW1lb3V0IiwiaXNOdW1iZXIiLCJjYWxlbmRhckZvcm1hdCIsImJ1bmRsZUlkIiwidWRpZCIsImxvY2F0aW9uU2VydmljZXNFbmFibGVkIiwiaXNCb29sZWFuIiwibG9jYXRpb25TZXJ2aWNlc0F1dGhvcml6ZWQiLCJhdXRvQWNjZXB0QWxlcnRzIiwiYXV0b0Rpc21pc3NBbGVydHMiLCJuYXRpdmVJbnN0cnVtZW50c0xpYiIsIm5hdGl2ZVdlYlRhcCIsInNhZmFyaUluaXRpYWxVcmwiLCJzYWZhcmlBbGxvd1BvcHVwcyIsInNhZmFyaUlnbm9yZUZyYXVkV2FybmluZyIsInNhZmFyaU9wZW5MaW5rc0luQmFja2dyb3VuZCIsImtlZXBLZXlDaGFpbnMiLCJsb2NhbGl6YWJsZVN0cmluZ3NEaXIiLCJwcm9jZXNzQXJndW1lbnRzIiwiaW50ZXJLZXlEZWxheSIsInNob3dJT1NMb2ciLCJzZW5kS2V5U3RyYXRlZ3kiLCJpbmNsdXNpb24iLCJzY3JlZW5zaG90V2FpdFRpbWVvdXQiLCJ3YWl0Rm9yQXBwU2NyaXB0Iiwid2Vidmlld0Nvbm5lY3RSZXRyaWVzIiwiYXBwTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUEsTUFBTUEscUJBQXFCLEdBQUc7QUFDNUJDLEVBQUFBLFlBQVksRUFBRTtBQUNaQyxJQUFBQSxRQUFRLEVBQUUsSUFERTtBQUVaQyxJQUFBQSxRQUFRLEVBQUUsSUFGRTtBQUdaQyxJQUFBQSx3QkFBd0IsRUFBRSxDQUFDLFNBQUQ7QUFIZCxHQURjO0FBTTVCQyxFQUFBQSxXQUFXLEVBQUU7QUFDWEYsSUFBQUEsUUFBUSxFQUFFO0FBREMsR0FOZTtBQVM1QkcsRUFBQUEsR0FBRyxFQUFFO0FBQ0hILElBQUFBLFFBQVEsRUFBRTtBQURQLEdBVHVCO0FBYTVCSSxFQUFBQSxhQUFhLEVBQUUsRUFiYTtBQWlCNUJDLEVBQUFBLG9CQUFvQixFQUFFO0FBQ3BCQyxJQUFBQSxRQUFRLEVBQUU7QUFEVSxHQWpCTTtBQW9CNUJDLEVBQUFBLGNBQWMsRUFBRTtBQUNkUCxJQUFBQSxRQUFRLEVBQUU7QUFESSxHQXBCWTtBQXVCNUJRLEVBQUFBLFFBQVEsRUFBRTtBQUNSUixJQUFBQSxRQUFRLEVBQUU7QUFERixHQXZCa0I7QUEwQjVCUyxFQUFBQSxJQUFJLEVBQUU7QUFDSlQsSUFBQUEsUUFBUSxFQUFFO0FBRE4sR0ExQnNCO0FBNkI1QlUsRUFBQUEsdUJBQXVCLEVBQUU7QUFDdkJDLElBQUFBLFNBQVMsRUFBRTtBQURZLEdBN0JHO0FBZ0M1QkMsRUFBQUEsMEJBQTBCLEVBQUU7QUFDMUJELElBQUFBLFNBQVMsRUFBRTtBQURlLEdBaENBO0FBbUM1QkUsRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJGLElBQUFBLFNBQVMsRUFBRTtBQURLLEdBbkNVO0FBc0M1QkcsRUFBQUEsaUJBQWlCLEVBQUU7QUFDakJILElBQUFBLFNBQVMsRUFBRTtBQURNLEdBdENTO0FBeUM1QkksRUFBQUEsb0JBQW9CLEVBQUU7QUFDcEJKLElBQUFBLFNBQVMsRUFBRTtBQURTLEdBekNNO0FBNEM1QkssRUFBQUEsWUFBWSxFQUFFO0FBQ1pMLElBQUFBLFNBQVMsRUFBRTtBQURDLEdBNUNjO0FBK0M1Qk0sRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJqQixJQUFBQSxRQUFRLEVBQUU7QUFETSxHQS9DVTtBQWtENUJrQixFQUFBQSxpQkFBaUIsRUFBRTtBQUNqQlAsSUFBQUEsU0FBUyxFQUFFO0FBRE0sR0FsRFM7QUFxRDVCUSxFQUFBQSx3QkFBd0IsRUFBRTtBQUN4QlIsSUFBQUEsU0FBUyxFQUFFO0FBRGEsR0FyREU7QUF3RDVCUyxFQUFBQSwyQkFBMkIsRUFBRTtBQUMzQlQsSUFBQUEsU0FBUyxFQUFFO0FBRGdCLEdBeEREO0FBMkQ1QlUsRUFBQUEsYUFBYSxFQUFFO0FBQ2JWLElBQUFBLFNBQVMsRUFBRTtBQURFLEdBM0RhO0FBOEQ1QlcsRUFBQUEscUJBQXFCLEVBQUU7QUFDckJ0QixJQUFBQSxRQUFRLEVBQUU7QUFEVyxHQTlESztBQWlFNUJ1QixFQUFBQSxnQkFBZ0IsRUFBRSxFQWpFVTtBQXFFNUJDLEVBQUFBLGFBQWEsRUFBRTtBQUNibEIsSUFBQUEsUUFBUSxFQUFFO0FBREcsR0FyRWE7QUF3RTVCbUIsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZkLElBQUFBLFNBQVMsRUFBRTtBQURELEdBeEVnQjtBQTJFNUJlLEVBQUFBLGVBQWUsRUFBRTtBQUNmMUIsSUFBQUEsUUFBUSxFQUFFLElBREs7QUFFZjJCLElBQUFBLFNBQVMsRUFBRSxDQUFDLFVBQUQsRUFBYSxTQUFiLEVBQXdCLFVBQXhCO0FBRkksR0EzRVc7QUErRTVCQyxFQUFBQSxxQkFBcUIsRUFBRTtBQUNyQnRCLElBQUFBLFFBQVEsRUFBRTtBQURXLEdBL0VLO0FBa0Y1QnVCLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCN0IsSUFBQUEsUUFBUSxFQUFFO0FBRE0sR0FsRlU7QUFxRjVCOEIsRUFBQUEscUJBQXFCLEVBQUU7QUFDckJ4QixJQUFBQSxRQUFRLEVBQUU7QUFEVyxHQXJGSztBQXdGNUJ5QixFQUFBQSxPQUFPLEVBQUU7QUFDUC9CLElBQUFBLFFBQVEsRUFBRTtBQURIO0FBeEZtQixDQUE5Qjs7ZUE4RmVILHFCIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmNvbnN0IGRlc2lyZWRDYXBDb25zdHJhaW50cyA9IHtcbiAgcGxhdGZvcm1OYW1lOiB7XG4gICAgcHJlc2VuY2U6IHRydWUsXG4gICAgaXNTdHJpbmc6IHRydWUsXG4gICAgaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlOiBbJ1dpbmRvd3MnXVxuICB9LFxuICBicm93c2VyTmFtZToge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGFwcDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG5cbiAgbGF1bmNoVGltZW91dDoge1xuICAgIC8vIHJlY29nbml6ZSB0aGUgY2FwLFxuICAgIC8vIGJ1dCB2YWxpZGF0ZSBpbiB0aGUgZHJpdmVyI3ZhbGlkYXRlRGVzaXJlZENhcHMgbWV0aG9kXG4gIH0sXG4gIGNyZWF0ZVNlc3Npb25UaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgY2FsZW5kYXJGb3JtYXQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBidW5kbGVJZDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHVkaWQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBsb2NhdGlvblNlcnZpY2VzRW5hYmxlZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBsb2NhdGlvblNlcnZpY2VzQXV0aG9yaXplZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBhdXRvQWNjZXB0QWxlcnRzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGF1dG9EaXNtaXNzQWxlcnRzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIG5hdGl2ZUluc3RydW1lbnRzTGliOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIG5hdGl2ZVdlYlRhcDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzYWZhcmlJbml0aWFsVXJsOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgc2FmYXJpQWxsb3dQb3B1cHM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc2FmYXJpSWdub3JlRnJhdWRXYXJuaW5nOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNhZmFyaU9wZW5MaW5rc0luQmFja2dyb3VuZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBrZWVwS2V5Q2hhaW5zOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGxvY2FsaXphYmxlU3RyaW5nc0Rpcjoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHByb2Nlc3NBcmd1bWVudHM6IHtcbiAgICAvLyByZWNvZ25pemUgdGhlIGNhcCxcbiAgICAvLyBidXQgdmFsaWRhdGUgaW4gdGhlIGRyaXZlciN2YWxpZGF0ZURlc2lyZWRDYXBzIG1ldGhvZFxuICB9LFxuICBpbnRlcktleURlbGF5OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgc2hvd0lPU0xvZzoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzZW5kS2V5U3RyYXRlZ3k6IHtcbiAgICBpc1N0cmluZzogdHJ1ZSxcbiAgICBpbmNsdXNpb246IFsnb25lQnlPbmUnLCAnZ3JvdXBlZCcsICdzZXRWYWx1ZSddXG4gIH0sXG4gIHNjcmVlbnNob3RXYWl0VGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHdhaXRGb3JBcHBTY3JpcHQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB3ZWJ2aWV3Q29ubmVjdFJldHJpZXM6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBhcHBOYW1lOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfVxufTtcblxuZXhwb3J0IHsgZGVzaXJlZENhcENvbnN0cmFpbnRzIH07XG5leHBvcnQgZGVmYXVsdCBkZXNpcmVkQ2FwQ29uc3RyYWludHM7XG4iXSwiZmlsZSI6ImxpYi9kZXNpcmVkLWNhcHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
