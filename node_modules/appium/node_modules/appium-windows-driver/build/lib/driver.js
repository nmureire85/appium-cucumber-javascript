"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WindowsDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _winappdriver = require("./winappdriver");

var _logger = _interopRequireDefault(require("./logger"));

var _desiredCaps = require("./desired-caps");

var _index = _interopRequireDefault(require("./commands/index"));

const NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/elements?$')]];

class WindowsDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = NO_PROXY;
    this.opts.address = opts.address || _winappdriver.DEFAULT_WAD_HOST;
    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', 'accessibility id'];

    for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      WindowsDriver.prototype[cmd] = fn;
    }
  }

  async createSession(caps, reqCaps, curSessions) {
    if (!_appiumSupport.system.isWindows()) {
      throw new Error('WinAppDriver tests only run on Windows');
    }

    try {
      let sessionId;
      [sessionId] = await super.createSession(caps);
      await this.startWinAppDriverSession(curSessions);
      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  getNextAvailablePort(curSessions) {
    let newWADPort = _winappdriver.DEFAULT_WAD_PORT;

    while (_lodash.default.find(curSessions, o => o.WADPort === newWADPort)) {
      newWADPort++;
    }

    return newWADPort;
  }

  async startWinAppDriverSession(curSessions) {
    this.opts.port = this.getNextAvailablePort(curSessions);
    this.winAppDriver = new _winappdriver.WinAppDriver({
      app: this.opts.app,
      port: this.opts.port
    });
    await this.winAppDriver.start();
    await this.winAppDriver.startSession(this.caps);
    this.proxyReqRes = this.winAppDriver.proxyReqRes.bind(this.winAppDriver);
    this.jwpProxyActive = true;
  }

  async deleteSession() {
    _logger.default.debug('Deleting WinAppDriver session');

    if (this._screenRecorder) {
      await this._screenRecorder.stop(true);
      this._screenRecorder = null;
    }

    if (this.winAppDriver && this.jwpProxyActive) {
      await this.winAppDriver.deleteSession();
      await this.winAppDriver.stop();
      this.winAppDriver = null;
    }

    this.jwpProxyActive = false;
    await super.deleteSession();
  }

  proxyActive() {
    return true;
  }

  canProxy() {
    return true;
  }

  getProxyAvoidList() {
    return this.jwpProxyAvoid;
  }

  get driverData() {
    return {
      WADPort: this.opts.port
    };
  }

}

exports.WindowsDriver = WindowsDriver;
var _default = WindowsDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
