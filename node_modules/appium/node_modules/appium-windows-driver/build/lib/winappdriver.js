"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_WAD_PORT = exports.DEFAULT_WAD_HOST = exports.WinAppDriver = void 0;

require("source-map-support/register");

var _events = _interopRequireDefault(require("events"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _installer = require("./installer");

var _asyncbox = require("asyncbox");

var _child_process = _interopRequireDefault(require("child_process"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const REQUIRED_PARAMS = [];
const DEFAULT_WAD_HOST = '127.0.0.1';
exports.DEFAULT_WAD_HOST = DEFAULT_WAD_HOST;
const DEFAULT_WAD_PORT = 4724;
exports.DEFAULT_WAD_PORT = DEFAULT_WAD_PORT;
const DEFAULT_CREATE_SESSION_TIMEOUT_MS = 20000;

class WinAppDriver extends _events.default.EventEmitter {
  constructor(opts = {}) {
    const {
      host,
      port,
      createSessionTimeout
    } = opts;
    super();

    for (let req of REQUIRED_PARAMS) {
      if (!opts || !opts[req]) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.proxyHost = host || DEFAULT_WAD_HOST;
    this.proxyPort = port || DEFAULT_WAD_PORT;
    this.createSessionTimeout = createSessionTimeout || DEFAULT_CREATE_SESSION_TIMEOUT_MS;
    this.proc = null;
    this.state = WinAppDriver.STATE_STOPPED;
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.proxyHost,
      port: this.proxyPort
    });
  }

  async start() {
    if (!(await (0, _installer.isWADInstalled)())) {
      throw new Error('Could not verify WinAppDriver install; re-run install');
    }

    if (!(await (0, _installer.isWADChecksumOk)())) {
      _logger.default.warn('WinAppDriver exists, but the checksum did not match. Was it replaced manually?');
    }

    this.changeState(WinAppDriver.STATE_STARTING);
    let args = [this.proxyPort + '/wd/hub'];

    const startDetector = stdout => stdout.includes('listening for requests');

    let processIsAlive = false;

    try {
      await this.killAll();
      this.proc = new _teen_process.SubProcess(_installer.WAD_INSTALL_PATH, args, {
        encoding: 'ucs2'
      });
      processIsAlive = true;

      for (let stream of ['STDOUT', 'STDERR']) {
        this.proc.on(`lines-${stream.toLowerCase()}`, lines => {
          for (let l of lines) {
            _logger.default.info(`[${stream}] ${l.trim()}`);
          }
        });
      }

      this.proc.on('exit', (code, signal) => {
        processIsAlive = false;

        if (this.state !== WinAppDriver.STATE_STOPPED && this.state !== WinAppDriver.STATE_STOPPING) {
          let msg = `WinAppDriver exited unexpectedly with code ${code}, ` + `signal ${signal}`;

          _logger.default.error(msg);

          this.changeState(WinAppDriver.STATE_STOPPED);
        }
      });

      _logger.default.info(`Spawning WinAppDriver with: ${args.join(' ')}`);

      await this.proc.start(startDetector);
      await this.waitForOnline();
    } catch (e) {
      this.emit(WinAppDriver.EVENT_ERROR, e);

      if (processIsAlive) {
        await this.proc.stop();
      }

      _logger.default.errorAndThrow(e);
    }
  }

  sessionId() {
    if (this.state !== WinAppDriver.STATE_ONLINE) {
      return null;
    }

    return this.jwproxy.sessionId;
  }

  async waitForOnline() {
    let winappdriverStopped = false;
    await (0, _asyncbox.retryInterval)(20, 200, async () => {
      if ([WinAppDriver.STATE_STOPPED, WinAppDriver.STATE_ONLINE].indexOf(this.state) >= 0) {
        winappdriverStopped = this.state === WinAppDriver.STATE_STOPPED;
        return;
      }

      if (await this.getStatus()) {
        this.changeState(WinAppDriver.STATE_ONLINE);
      }
    });

    if (winappdriverStopped) {
      throw new Error('WinAppDriver crashed during startup.');
    }
  }

  async getStatus() {
    const resBlock = await this.jwproxy.proxy('/status', 'GET');

    if (resBlock[0].statusCode === 200) {
      _logger.default.info(`Status call returned 200. we're online and ready to run tests`);

      return true;
    }

    return false;
  }

  async startSession(caps) {
    const createSessionTimeout = caps.createSessionTimeout || this.createSessionTimeout;

    _logger.default.debug(`Starting WinAppDriver session. Will timeout in '${createSessionTimeout}' ms.`);

    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    let retryIteration = 0;
    let lastError;

    const condFn = async () => {
      lastError = null;

      try {
        retryIteration++;
        await this.jwproxy.command('/session', 'POST', {
          desiredCapabilities: caps
        });
        return true;
      } catch (error) {
        lastError = error;

        _logger.default.warn(`Could not start WinAppDriver session error = '${error.message}', attempt = '${retryIteration}' from '${this.createSessionRetry}'`);

        return false;
      }
    };

    try {
      await (0, _asyncbox.waitForCondition)(condFn, {
        waitMs: createSessionTimeout,
        intervalMs: 500
      });
    } catch (timeoutError) {
      _logger.default.debug(`timeoutError was ${timeoutError.message}`);

      if (lastError) {
        throw lastError;
      }

      throw new Error(`Could not start WinAppDriver session within ${createSessionTimeout} ms.`);
    }
  }

  async stop(emitStates = true) {
    if (emitStates) {
      this.changeState(WinAppDriver.STATE_STOPPING);
    }

    try {
      if (this.proc) {
        await this.proc.stop();
      }

      if (emitStates) {
        this.changeState(WinAppDriver.STATE_STOPPED);
      }
    } catch (e) {
      _logger.default.error(e);
    }
  }

  changeState(state) {
    this.state = state;

    _logger.default.debug(`WinAppDriver changed state to '${state}'`);

    this.emit(WinAppDriver.EVENT_CHANGED, {
      state
    });
  }

  async sendCommand(url, method, body) {
    return await this.jwproxy.command(url, method, body);
  }

  async proxyReq(req, res) {
    return await this.jwproxy.proxyReqRes(req, res);
  }

  async killAll() {
    let cmd;
    cmd = 'FOR /F "usebackq tokens=5" %a in (`netstat -nao ^| ' + 'findstr /R /C:"' + this.proxyPort + ' "`) do (' + 'FOR /F "usebackq" %b in (`TASKLIST /FI "PID eq %a" ^| ' + 'findstr /I winappdriver.exe`) do (IF NOT %b=="" TASKKILL ' + '/F /PID %a))';

    _logger.default.info(`Killing any old WinAppDrivers on same port, running: ${cmd}`);

    try {
      await _bluebird.default.promisify(_child_process.default.exec)(cmd);

      _logger.default.info('Successfully cleaned up old WinAppDrivers');
    } catch (err) {
      _logger.default.info('No old WinAppDrivers seemed to exist');
    }
  }

  async deleteSession() {
    _logger.default.debug('Deleting WinAppDriver server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation WinAppDriver deleteSession worked; ` + `Error was: ${err}`);
    }
  }

}

exports.WinAppDriver = WinAppDriver;
WinAppDriver.EVENT_ERROR = 'winappdriver_error';
WinAppDriver.EVENT_CHANGED = 'stateChanged';
WinAppDriver.STATE_STOPPED = 'stopped';
WinAppDriver.STATE_STARTING = 'starting';
WinAppDriver.STATE_ONLINE = 'online';
WinAppDriver.STATE_STOPPING = 'stopping';
var _default = WinAppDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
