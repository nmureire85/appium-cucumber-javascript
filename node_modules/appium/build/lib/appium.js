"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppiumDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _config = require("./config");

var _appiumBaseDriver = require("appium-base-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils");

var _semver = _interopRequireDefault(require("semver"));

var _wordWrap = _interopRequireDefault(require("word-wrap"));

var _os = require("os");

var _appiumSupport = require("appium-support");

const PLATFORMS = {
  FAKE: 'fake',
  ANDROID: 'android',
  IOS: 'ios',
  APPLE_TVOS: 'tvos',
  WINDOWS: 'windows',
  MAC: 'mac',
  TIZEN: 'tizen'
};
const AUTOMATION_NAMES = {
  APPIUM: 'Appium',
  UIAUTOMATOR2: 'UiAutomator2',
  UIAUTOMATOR1: 'UiAutomator1',
  XCUITEST: 'XCUITest',
  YOUIENGINE: 'YouiEngine',
  ESPRESSO: 'Espresso',
  TIZEN: 'Tizen',
  FAKE: 'Fake',
  INSTRUMENTS: 'Instruments',
  WINDOWS: 'Windows',
  MAC: 'Mac',
  FLUTTER: 'Flutter'
};
const DRIVER_MAP = {
  [AUTOMATION_NAMES.UIAUTOMATOR2.toLowerCase()]: {
    driverClassName: 'AndroidUiautomator2Driver',
    driverPackage: 'appium-uiautomator2-driver'
  },
  [AUTOMATION_NAMES.XCUITEST.toLowerCase()]: {
    driverClassName: 'XCUITestDriver',
    driverPackage: 'appium-xcuitest-driver'
  },
  [AUTOMATION_NAMES.YOUIENGINE.toLowerCase()]: {
    driverClassName: 'YouiEngineDriver',
    driverPackage: 'appium-youiengine-driver'
  },
  [AUTOMATION_NAMES.FAKE.toLowerCase()]: {
    driverClassName: 'FakeDriver',
    driverPackage: 'appium-fake-driver'
  },
  [AUTOMATION_NAMES.UIAUTOMATOR1.toLowerCase()]: {
    driverClassName: 'AndroidDriver',
    driverPackage: 'appium-android-driver'
  },
  [AUTOMATION_NAMES.INSTRUMENTS.toLowerCase()]: {
    driverClassName: 'IosDriver',
    driverPackage: 'appium-ios-driver'
  },
  [AUTOMATION_NAMES.WINDOWS.toLowerCase()]: {
    driverClassName: 'WindowsDriver',
    driverPackage: 'appium-windows-driver'
  },
  [AUTOMATION_NAMES.MAC.toLowerCase()]: {
    driverClassName: 'MacDriver',
    driverPackage: 'appium-mac-driver'
  },
  [AUTOMATION_NAMES.ESPRESSO.toLowerCase()]: {
    driverClassName: 'EspressoDriver',
    driverPackage: 'appium-espresso-driver'
  },
  [AUTOMATION_NAMES.TIZEN.toLowerCase()]: {
    driverClassName: 'TizenDriver',
    driverPackage: 'appium-tizen-driver'
  },
  [AUTOMATION_NAMES.FLUTTER.toLowerCase()]: {
    driverClassName: 'FlutterDriver',
    driverPackage: 'appium-flutter-driver'
  }
};
const PLATFORMS_MAP = {
  [PLATFORMS.FAKE]: () => AUTOMATION_NAMES.FAKE,
  [PLATFORMS.ANDROID]: () => {
    const logDividerLength = 70;
    const automationWarning = [`The 'automationName' capability was not provided in the desired capabilities for this Android session`, `Setting 'automationName=UiAutomator2' by default and using the UiAutomator2 Driver`, `The next major version of Appium (2.x) will **require** the 'automationName' capability to be set for all sessions on all platforms`, `In previous versions (Appium <= 1.13.x), the default was 'automationName=UiAutomator1'`, `If you wish to use that automation instead of UiAutomator2, please add 'automationName=UiAutomator1' to your desired capabilities`, `For more information about drivers, please visit http://appium.io/docs/en/about-appium/intro/ and explore the 'Drivers' menu`];
    let divider = `${_os.EOL}${_lodash.default.repeat('=', logDividerLength)}${_os.EOL}`;
    let automationWarningString = divider;
    automationWarningString += `  DEPRECATION WARNING:` + _os.EOL;

    for (let log of automationWarning) {
      automationWarningString += _os.EOL + (0, _wordWrap.default)(log, {
        width: logDividerLength - 2
      }) + _os.EOL;
    }

    automationWarningString += divider;

    _logger.default.warn(automationWarningString);

    return AUTOMATION_NAMES.UIAUTOMATOR2;
  },
  [PLATFORMS.IOS]: caps => {
    const platformVersion = _semver.default.valid(_semver.default.coerce(caps.platformVersion));

    _logger.default.warn(`DeprecationWarning: 'automationName' capability was not provided. ` + `Future versions of Appium will require 'automationName' capability to be set for iOS sessions.`);

    if (platformVersion && _semver.default.satisfies(platformVersion, '>=10.0.0')) {
      _logger.default.info('Requested iOS support with version >= 10, ' + `using '${AUTOMATION_NAMES.XCUITEST}' ` + 'driver instead of UIAutomation-based driver, since the ' + 'latter is unsupported on iOS 10 and up.');

      return AUTOMATION_NAMES.XCUITEST;
    }

    return AUTOMATION_NAMES.INSTRUMENTS;
  },
  [PLATFORMS.APPLE_TVOS]: () => AUTOMATION_NAMES.XCUITEST,
  [PLATFORMS.WINDOWS]: () => AUTOMATION_NAMES.WINDOWS,
  [PLATFORMS.MAC]: () => AUTOMATION_NAMES.MAC,
  [PLATFORMS.TIZEN]: () => AUTOMATION_NAMES.TIZEN
};
const desiredCapabilityConstraints = {
  automationName: {
    presence: false,
    isString: true,
    inclusionCaseInsensitive: _lodash.default.values(AUTOMATION_NAMES)
  },
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: _lodash.default.keys(PLATFORMS_MAP)
  }
};
const sessionsListGuard = new _asyncLock.default();
const pendingDriversGuard = new _asyncLock.default();

class AppiumDriver extends _appiumBaseDriver.BaseDriver {
  constructor(args) {
    if (args.tmpDir) {
      process.env.APPIUM_TMP_DIR = args.tmpDir;
    }

    super(args);
    this.desiredCapConstraints = desiredCapabilityConstraints;
    this.newCommandTimeoutMs = 0;
    this.args = Object.assign({}, args);
    this.sessions = {};
    this.pendingDrivers = {};
    (0, _config.updateBuildInfo)();
  }

  get isCommandsQueueEnabled() {
    return false;
  }

  sessionExists(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.sessionId !== null;
  }

  driverForSession(sessionId) {
    return this.sessions[sessionId];
  }

  getDriverAndVersionForCaps(caps) {
    if (!_lodash.default.isString(caps.platformName)) {
      throw new Error('You must include a platformName capability');
    }

    const platformName = caps.platformName.toLowerCase();
    let automationNameCap = caps.automationName;

    if (!_lodash.default.isString(automationNameCap) || automationNameCap.toLowerCase() === 'appium') {
      const driverSelector = PLATFORMS_MAP[platformName];

      if (driverSelector) {
        automationNameCap = driverSelector(caps);
      }
    }

    automationNameCap = _lodash.default.toLower(automationNameCap);
    let failureVerb = 'find';
    let suggestion = 'Please check your desired capabilities';

    if (_lodash.default.isPlainObject(DRIVER_MAP[automationNameCap])) {
      try {
        const {
          driverPackage,
          driverClassName
        } = DRIVER_MAP[automationNameCap];

        const driver = require(driverPackage)[driverClassName];

        return {
          driver,
          version: this.getDriverVersion(driver.name, driverPackage)
        };
      } catch (e) {
        _logger.default.debug(e);

        failureVerb = 'load';
        suggestion = 'Please verify your Appium installation';
      }
    }

    const msg = _lodash.default.isString(caps.automationName) ? `Could not ${failureVerb} a driver for automationName '${caps.automationName}' and platformName ` + `'${caps.platformName}'` : `Could not ${failureVerb} a driver for platformName '${caps.platformName}'`;
    throw new Error(`${msg}. ${suggestion}`);
  }

  getDriverVersion(driverName, driverPackage) {
    const version = (0, _utils.getPackageVersion)(driverPackage);

    if (version) {
      return version;
    }

    _logger.default.warn(`Unable to get version of driver '${driverName}'`);
  }

  async getStatus() {
    return {
      build: _lodash.default.clone((0, _config.getBuildInfo)())
    };
  }

  async getSessions() {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);
    return _lodash.default.toPairs(sessions).map(([id, driver]) => {
      return {
        id,
        capabilities: driver.caps
      };
    });
  }

  printNewSessionAnnouncement(driverName, driverVersion) {
    const introString = driverVersion ? `Appium v${_config.APPIUM_VER} creating new ${driverName} (v${driverVersion}) session` : `Appium v${_config.APPIUM_VER} creating new ${driverName} session`;

    _logger.default.info(introString);
  }

  async createSession(jsonwpCaps, reqCaps, w3cCapabilities) {
    const defaultCapabilities = _lodash.default.cloneDeep(this.args.defaultCapabilities);

    const defaultSettings = (0, _utils.pullSettings)(defaultCapabilities);
    jsonwpCaps = _lodash.default.cloneDeep(jsonwpCaps);
    const jwpSettings = Object.assign({}, defaultSettings, (0, _utils.pullSettings)(jsonwpCaps));
    w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
    const w3cSettings = Object.assign({}, jwpSettings);
    Object.assign(w3cSettings, (0, _utils.pullSettings)((w3cCapabilities || {}).alwaysMatch || {}));

    for (const firstMatchEntry of (w3cCapabilities || {}).firstMatch || []) {
      Object.assign(w3cSettings, (0, _utils.pullSettings)(firstMatchEntry));
    }

    let protocol;
    let innerSessionId, dCaps;

    try {
      const parsedCaps = (0, _utils.parseCapsForInnerDriver)(jsonwpCaps, w3cCapabilities, this.desiredCapConstraints, defaultCapabilities);
      const {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        error
      } = parsedCaps;
      protocol = parsedCaps.protocol;

      if (error) {
        throw error;
      }

      const {
        driver: InnerDriver,
        version: driverVersion
      } = this.getDriverAndVersionForCaps(desiredCaps);
      this.printNewSessionAnnouncement(InnerDriver.name, driverVersion);

      if (this.args.sessionOverride) {
        await this.deleteAllSessions();
      }

      let runningDriversData, otherPendingDriversData;
      const d = new InnerDriver(this.args);

      if (this.args.relaxedSecurityEnabled) {
        _logger.default.info(`Applying relaxed security to '${InnerDriver.name}' as per ` + `server command line argument. All insecure features will be ` + `enabled unless explicitly disabled by --deny-insecure`);

        d.relaxedSecurityEnabled = true;
      }

      if (!_lodash.default.isEmpty(this.args.denyInsecure)) {
        _logger.default.info('Explicitly preventing use of insecure features:');

        this.args.denyInsecure.map(a => _logger.default.info(`    ${a}`));
        d.denyInsecure = this.args.denyInsecure;
      }

      if (!_lodash.default.isEmpty(this.args.allowInsecure)) {
        _logger.default.info('Explicitly enabling use of insecure features:');

        this.args.allowInsecure.map(a => _logger.default.info(`    ${a}`));
        d.allowInsecure = this.args.allowInsecure;
      }

      d.server = this.server;

      try {
        runningDriversData = await this.curSessionDataForDriver(InnerDriver);
      } catch (e) {
        throw new _appiumBaseDriver.errors.SessionNotCreatedError(e.message);
      }

      await pendingDriversGuard.acquire(AppiumDriver.name, () => {
        this.pendingDrivers[InnerDriver.name] = this.pendingDrivers[InnerDriver.name] || [];
        otherPendingDriversData = this.pendingDrivers[InnerDriver.name].map(drv => drv.driverData);
        this.pendingDrivers[InnerDriver.name].push(d);
      });

      try {
        [innerSessionId, dCaps] = await d.createSession(processedJsonwpCapabilities, reqCaps, processedW3CCapabilities, [...runningDriversData, ...otherPendingDriversData]);
        protocol = d.protocol;
        await sessionsListGuard.acquire(AppiumDriver.name, () => {
          this.sessions[innerSessionId] = d;
        });
      } finally {
        await pendingDriversGuard.acquire(AppiumDriver.name, () => {
          _lodash.default.pull(this.pendingDrivers[InnerDriver.name], d);
        });
      }

      this.attachUnexpectedShutdownHandler(d, innerSessionId);

      _logger.default.info(`New ${InnerDriver.name} session created successfully, session ` + `${innerSessionId} added to master session list`);

      d.startNewCommandTimeout();

      if (d.isW3CProtocol() && !_lodash.default.isEmpty(w3cSettings)) {
        _logger.default.info(`Applying the initial values to Appium settings parsed from W3C caps: ` + JSON.stringify(w3cSettings));

        await d.updateSettings(w3cSettings);
      } else if (d.isMjsonwpProtocol() && !_lodash.default.isEmpty(jwpSettings)) {
        _logger.default.info(`Applying the initial values to Appium settings parsed from MJSONWP caps: ` + JSON.stringify(jwpSettings));

        await d.updateSettings(jwpSettings);
      }
    } catch (error) {
      return {
        protocol,
        error
      };
    }

    return {
      protocol,
      value: [innerSessionId, dCaps, protocol]
    };
  }

  attachUnexpectedShutdownHandler(driver, innerSessionId) {
    const removeSessionFromMasterList = (cause = new Error('Unknown error')) => {
      _logger.default.warn(`Closing session, cause was '${cause.message}'`);

      _logger.default.info(`Removing session '${innerSessionId}' from our master session list`);

      delete this.sessions[innerSessionId];
    };

    if (_lodash.default.isFunction((driver.onUnexpectedShutdown || {}).then)) {
      driver.onUnexpectedShutdown.then(() => {
        throw new Error('Unexpected shutdown');
      }).catch(e => {
        if (!(e instanceof _bluebird.default.CancellationError)) {
          removeSessionFromMasterList(e);
        }
      });
    } else if (_lodash.default.isFunction(driver.onUnexpectedShutdown)) {
      driver.onUnexpectedShutdown(removeSessionFromMasterList);
    } else {
      _logger.default.warn(`Failed to attach the unexpected shutdown listener. ` + `Is 'onUnexpectedShutdown' method available for '${driver.constructor.name}'?`);
    }
  }

  async curSessionDataForDriver(InnerDriver) {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);

    const data = _lodash.default.values(sessions).filter(s => s.constructor.name === InnerDriver.name).map(s => s.driverData);

    for (let datum of data) {
      if (!datum) {
        throw new Error(`Problem getting session data for driver type ` + `${InnerDriver.name}; does it implement 'get ` + `driverData'?`);
      }
    }

    return data;
  }

  async deleteSession(sessionId) {
    let protocol;

    try {
      let otherSessionsData = null;
      let dstSession = null;
      await sessionsListGuard.acquire(AppiumDriver.name, () => {
        if (!this.sessions[sessionId]) {
          return;
        }

        const curConstructorName = this.sessions[sessionId].constructor.name;
        otherSessionsData = _lodash.default.toPairs(this.sessions).filter(([key, value]) => value.constructor.name === curConstructorName && key !== sessionId).map(([, value]) => value.driverData);
        dstSession = this.sessions[sessionId];
        protocol = dstSession.protocol;

        _logger.default.info(`Removing session ${sessionId} from our master session list`);

        delete this.sessions[sessionId];
      });
      return {
        protocol,
        value: await dstSession.deleteSession(sessionId, otherSessionsData)
      };
    } catch (e) {
      _logger.default.error(`Had trouble ending session ${sessionId}: ${e.message}`);

      return {
        protocol,
        error: e
      };
    }
  }

  async deleteAllSessions(opts = {}) {
    const sessionsCount = _lodash.default.size(this.sessions);

    if (0 === sessionsCount) {
      _logger.default.debug('There are no active sessions for cleanup');

      return;
    }

    const {
      force = false,
      reason
    } = opts;

    _logger.default.debug(`Cleaning up ${_appiumSupport.util.pluralize('active session', sessionsCount, true)}`);

    const cleanupPromises = force ? _lodash.default.values(this.sessions).map(drv => drv.startUnexpectedShutdown(reason && new Error(reason))) : _lodash.default.keys(this.sessions).map(id => this.deleteSession(id));

    for (const cleanupPromise of cleanupPromises) {
      try {
        await cleanupPromise;
      } catch (e) {
        _logger.default.debug(e);
      }
    }
  }

  async executeCommand(cmd, ...args) {
    if (cmd === 'getStatus') {
      return await this.getStatus();
    }

    if (isAppiumDriverCommand(cmd)) {
      return await super.executeCommand(cmd, ...args);
    }

    const sessionId = _lodash.default.last(args);

    const dstSession = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions[sessionId]);

    if (!dstSession) {
      throw new Error(`The session with id '${sessionId}' does not exist`);
    }

    let res = {
      protocol: dstSession.protocol
    };

    try {
      res.value = await dstSession.executeCommand(cmd, ...args);
    } catch (e) {
      res.error = e;
    }

    return res;
  }

  proxyActive(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && _lodash.default.isFunction(dstSession.proxyActive) && dstSession.proxyActive(sessionId);
  }

  getProxyAvoidList(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession ? dstSession.getProxyAvoidList() : [];
  }

  canProxy(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.canProxy(sessionId);
  }

}

exports.AppiumDriver = AppiumDriver;

function isAppiumDriverCommand(cmd) {
  return !(0, _appiumBaseDriver.isSessionCommand)(cmd) || cmd === 'deleteSession';
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hcHBpdW0uanMiXSwibmFtZXMiOlsiUExBVEZPUk1TIiwiRkFLRSIsIkFORFJPSUQiLCJJT1MiLCJBUFBMRV9UVk9TIiwiV0lORE9XUyIsIk1BQyIsIlRJWkVOIiwiQVVUT01BVElPTl9OQU1FUyIsIkFQUElVTSIsIlVJQVVUT01BVE9SMiIsIlVJQVVUT01BVE9SMSIsIlhDVUlURVNUIiwiWU9VSUVOR0lORSIsIkVTUFJFU1NPIiwiSU5TVFJVTUVOVFMiLCJGTFVUVEVSIiwiRFJJVkVSX01BUCIsInRvTG93ZXJDYXNlIiwiZHJpdmVyQ2xhc3NOYW1lIiwiZHJpdmVyUGFja2FnZSIsIlBMQVRGT1JNU19NQVAiLCJsb2dEaXZpZGVyTGVuZ3RoIiwiYXV0b21hdGlvbldhcm5pbmciLCJkaXZpZGVyIiwiRU9MIiwiXyIsInJlcGVhdCIsImF1dG9tYXRpb25XYXJuaW5nU3RyaW5nIiwibG9nIiwid2lkdGgiLCJ3YXJuIiwiY2FwcyIsInBsYXRmb3JtVmVyc2lvbiIsInNlbXZlciIsInZhbGlkIiwiY29lcmNlIiwic2F0aXNmaWVzIiwiaW5mbyIsImRlc2lyZWRDYXBhYmlsaXR5Q29uc3RyYWludHMiLCJhdXRvbWF0aW9uTmFtZSIsInByZXNlbmNlIiwiaXNTdHJpbmciLCJpbmNsdXNpb25DYXNlSW5zZW5zaXRpdmUiLCJ2YWx1ZXMiLCJwbGF0Zm9ybU5hbWUiLCJrZXlzIiwic2Vzc2lvbnNMaXN0R3VhcmQiLCJBc3luY0xvY2siLCJwZW5kaW5nRHJpdmVyc0d1YXJkIiwiQXBwaXVtRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwiYXJncyIsInRtcERpciIsInByb2Nlc3MiLCJlbnYiLCJBUFBJVU1fVE1QX0RJUiIsImRlc2lyZWRDYXBDb25zdHJhaW50cyIsIm5ld0NvbW1hbmRUaW1lb3V0TXMiLCJPYmplY3QiLCJhc3NpZ24iLCJzZXNzaW9ucyIsInBlbmRpbmdEcml2ZXJzIiwiaXNDb21tYW5kc1F1ZXVlRW5hYmxlZCIsInNlc3Npb25FeGlzdHMiLCJzZXNzaW9uSWQiLCJkc3RTZXNzaW9uIiwiZHJpdmVyRm9yU2Vzc2lvbiIsImdldERyaXZlckFuZFZlcnNpb25Gb3JDYXBzIiwiRXJyb3IiLCJhdXRvbWF0aW9uTmFtZUNhcCIsImRyaXZlclNlbGVjdG9yIiwidG9Mb3dlciIsImZhaWx1cmVWZXJiIiwic3VnZ2VzdGlvbiIsImlzUGxhaW5PYmplY3QiLCJkcml2ZXIiLCJyZXF1aXJlIiwidmVyc2lvbiIsImdldERyaXZlclZlcnNpb24iLCJuYW1lIiwiZSIsImRlYnVnIiwibXNnIiwiZHJpdmVyTmFtZSIsImdldFN0YXR1cyIsImJ1aWxkIiwiY2xvbmUiLCJnZXRTZXNzaW9ucyIsImFjcXVpcmUiLCJ0b1BhaXJzIiwibWFwIiwiaWQiLCJjYXBhYmlsaXRpZXMiLCJwcmludE5ld1Nlc3Npb25Bbm5vdW5jZW1lbnQiLCJkcml2ZXJWZXJzaW9uIiwiaW50cm9TdHJpbmciLCJBUFBJVU1fVkVSIiwiY3JlYXRlU2Vzc2lvbiIsImpzb253cENhcHMiLCJyZXFDYXBzIiwidzNjQ2FwYWJpbGl0aWVzIiwiZGVmYXVsdENhcGFiaWxpdGllcyIsImNsb25lRGVlcCIsImRlZmF1bHRTZXR0aW5ncyIsImp3cFNldHRpbmdzIiwidzNjU2V0dGluZ3MiLCJhbHdheXNNYXRjaCIsImZpcnN0TWF0Y2hFbnRyeSIsImZpcnN0TWF0Y2giLCJwcm90b2NvbCIsImlubmVyU2Vzc2lvbklkIiwiZENhcHMiLCJwYXJzZWRDYXBzIiwiZGVzaXJlZENhcHMiLCJwcm9jZXNzZWRKc29ud3BDYXBhYmlsaXRpZXMiLCJwcm9jZXNzZWRXM0NDYXBhYmlsaXRpZXMiLCJlcnJvciIsIklubmVyRHJpdmVyIiwic2Vzc2lvbk92ZXJyaWRlIiwiZGVsZXRlQWxsU2Vzc2lvbnMiLCJydW5uaW5nRHJpdmVyc0RhdGEiLCJvdGhlclBlbmRpbmdEcml2ZXJzRGF0YSIsImQiLCJyZWxheGVkU2VjdXJpdHlFbmFibGVkIiwiaXNFbXB0eSIsImRlbnlJbnNlY3VyZSIsImEiLCJhbGxvd0luc2VjdXJlIiwic2VydmVyIiwiY3VyU2Vzc2lvbkRhdGFGb3JEcml2ZXIiLCJlcnJvcnMiLCJTZXNzaW9uTm90Q3JlYXRlZEVycm9yIiwibWVzc2FnZSIsImRydiIsImRyaXZlckRhdGEiLCJwdXNoIiwicHVsbCIsImF0dGFjaFVuZXhwZWN0ZWRTaHV0ZG93bkhhbmRsZXIiLCJzdGFydE5ld0NvbW1hbmRUaW1lb3V0IiwiaXNXM0NQcm90b2NvbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVTZXR0aW5ncyIsImlzTWpzb253cFByb3RvY29sIiwidmFsdWUiLCJyZW1vdmVTZXNzaW9uRnJvbU1hc3Rlckxpc3QiLCJjYXVzZSIsImlzRnVuY3Rpb24iLCJvblVuZXhwZWN0ZWRTaHV0ZG93biIsInRoZW4iLCJjYXRjaCIsIkIiLCJDYW5jZWxsYXRpb25FcnJvciIsImRhdGEiLCJmaWx0ZXIiLCJzIiwiZGF0dW0iLCJkZWxldGVTZXNzaW9uIiwib3RoZXJTZXNzaW9uc0RhdGEiLCJjdXJDb25zdHJ1Y3Rvck5hbWUiLCJrZXkiLCJvcHRzIiwic2Vzc2lvbnNDb3VudCIsInNpemUiLCJmb3JjZSIsInJlYXNvbiIsInV0aWwiLCJwbHVyYWxpemUiLCJjbGVhbnVwUHJvbWlzZXMiLCJzdGFydFVuZXhwZWN0ZWRTaHV0ZG93biIsImNsZWFudXBQcm9taXNlIiwiZXhlY3V0ZUNvbW1hbmQiLCJjbWQiLCJpc0FwcGl1bURyaXZlckNvbW1hbmQiLCJsYXN0IiwicmVzIiwicHJveHlBY3RpdmUiLCJnZXRQcm94eUF2b2lkTGlzdCIsImNhblByb3h5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFNBQVMsR0FBRztBQUNoQkMsRUFBQUEsSUFBSSxFQUFFLE1BRFU7QUFFaEJDLEVBQUFBLE9BQU8sRUFBRSxTQUZPO0FBR2hCQyxFQUFBQSxHQUFHLEVBQUUsS0FIVztBQUloQkMsRUFB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LENBQXVCaEgsU0FBdkIsQ0FBN0Q7QUFDRDs7QUFFRGlILEVBQUFBLGlCQUFpQixDQUFFakgsU0FBRixFQUFhO0FBQzVCLFVBQU1DLFVBQVUsR0FBRyxLQUFLTCxRQUFMLENBQWNJLFNBQWQsQ0FBbkI7QUFDQSxXQUFPQyxVQUFVLEdBQUdBLFVBQVUsQ0FBQ2dILGlCQUFYLEVBQUgsR0FBb0MsRUFBckQ7QUFDRDs7QUFFREMsRUFBQUEsUUFBUSxDQUFFbEgsU0FBRixFQUFhO0FBQ25CLFVBQU1DLFVBQVUsR0FBRyxLQUFLTCxRQUFMLENBQWNJLFNBQWQsQ0FBbkI7QUFDQSxXQUFPQyxVQUFVLElBQUlBLFVBQVUsQ0FBQ2lILFFBQVgsQ0FBb0JsSCxTQUFwQixDQUFyQjtBQUNEOztBQXBabUM7Ozs7QUF5WnRDLFNBQVM2RyxxQkFBVCxDQUFnQ0QsR0FBaEMsRUFBcUM7QUFDbkMsU0FBTyxDQUFDLHdDQUFpQkEsR0FBakIsQ0FBRCxJQUEwQkEsR0FBRyxLQUFLLGVBQXpDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRCdWlsZEluZm8sIHVwZGF0ZUJ1aWxkSW5mbywgQVBQSVVNX1ZFUiB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IEJhc2VEcml2ZXIsIGVycm9ycywgaXNTZXNzaW9uQ29tbWFuZCB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0IHsgcGFyc2VDYXBzRm9ySW5uZXJEcml2ZXIsIGdldFBhY2thZ2VWZXJzaW9uLCBwdWxsU2V0dGluZ3MgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCB3cmFwIGZyb20gJ3dvcmQtd3JhcCc7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IFBMQVRGT1JNUyA9IHtcbiAgRkFLRTogJ2Zha2UnLFxuICBBTkRST0lEOiAnYW5kcm9pZCcsXG4gIElPUzogJ2lvcycsXG4gIEFQUExFX1RWT1M6ICd0dm9zJyxcbiAgV0lORE9XUzogJ3dpbmRvd3MnLFxuICBNQUM6ICdtYWMnLFxuICBUSVpFTjogJ3RpemVuJyxcbn07XG5cbmNvbnN0IEFVVE9NQVRJT05fTkFNRVMgPSB7XG4gIEFQUElVTTogJ0FwcGl1bScsXG4gIFVJQVVUT01BVE9SMjogJ1VpQXV0b21hdG9yMicsXG4gIFVJQVVUT01BVE9SMTogJ1VpQXV0b21hdG9yMScsXG4gIFhDVUlURVNUOiAnWENVSVRlc3QnLFxuICBZT1VJRU5HSU5FOiAnWW91aUVuZ2luZScsXG4gIEVTUFJFU1NPOiAnRXNwcmVzc28nLFxuICBUSVpFTjogJ1RpemVuJyxcbiAgRkFLRTogJ0Zha2UnLFxuICBJTlNUUlVNRU5UUzogJ0luc3RydW1lbnRzJyxcbiAgV0lORE9XUzogJ1dpbmRvd3MnLFxuICBNQUM6ICdNYWMnLFxuICBGTFVUVEVSOiAnRmx1dHRlcicsXG59O1xuY29uc3QgRFJJVkVSX01BUCA9IHtcbiAgW0FVVE9NQVRJT05fTkFNRVMuVUlBVVRPTUFUT1IyLnRvTG93ZXJDYXNlKCldOiB7XG4gICAgZHJpdmVyQ2xhc3NOYW1lOiAnQW5kcm9pZFVpYXV0b21hdG9yMkRyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS11aWF1dG9tYXRvcjItZHJpdmVyJyxcbiAgfSxcbiAgW0FVVE9NQVRJT05fTkFNRVMuWENVSVRFU1QudG9Mb3dlckNhc2UoKV06IHtcbiAgICBkcml2ZXJDbGFzc05hbWU6ICdYQ1VJVGVzdERyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS14Y3VpdGVzdC1kcml2ZXInLFxuICB9LFxuICBbQVVUT01BVElPTl9OQU1FUy5ZT1VJRU5HSU5FLnRvTG93ZXJDYXNlKCldOiB7XG4gICAgZHJpdmVyQ2xhc3NOYW1lOiAnWW91aUVuZ2luZURyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS15b3VpZW5naW5lLWRyaXZlcicsXG4gIH0sXG4gIFtBVVRPTUFUSU9OX05BTUVTLkZBS0UudG9Mb3dlckNhc2UoKV06IHtcbiAgICBkcml2ZXJDbGFzc05hbWU6ICdGYWtlRHJpdmVyJyxcbiAgICBkcml2ZXJQYWNrYWdlOiAnYXBwaXVtLWZha2UtZHJpdmVyJyxcbiAgfSxcbiAgW0FVVE9NQVRJT05fTkFNRVMuVUlBVVRPTUFUT1IxLnRvTG93ZXJDYXNlKCldOiB7XG4gICAgZHJpdmVyQ2xhc3NOYW1lOiAnQW5kcm9pZERyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS1hbmRyb2lkLWRyaXZlcicsXG4gIH0sXG4gIFtBVVRPTUFUSU9OX05BTUVTLklOU1RSVU1FTlRTLnRvTG93ZXJDYXNlKCldOiB7XG4gICAgZHJpdmVyQ2xhc3NOYW1lOiAnSW9zRHJpdmVyJyxcbiAgICBkcml2ZXJQYWNrYWdlOiAnYXBwaXVtLWlvcy1kcml2ZXInLFxuICB9LFxuICBbQVVUT01BVElPTl9OQU1FUy5XSU5ET1dTLnRvTG93ZXJDYXNlKCldOiB7XG4gICAgZHJpdmVyQ2xhc3NOYW1lOiAnV2luZG93c0RyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS13aW5kb3dzLWRyaXZlcicsXG4gIH0sXG4gIFtBVVRPTUFUSU9OX05BTUVTLk1BQy50b0xvd2VyQ2FzZSgpXToge1xuICAgIGRyaXZlckNsYXNzTmFtZTogJ01hY0RyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS1tYWMtZHJpdmVyJyxcbiAgfSxcbiAgW0FVVE9NQVRJT05fTkFNRVMuRVNQUkVTU08udG9Mb3dlckNhc2UoKV06IHtcbiAgICBkcml2ZXJDbGFzc05hbWU6ICdFc3ByZXNzb0RyaXZlcicsXG4gICAgZHJpdmVyUGFja2FnZTogJ2FwcGl1bS1lc3ByZXNzby1kcml2ZXInLFxuICB9LFxuICBbQVVUT01BVElPTl9OQU1FUy5USVpFTi50b0xvd2VyQ2FzZSgpXToge1xuICAgIGRyaXZlckNsYXNzTmFtZTogJ1RpemVuRHJpdmVyJyxcbiAgICBkcml2ZXJQYWNrYWdlOiAnYXBwaXVtLXRpemVuLWRyaXZlcicsXG4gIH0sXG4gIFtBVVRPTUFUSU9OX05BTUVTLkZMVVRURVIudG9Mb3dlckNhc2UoKV06IHtcbiAgICBkcml2ZXJDbGFzc05hbWU6ICdGbHV0dGVyRHJpdmVyJyxcbiAgICBkcml2ZXJQYWNrYWdlOiAnYXBwaXVtLWZsdXR0ZXItZHJpdmVyJ1xuICB9LFxufTtcblxuY29uc3QgUExBVEZPUk1TX01BUCA9IHtcbiAgW1BMQVRGT1JNUy5GQUtFXTogKCkgPT4gQVVUT01BVElPTl9OQU1FUy5GQUtFLFxuICBbUExBVEZPUk1TLkFORFJPSURdOiAoKSA9PiB7XG4gICAgLy8gV2FybiB1c2VycyB0aGF0IGRlZmF1bHQgYXV0b21hdGlvbiBpcyBnb2luZyB0byBjaGFuZ2UgdG8gVWlBdXRvbWF0b3IyIGZvciAxLjE0XG4gICAgLy8gYW5kIHdpbGwgYmVjb21lIHJlcXVpcmVkIG9uIEFwcGl1bSAyLjBcbiAgICBjb25zdCBsb2dEaXZpZGVyTGVuZ3RoID0gNzA7IC8vIEZpdCBpbiBjb21tYW5kIGxpbmVcblxuICAgIGNvbnN0IGF1dG9tYXRpb25XYXJuaW5nID0gW1xuICAgICAgYFRoZSAnYXV0b21hdGlvbk5hbWUnIGNhcGFiaWxpdHkgd2FzIG5vdCBwcm92aWRlZCBpbiB0aGUgZGVzaXJlZCBjYXBhYmlsaXRpZXMgZm9yIHRoaXMgQW5kcm9pZCBzZXNzaW9uYCxcbiAgICAgIGBTZXR0aW5nICdhdXRvbWF0aW9uTmFtZT1VaUF1dG9tYXRvcjInIGJ5IGRlZmF1bHQgYW5kIHVzaW5nIHRoZSBVaUF1dG9tYXRvcjIgRHJpdmVyYCxcbiAgICAgIGBUaGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIEFwcGl1bSAoMi54KSB3aWxsICoqcmVxdWlyZSoqIHRoZSAnYXV0b21hdGlvbk5hbWUnIGNhcGFiaWxpdHkgdG8gYmUgc2V0IGZvciBhbGwgc2Vzc2lvbnMgb24gYWxsIHBsYXRmb3Jtc2AsXG4gICAgICBgSW4gcHJldmlvdXMgdmVyc2lvbnMgKEFwcGl1bSA8PSAxLjEzLngpLCB0aGUgZGVmYXVsdCB3YXMgJ2F1dG9tYXRpb25OYW1lPVVpQXV0b21hdG9yMSdgLFxuICAgICAgYElmIHlvdSB3aXNoIHRvIHVzZSB0aGF0IGF1dG9tYXRpb24gaW5zdGVhZCBvZiBVaUF1dG9tYXRvcjIsIHBsZWFzZSBhZGQgJ2F1dG9tYXRpb25OYW1lPVVpQXV0b21hdG9yMScgdG8geW91ciBkZXNpcmVkIGNhcGFiaWxpdGllc2AsXG4gICAgICBgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgZHJpdmVycywgcGxlYXNlIHZpc2l0IGh0dHA6Ly9hcHBpdW0uaW8vZG9jcy9lbi9hYm91dC1hcHBpdW0vaW50cm8vIGFuZCBleHBsb3JlIHRoZSAnRHJpdmVycycgbWVudWBcbiAgICBdO1xuXG4gICAgbGV0IGRpdmlkZXIgPSBgJHtFT0x9JHtfLnJlcGVhdCgnPScsIGxvZ0RpdmlkZXJMZW5ndGgpfSR7RU9MfWA7XG4gICAgbGV0IGF1dG9tYXRpb25XYXJuaW5nU3RyaW5nID0gZGl2aWRlcjtcbiAgICBhdXRvbWF0aW9uV2FybmluZ1N0cmluZyArPSBgICBERVBSRUNBVElPTiBXQVJOSU5HOmAgKyBFT0w7XG4gICAgZm9yIChsZXQgbG9nIG9mIGF1dG9tYXRpb25XYXJuaW5nKSB7XG4gICAgICBhdXRvbWF0aW9uV2FybmluZ1N0cmluZyArPSBFT0wgKyB3cmFwKGxvZywge3dpZHRoOiBsb2dEaXZpZGVyTGVuZ3RoIC0gMn0pICsgRU9MO1xuICAgIH1cbiAgICBhdXRvbWF0aW9uV2FybmluZ1N0cmluZyArPSBkaXZpZGVyO1xuXG4gICAgLy8gUmVjb21tZW5kIHVzZXJzIHRvIHVwZ3JhZGUgdG8gVWlBdXRvbWF0b3IyIGlmIHRoZXkncmUgdXNpbmcgQW5kcm9pZCA+PSA2XG4gICAgbG9nLndhcm4oYXV0b21hdGlvbldhcm5pbmdTdHJpbmcpO1xuXG4gICAgcmV0dXJuIEFVVE9NQVRJT05fTkFNRVMuVUlBVVRPTUFUT1IyO1xuICB9LFxuICBbUExBVEZPUk1TLklPU106IChjYXBzKSA9PiB7XG4gICAgY29uc3QgcGxhdGZvcm1WZXJzaW9uID0gc2VtdmVyLnZhbGlkKHNlbXZlci5jb2VyY2UoY2Fwcy5wbGF0Zm9ybVZlcnNpb24pKTtcbiAgICBsb2cud2FybihgRGVwcmVjYXRpb25XYXJuaW5nOiAnYXV0b21hdGlvbk5hbWUnIGNhcGFiaWxpdHkgd2FzIG5vdCBwcm92aWRlZC4gYCArXG4gICAgICBgRnV0dXJlIHZlcnNpb25zIG9mIEFwcGl1bSB3aWxsIHJlcXVpcmUgJ2F1dG9tYXRpb25OYW1lJyBjYXBhYmlsaXR5IHRvIGJlIHNldCBmb3IgaU9TIHNlc3Npb25zLmApO1xuICAgIGlmIChwbGF0Zm9ybVZlcnNpb24gJiYgc2VtdmVyLnNhdGlzZmllcyhwbGF0Zm9ybVZlcnNpb24sICc+PTEwLjAuMCcpKSB7XG4gICAgICBsb2cuaW5mbygnUmVxdWVzdGVkIGlPUyBzdXBwb3J0IHdpdGggdmVyc2lvbiA+PSAxMCwgJyArXG4gICAgICAgIGB1c2luZyAnJHtBVVRPTUFUSU9OX05BTUVTLlhDVUlURVNUfScgYCArXG4gICAgICAgICdkcml2ZXIgaW5zdGVhZCBvZiBVSUF1dG9tYXRpb24tYmFzZWQgZHJpdmVyLCBzaW5jZSB0aGUgJyArXG4gICAgICAgICdsYXR0ZXIgaXMgdW5zdXBwb3J0ZWQgb24gaU9TIDEwIGFuZCB1cC4nKTtcbiAgICAgIHJldHVybiBBVVRPTUFUSU9OX05BTUVTLlhDVUlURVNUO1xuICAgIH1cblxuICAgIHJldHVybiBBVVRPTUFUSU9OX05BTUVTLklOU1RSVU1FTlRTO1xuICB9LFxuICBbUExBVEZPUk1TLkFQUExFX1RWT1NdOiAoKSA9PiBBVVRPTUFUSU9OX05BTUVTLlhDVUlURVNULFxuICBbUExBVEZPUk1TLldJTkRPV1NdOiAoKSA9PiBBVVRPTUFUSU9OX05BTUVTLldJTkRPV1MsXG4gIFtQTEFURk9STVMuTUFDXTogKCkgPT4gQVVUT01BVElPTl9OQU1FUy5NQUMsXG4gIFtQTEFURk9STVMuVElaRU5dOiAoKSA9PiBBVVRPTUFUSU9OX05BTUVTLlRJWkVOLFxufTtcblxuY29uc3QgZGVzaXJlZENhcGFiaWxpdHlDb25zdHJhaW50cyA9IHtcbiAgYXV0b21hdGlvbk5hbWU6IHtcbiAgICBwcmVzZW5jZTogZmFsc2UsXG4gICAgaXNTdHJpbmc6IHRydWUsXG4gICAgaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlOiBfLnZhbHVlcyhBVVRPTUFUSU9OX05BTUVTKSxcbiAgfSxcbiAgcGxhdGZvcm1OYW1lOiB7XG4gICAgcHJlc2VuY2U6IHRydWUsXG4gICAgaXNTdHJpbmc6IHRydWUsXG4gICAgaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlOiBfLmtleXMoUExBVEZPUk1TX01BUCksXG4gIH0sXG59O1xuXG5jb25zdCBzZXNzaW9uc0xpc3RHdWFyZCA9IG5ldyBBc3luY0xvY2soKTtcbmNvbnN0IHBlbmRpbmdEcml2ZXJzR3VhcmQgPSBuZXcgQXN5bmNMb2NrKCk7XG5cbmNsYXNzIEFwcGl1bURyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICBjb25zdHJ1Y3RvciAoYXJncykge1xuICAgIC8vIEl0IGlzIG5lY2Vzc2FyeSB0byBzZXQgYC0tdG1wYCBoZXJlIHNpbmNlIGl0IHNob3VsZCBiZSBzZXQgdG9cbiAgICAvLyBwcm9jZXNzLmVudi5BUFBJVU1fVE1QX0RJUiBvbmNlIGF0IGFuIGluaXRpYWwgcG9pbnQgaW4gdGhlIEFwcGl1bSBsaWZlY3ljbGUuXG4gICAgLy8gVGhlIHByb2Nlc3MgYXJndW1lbnQgd2lsbCBiZSByZWZlcmVuY2VkIGJ5IEJhc2VEcml2ZXIuXG4gICAgLy8gUGxlYXNlIGNhbGwgYXBwaXVtLXN1cHBvcnQudGVtcERpciBtb2R1bGUgdG8gYXBwbHkgdGhpcyBiZW5lZml0LlxuICAgIGlmIChhcmdzLnRtcERpcikge1xuICAgICAgcHJvY2Vzcy5lbnYuQVBQSVVNX1RNUF9ESVIgPSBhcmdzLnRtcERpcjtcbiAgICB9XG5cbiAgICBzdXBlcihhcmdzKTtcblxuICAgIHRoaXMuZGVzaXJlZENhcENvbnN0cmFpbnRzID0gZGVzaXJlZENhcGFiaWxpdHlDb25zdHJhaW50cztcblxuICAgIC8vIHRoZSBtYWluIEFwcGl1bSBEcml2ZXIgaGFzIG5vIG5ldyBjb21tYW5kIHRpbWVvdXRcbiAgICB0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSAwO1xuXG4gICAgdGhpcy5hcmdzID0gT2JqZWN0LmFzc2lnbih7fSwgYXJncyk7XG5cbiAgICAvLyBBY2Nlc3MgdG8gc2Vzc2lvbnMgbGlzdCBtdXN0IGJlIGd1YXJkZWQgd2l0aCBhIFNlbWFwaG9yZSwgYmVjYXVzZVxuICAgIC8vIGl0IG1pZ2h0IGJlIGNoYW5nZWQgYnkgb3RoZXIgYXN5bmMgY2FsbHMgYXQgYW55IHRpbWVcbiAgICAvLyBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gYWNjZXNzIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkgZnJvbSB0aGUgb3V0c2lkZVxuICAgIHRoaXMuc2Vzc2lvbnMgPSB7fTtcblxuICAgIC8vIEFjY2VzcyB0byBwZW5kaW5nIGRyaXZlcnMgbGlzdCBtdXN0IGJlIGd1YXJkZWQgd2l0aCBhIFNlbWFwaG9yZSwgYmVjYXVzZVxuICAgIC8vIGl0IG1pZ2h0IGJlIGNoYW5nZWQgYnkgb3RoZXIgYXN5bmMgY2FsbHMgYXQgYW55IHRpbWVcbiAgICAvLyBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gYWNjZXNzIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkgZnJvbSB0aGUgb3V0c2lkZVxuICAgIHRoaXMucGVuZGluZ0RyaXZlcnMgPSB7fTtcblxuICAgIC8vIGFsbG93IHRoaXMgdG8gaGFwcGVuIGluIHRoZSBiYWNrZ3JvdW5kLCBzbyBubyBgYXdhaXRgXG4gICAgdXBkYXRlQnVpbGRJbmZvKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGNvbW1hbmRzIHF1ZXVlaW5nIGZvciB0aGUgdW1icmVsbGEgQXBwaXVtIGRyaXZlclxuICAgKi9cbiAgZ2V0IGlzQ29tbWFuZHNRdWV1ZUVuYWJsZWQgKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNlc3Npb25FeGlzdHMgKHNlc3Npb25JZCkge1xuICAgIGNvbnN0IGRzdFNlc3Npb24gPSB0aGlzLnNlc3Npb25zW3Nlc3Npb25JZF07XG4gICAgcmV0dXJuIGRzdFNlc3Npb24gJiYgZHN0U2Vzc2lvbi5zZXNzaW9uSWQgIT09IG51bGw7XG4gIH1cblxuICBkcml2ZXJGb3JTZXNzaW9uIChzZXNzaW9uSWQpIHtcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdO1xuICB9XG5cbiAgZ2V0RHJpdmVyQW5kVmVyc2lvbkZvckNhcHMgKGNhcHMpIHtcbiAgICBpZiAoIV8uaXNTdHJpbmcoY2Fwcy5wbGF0Zm9ybU5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IGluY2x1ZGUgYSBwbGF0Zm9ybU5hbWUgY2FwYWJpbGl0eScpO1xuICAgIH1cblxuICAgIGNvbnN0IHBsYXRmb3JtTmFtZSA9IGNhcHMucGxhdGZvcm1OYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyB3ZSBkb24ndCBuZWNlc3NhcmlseSBoYXZlIGFuIGBhdXRvbWF0aW9uTmFtZWAgY2FwYWJpbGl0eVxuICAgIGxldCBhdXRvbWF0aW9uTmFtZUNhcCA9IGNhcHMuYXV0b21hdGlvbk5hbWU7XG4gICAgaWYgKCFfLmlzU3RyaW5nKGF1dG9tYXRpb25OYW1lQ2FwKSB8fCBhdXRvbWF0aW9uTmFtZUNhcC50b0xvd2VyQ2FzZSgpID09PSAnYXBwaXVtJykge1xuICAgICAgY29uc3QgZHJpdmVyU2VsZWN0b3IgPSBQTEFURk9STVNfTUFQW3BsYXRmb3JtTmFtZV07XG4gICAgICBpZiAoZHJpdmVyU2VsZWN0b3IpIHtcbiAgICAgICAgYXV0b21hdGlvbk5hbWVDYXAgPSBkcml2ZXJTZWxlY3RvcihjYXBzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXV0b21hdGlvbk5hbWVDYXAgPSBfLnRvTG93ZXIoYXV0b21hdGlvbk5hbWVDYXApO1xuXG4gICAgbGV0IGZhaWx1cmVWZXJiID0gJ2ZpbmQnO1xuICAgIGxldCBzdWdnZXN0aW9uID0gJ1BsZWFzZSBjaGVjayB5b3VyIGRlc2lyZWQgY2FwYWJpbGl0aWVzJztcbiAgICBpZiAoXy5pc1BsYWluT2JqZWN0KERSSVZFUl9NQVBbYXV0b21hdGlvbk5hbWVDYXBdKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2RyaXZlclBhY2thZ2UsIGRyaXZlckNsYXNzTmFtZX0gPSBEUklWRVJfTUFQW2F1dG9tYXRpb25OYW1lQ2FwXTtcbiAgICAgICAgY29uc3QgZHJpdmVyID0gcmVxdWlyZShkcml2ZXJQYWNrYWdlKVtkcml2ZXJDbGFzc05hbWVdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRyaXZlcixcbiAgICAgICAgICB2ZXJzaW9uOiB0aGlzLmdldERyaXZlclZlcnNpb24oZHJpdmVyLm5hbWUsIGRyaXZlclBhY2thZ2UpLFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZGVidWcoZSk7XG4gICAgICAgIGZhaWx1cmVWZXJiID0gJ2xvYWQnO1xuICAgICAgICBzdWdnZXN0aW9uID0gJ1BsZWFzZSB2ZXJpZnkgeW91ciBBcHBpdW0gaW5zdGFsbGF0aW9uJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtc2cgPSBfLmlzU3RyaW5nKGNhcHMuYXV0b21hdGlvbk5hbWUpXG4gICAgICA/IGBDb3VsZCBub3QgJHtmYWlsdXJlVmVyYn0gYSBkcml2ZXIgZm9yIGF1dG9tYXRpb25OYW1lICcke2NhcHMuYXV0b21hdGlvbk5hbWV9JyBhbmQgcGxhdGZvcm1OYW1lIGAgK1xuICAgICAgICAgICAgYCcke2NhcHMucGxhdGZvcm1OYW1lfSdgXG4gICAgICA6IGBDb3VsZCBub3QgJHtmYWlsdXJlVmVyYn0gYSBkcml2ZXIgZm9yIHBsYXRmb3JtTmFtZSAnJHtjYXBzLnBsYXRmb3JtTmFtZX0nYDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bXNnfS4gJHtzdWdnZXN0aW9ufWApO1xuICB9XG5cbiAgZ2V0RHJpdmVyVmVyc2lvbiAoZHJpdmVyTmFtZSwgZHJpdmVyUGFja2FnZSkge1xuICAgIGNvbnN0IHZlcnNpb24gPSBnZXRQYWNrYWdlVmVyc2lvbihkcml2ZXJQYWNrYWdlKTtcbiAgICBpZiAodmVyc2lvbikge1xuICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgfVxuICAgIGxvZy53YXJuKGBVbmFibGUgdG8gZ2V0IHZlcnNpb24gb2YgZHJpdmVyICcke2RyaXZlck5hbWV9J2ApO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3RhdHVzICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ1aWxkOiBfLmNsb25lKGdldEJ1aWxkSW5mbygpKSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0U2Vzc2lvbnMgKCkge1xuICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgc2Vzc2lvbnNMaXN0R3VhcmQuYWNxdWlyZShBcHBpdW1Ecml2ZXIubmFtZSwgKCkgPT4gdGhpcy5zZXNzaW9ucyk7XG4gICAgcmV0dXJuIF8udG9QYWlycyhzZXNzaW9ucylcbiAgICAgIC5tYXAoKFtpZCwgZHJpdmVyXSkgPT4ge1xuICAgICAgICByZXR1cm4ge2lkLCBjYXBhYmlsaXRpZXM6IGRyaXZlci5jYXBzfTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpbnROZXdTZXNzaW9uQW5ub3VuY2VtZW50IChkcml2ZXJOYW1lLCBkcml2ZXJWZXJzaW9uKSB7XG4gICAgY29uc3QgaW50cm9TdHJpbmcgPSBkcml2ZXJWZXJzaW9uXG4gICAgICA/IGBBcHBpdW0gdiR7QVBQSVVNX1ZFUn0gY3JlYXRpbmcgbmV3ICR7ZHJpdmVyTmFtZX0gKHYke2RyaXZlclZlcnNpb259KSBzZXNzaW9uYFxuICAgICAgOiBgQXBwaXVtIHYke0FQUElVTV9WRVJ9IGNyZWF0aW5nIG5ldyAke2RyaXZlck5hbWV9IHNlc3Npb25gO1xuICAgIGxvZy5pbmZvKGludHJvU3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgc2Vzc2lvblxuICAgKiBAcGFyYW0ge09iamVjdH0ganNvbndwQ2FwcyBKU09OV1AgZm9ybWF0dGVkIGRlc2lyZWQgY2FwYWJpbGl0aWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXFDYXBzIFJlcXVpcmVkIGNhcGFiaWxpdGllcyAoSlNPTldQIHN0YW5kYXJkKVxuICAgKiBAcGFyYW0ge09iamVjdH0gdzNjQ2FwYWJpbGl0aWVzIFczQyBjYXBhYmlsaXRpZXNcbiAgICogQHJldHVybiB7QXJyYXl9IFVuaXF1ZSBzZXNzaW9uIElEIGFuZCBjYXBhYmlsaXRpZXNcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24gKGpzb253cENhcHMsIHJlcUNhcHMsIHczY0NhcGFiaWxpdGllcykge1xuICAgIGNvbnN0IGRlZmF1bHRDYXBhYmlsaXRpZXMgPSBfLmNsb25lRGVlcCh0aGlzLmFyZ3MuZGVmYXVsdENhcGFiaWxpdGllcyk7XG4gICAgY29uc3QgZGVmYXVsdFNldHRpbmdzID0gcHVsbFNldHRpbmdzKGRlZmF1bHRDYXBhYmlsaXRpZXMpO1xuICAgIGpzb253cENhcHMgPSBfLmNsb25lRGVlcChqc29ud3BDYXBzKTtcbiAgICBjb25zdCBqd3BTZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRTZXR0aW5ncywgcHVsbFNldHRpbmdzKGpzb253cENhcHMpKTtcbiAgICB3M2NDYXBhYmlsaXRpZXMgPSBfLmNsb25lRGVlcCh3M2NDYXBhYmlsaXRpZXMpO1xuICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRoYXQgdGhlIGNsaWVudCBvbmx5IHByb3ZpZGVzIGNhcHMgdXNpbmcgSlNPTldQIHN0YW5kYXJkLFxuICAgIC8vIGFsdGhvdWdoIGZpcnN0TWF0Y2gvYWx3YXlzTWF0Y2ggcHJvcGVydGllcyBhcmUgc3RpbGwgcHJlc2VudC5cbiAgICAvLyBJbiBzdWNoIGNhc2Ugd2UgYXNzdW1lIHRoZSBjbGllbnQgdW5kZXJzdGFuZHMgVzNDIHByb3RvY29sIGFuZCBtZXJnZSB0aGUgZ2l2ZW5cbiAgICAvLyBKU09OV1AgY2FwcyB0byBXM0MgY2Fwc1xuICAgIGNvbnN0IHczY1NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgandwU2V0dGluZ3MpO1xuICAgIE9iamVjdC5hc3NpZ24odzNjU2V0dGluZ3MsIHB1bGxTZXR0aW5ncygodzNjQ2FwYWJpbGl0aWVzIHx8IHt9KS5hbHdheXNNYXRjaCB8fCB7fSkpO1xuICAgIGZvciAoY29uc3QgZmlyc3RNYXRjaEVudHJ5IG9mICgodzNjQ2FwYWJpbGl0aWVzIHx8IHt9KS5maXJzdE1hdGNoIHx8IFtdKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih3M2NTZXR0aW5ncywgcHVsbFNldHRpbmdzKGZpcnN0TWF0Y2hFbnRyeSkpO1xuICAgIH1cblxuICAgIGxldCBwcm90b2NvbDtcbiAgICBsZXQgaW5uZXJTZXNzaW9uSWQsIGRDYXBzO1xuICAgIHRyeSB7XG4gICAgICAvLyBQYXJzZSB0aGUgY2FwcyBpbnRvIGEgZm9ybWF0IHRoYXQgdGhlIElubmVyRHJpdmVyIHdpbGwgYWNjZXB0XG4gICAgICBjb25zdCBwYXJzZWRDYXBzID0gcGFyc2VDYXBzRm9ySW5uZXJEcml2ZXIoXG4gICAgICAgIGpzb253cENhcHMsXG4gICAgICAgIHczY0NhcGFiaWxpdGllcyxcbiAgICAgICAgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMsXG4gICAgICAgIGRlZmF1bHRDYXBhYmlsaXRpZXNcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHtkZXNpcmVkQ2FwcywgcHJvY2Vzc2VkSnNvbndwQ2FwYWJpbGl0aWVzLCBwcm9jZXNzZWRXM0NDYXBhYmlsaXRpZXMsIGVycm9yfSA9IHBhcnNlZENhcHM7XG4gICAgICBwcm90b2NvbCA9IHBhcnNlZENhcHMucHJvdG9jb2w7XG5cbiAgICAgIC8vIElmIHRoZSBwYXJzaW5nIG9mIHRoZSBjYXBzIHByb2R1Y2VkIGFuIGVycm9yLCB0aHJvdyBpdCBpbiBoZXJlXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHtkcml2ZXI6IElubmVyRHJpdmVyLCB2ZXJzaW9uOiBkcml2ZXJWZXJzaW9ufSA9IHRoaXMuZ2V0RHJpdmVyQW5kVmVyc2lvbkZvckNhcHMoZGVzaXJlZENhcHMpO1xuICAgICAgdGhpcy5wcmludE5ld1Nlc3Npb25Bbm5vdW5jZW1lbnQoSW5uZXJEcml2ZXIubmFtZSwgZHJpdmVyVmVyc2lvbik7XG5cbiAgICAgIGlmICh0aGlzLmFyZ3Muc2Vzc2lvbk92ZXJyaWRlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlQWxsU2Vzc2lvbnMoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJ1bm5pbmdEcml2ZXJzRGF0YSwgb3RoZXJQZW5kaW5nRHJpdmVyc0RhdGE7XG4gICAgICBjb25zdCBkID0gbmV3IElubmVyRHJpdmVyKHRoaXMuYXJncyk7XG5cbiAgICAgIC8vIFdlIHdhbnQgdG8gYXNzaWduIHNlY3VyaXR5IHZhbHVlcyBkaXJlY3RseSBvbiB0aGUgZHJpdmVyLiBUaGUgZHJpdmVyXG4gICAgICAvLyBzaG91bGQgbm90IHJlYWQgc2VjdXJpdHkgdmFsdWVzIGZyb20gYHRoaXMub3B0c2AgYmVjYXVzZSB0aG9zZSB2YWx1ZXNcbiAgICAgIC8vIGNvdWxkIGhhdmUgYmVlbiBzZXQgYnkgYSBtYWxpY2lvdXMgdXNlciB2aWEgY2FwYWJpbGl0aWVzLCB3aGVyZWFzIHdlXG4gICAgICAvLyB3YW50IGEgZ3VhcmFudGVlIHRoZSB2YWx1ZXMgd2VyZSBzZXQgYnkgdGhlIGFwcGl1bSBzZXJ2ZXIgYWRtaW5cbiAgICAgIGlmICh0aGlzLmFyZ3MucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCkge1xuICAgICAgICBsb2cuaW5mbyhgQXBwbHlpbmcgcmVsYXhlZCBzZWN1cml0eSB0byAnJHtJbm5lckRyaXZlci5uYW1lfScgYXMgcGVyIGAgK1xuICAgICAgICAgICAgICAgICBgc2VydmVyIGNvbW1hbmQgbGluZSBhcmd1bWVudC4gQWxsIGluc2VjdXJlIGZlYXR1cmVzIHdpbGwgYmUgYCArXG4gICAgICAgICAgICAgICAgIGBlbmFibGVkIHVubGVzcyBleHBsaWNpdGx5IGRpc2FibGVkIGJ5IC0tZGVueS1pbnNlY3VyZWApO1xuICAgICAgICBkLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLmFyZ3MuZGVueUluc2VjdXJlKSkge1xuICAgICAgICBsb2cuaW5mbygnRXhwbGljaXRseSBwcmV2ZW50aW5nIHVzZSBvZiBpbnNlY3VyZSBmZWF0dXJlczonKTtcbiAgICAgICAgdGhpcy5hcmdzLmRlbnlJbnNlY3VyZS5tYXAoKGEpID0+IGxvZy5pbmZvKGAgICAgJHthfWApKTtcbiAgICAgICAgZC5kZW55SW5zZWN1cmUgPSB0aGlzLmFyZ3MuZGVueUluc2VjdXJlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLmFyZ3MuYWxsb3dJbnNlY3VyZSkpIHtcbiAgICAgICAgbG9nLmluZm8oJ0V4cGxpY2l0bHkgZW5hYmxpbmcgdXNlIG9mIGluc2VjdXJlIGZlYXR1cmVzOicpO1xuICAgICAgICB0aGlzLmFyZ3MuYWxsb3dJbnNlY3VyZS5tYXAoKGEpID0+IGxvZy5pbmZvKGAgICAgJHthfWApKTtcbiAgICAgICAgZC5hbGxvd0luc2VjdXJlID0gdGhpcy5hcmdzLmFsbG93SW5zZWN1cmU7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoaXMgYXNzaWdubWVudCBpcyByZXF1aXJlZCBmb3IgY29ycmVjdCB3ZWIgc29ja2V0cyBmdW5jdGlvbmFsaXR5IGluc2lkZSB0aGUgZHJpdmVyXG4gICAgICBkLnNlcnZlciA9IHRoaXMuc2VydmVyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcnVubmluZ0RyaXZlcnNEYXRhID0gYXdhaXQgdGhpcy5jdXJTZXNzaW9uRGF0YUZvckRyaXZlcihJbm5lckRyaXZlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuU2Vzc2lvbk5vdENyZWF0ZWRFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgYXdhaXQgcGVuZGluZ0RyaXZlcnNHdWFyZC5hY3F1aXJlKEFwcGl1bURyaXZlci5uYW1lLCAoKSA9PiB7XG4gICAgICAgIHRoaXMucGVuZGluZ0RyaXZlcnNbSW5uZXJEcml2ZXIubmFtZV0gPSB0aGlzLnBlbmRpbmdEcml2ZXJzW0lubmVyRHJpdmVyLm5hbWVdIHx8IFtdO1xuICAgICAgICBvdGhlclBlbmRpbmdEcml2ZXJzRGF0YSA9IHRoaXMucGVuZGluZ0RyaXZlcnNbSW5uZXJEcml2ZXIubmFtZV0ubWFwKChkcnYpID0+IGRydi5kcml2ZXJEYXRhKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nRHJpdmVyc1tJbm5lckRyaXZlci5uYW1lXS5wdXNoKGQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIFtpbm5lclNlc3Npb25JZCwgZENhcHNdID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKFxuICAgICAgICAgIHByb2Nlc3NlZEpzb253cENhcGFiaWxpdGllcyxcbiAgICAgICAgICByZXFDYXBzLFxuICAgICAgICAgIHByb2Nlc3NlZFczQ0NhcGFiaWxpdGllcyxcbiAgICAgICAgICBbLi4ucnVubmluZ0RyaXZlcnNEYXRhLCAuLi5vdGhlclBlbmRpbmdEcml2ZXJzRGF0YV1cbiAgICAgICAgKTtcbiAgICAgICAgcHJvdG9jb2wgPSBkLnByb3RvY29sO1xuICAgICAgICBhd2FpdCBzZXNzaW9uc0xpc3RHdWFyZC5hY3F1aXJlKEFwcGl1bURyaXZlci5uYW1lLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXNzaW9uc1tpbm5lclNlc3Npb25JZF0gPSBkO1xuICAgICAgICB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGF3YWl0IHBlbmRpbmdEcml2ZXJzR3VhcmQuYWNxdWlyZShBcHBpdW1Ecml2ZXIubmFtZSwgKCkgPT4ge1xuICAgICAgICAgIF8ucHVsbCh0aGlzLnBlbmRpbmdEcml2ZXJzW0lubmVyRHJpdmVyLm5hbWVdLCBkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXR0YWNoVW5leHBlY3RlZFNodXRkb3duSGFuZGxlcihkLCBpbm5lclNlc3Npb25JZCk7XG5cbiAgICAgIGxvZy5pbmZvKGBOZXcgJHtJbm5lckRyaXZlci5uYW1lfSBzZXNzaW9uIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LCBzZXNzaW9uIGAgK1xuICAgICAgICAgICAgICBgJHtpbm5lclNlc3Npb25JZH0gYWRkZWQgdG8gbWFzdGVyIHNlc3Npb24gbGlzdGApO1xuXG4gICAgICAvLyBzZXQgdGhlIE5ldyBDb21tYW5kIFRpbWVvdXQgZm9yIHRoZSBpbm5lciBkcml2ZXJcbiAgICAgIGQuc3RhcnROZXdDb21tYW5kVGltZW91dCgpO1xuXG4gICAgICAvLyBhcHBseSBpbml0aWFsIHZhbHVlcyB0byBBcHBpdW0gc2V0dGluZ3MgKGlmIHByb3ZpZGVkKVxuICAgICAgaWYgKGQuaXNXM0NQcm90b2NvbCgpICYmICFfLmlzRW1wdHkodzNjU2V0dGluZ3MpKSB7XG4gICAgICAgIGxvZy5pbmZvKGBBcHBseWluZyB0aGUgaW5pdGlhbCB2YWx1ZXMgdG8gQXBwaXVtIHNldHRpbmdzIHBhcnNlZCBmcm9tIFczQyBjYXBzOiBgICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh3M2NTZXR0aW5ncykpO1xuICAgICAgICBhd2FpdCBkLnVwZGF0ZVNldHRpbmdzKHczY1NldHRpbmdzKTtcbiAgICAgIH0gZWxzZSBpZiAoZC5pc01qc29ud3BQcm90b2NvbCgpICYmICFfLmlzRW1wdHkoandwU2V0dGluZ3MpKSB7XG4gICAgICAgIGxvZy5pbmZvKGBBcHBseWluZyB0aGUgaW5pdGlhbCB2YWx1ZXMgdG8gQXBwaXVtIHNldHRpbmdzIHBhcnNlZCBmcm9tIE1KU09OV1AgY2FwczogYCArXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoandwU2V0dGluZ3MpKTtcbiAgICAgICAgYXdhaXQgZC51cGRhdGVTZXR0aW5ncyhqd3BTZXR0aW5ncyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3RvY29sLFxuICAgICAgICBlcnJvcixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3RvY29sLFxuICAgICAgdmFsdWU6IFtpbm5lclNlc3Npb25JZCwgZENhcHMsIHByb3RvY29sXVxuICAgIH07XG4gIH1cblxuICBhdHRhY2hVbmV4cGVjdGVkU2h1dGRvd25IYW5kbGVyIChkcml2ZXIsIGlubmVyU2Vzc2lvbklkKSB7XG4gICAgY29uc3QgcmVtb3ZlU2Vzc2lvbkZyb21NYXN0ZXJMaXN0ID0gKGNhdXNlID0gbmV3IEVycm9yKCdVbmtub3duIGVycm9yJykpID0+IHtcbiAgICAgIGxvZy53YXJuKGBDbG9zaW5nIHNlc3Npb24sIGNhdXNlIHdhcyAnJHtjYXVzZS5tZXNzYWdlfSdgKTtcbiAgICAgIGxvZy5pbmZvKGBSZW1vdmluZyBzZXNzaW9uICcke2lubmVyU2Vzc2lvbklkfScgZnJvbSBvdXIgbWFzdGVyIHNlc3Npb24gbGlzdGApO1xuICAgICAgZGVsZXRlIHRoaXMuc2Vzc2lvbnNbaW5uZXJTZXNzaW9uSWRdO1xuICAgIH07XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuICAgIGlmIChfLmlzRnVuY3Rpb24oKGRyaXZlci5vblVuZXhwZWN0ZWRTaHV0ZG93biB8fCB7fSkudGhlbikpIHtcbiAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIGJsb2NrIGFmdGVyIGFsbCB0aGUgZHJpdmVycyB1c2UgYmFzZSBkcml2ZXIgYWJvdmUgdiA1LjAuMFxuICAgICAgLy8gUmVtb3ZlIHRoZSBzZXNzaW9uIG9uIHVuZXhwZWN0ZWQgc2h1dGRvd24sIHNvIHRoYXQgd2UgYXJlIGluIGEgcG9zaXRpb25cbiAgICAgIC8vIHRvIG9wZW4gYW5vdGhlciBzZXNzaW9uIGxhdGVyIG9uLlxuICAgICAgZHJpdmVyLm9uVW5leHBlY3RlZFNodXRkb3duXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgd2UndmUgaGFkIGFuIHVuZXhwZWN0ZWQgc2h1dGRvd24sIHNvIGVycm9yXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHNodXRkb3duJyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIC8vIGlmIHdlIGNhbmNlbGxlZCB0aGUgdW5leHBlY3RlZCBzaHV0ZG93biBwcm9taXNlLCB0aGF0IG1lYW5zIHdlXG4gICAgICAgICAgLy8gbm8gbG9uZ2VyIGNhcmUgYWJvdXQgaXQsIGFuZCBjYW4gc2FmZWx5IGlnbm9yZSBpdFxuICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBCLkNhbmNlbGxhdGlvbkVycm9yKSkge1xuICAgICAgICAgICAgcmVtb3ZlU2Vzc2lvbkZyb21NYXN0ZXJMaXN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIHRoaXMgaXMgYSBjYW5jZWxsYWJsZSBwcm9taXNlXG4gICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24oZHJpdmVyLm9uVW5leHBlY3RlZFNodXRkb3duKSkge1xuICAgICAgLy8gc2luY2UgYmFzZSBkcml2ZXIgdiA1LjAuMFxuICAgICAgZHJpdmVyLm9uVW5leHBlY3RlZFNodXRkb3duKHJlbW92ZVNlc3Npb25Gcm9tTWFzdGVyTGlzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy53YXJuKGBGYWlsZWQgdG8gYXR0YWNoIHRoZSB1bmV4cGVjdGVkIHNodXRkb3duIGxpc3RlbmVyLiBgICtcbiAgICAgICAgYElzICdvblVuZXhwZWN0ZWRTaHV0ZG93bicgbWV0aG9kIGF2YWlsYWJsZSBmb3IgJyR7ZHJpdmVyLmNvbnN0cnVjdG9yLm5hbWV9Jz9gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjdXJTZXNzaW9uRGF0YUZvckRyaXZlciAoSW5uZXJEcml2ZXIpIHtcbiAgICBjb25zdCBzZXNzaW9ucyA9IGF3YWl0IHNlc3Npb25zTGlzdEd1YXJkLmFjcXVpcmUoQXBwaXVtRHJpdmVyLm5hbWUsICgpID0+IHRoaXMuc2Vzc2lvbnMpO1xuICAgIGNvbnN0IGRhdGEgPSBfLnZhbHVlcyhzZXNzaW9ucylcbiAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChzKSA9PiBzLmNvbnN0cnVjdG9yLm5hbWUgPT09IElubmVyRHJpdmVyLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgLm1hcCgocykgPT4gcy5kcml2ZXJEYXRhKTtcbiAgICBmb3IgKGxldCBkYXR1bSBvZiBkYXRhKSB7XG4gICAgICBpZiAoIWRhdHVtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvYmxlbSBnZXR0aW5nIHNlc3Npb24gZGF0YSBmb3IgZHJpdmVyIHR5cGUgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtJbm5lckRyaXZlci5uYW1lfTsgZG9lcyBpdCBpbXBsZW1lbnQgJ2dldCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBkcml2ZXJEYXRhJz9gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uIChzZXNzaW9uSWQpIHtcbiAgICBsZXQgcHJvdG9jb2w7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBvdGhlclNlc3Npb25zRGF0YSA9IG51bGw7XG4gICAgICBsZXQgZHN0U2Vzc2lvbiA9IG51bGw7XG4gICAgICBhd2FpdCBzZXNzaW9uc0xpc3RHdWFyZC5hY3F1aXJlKEFwcGl1bURyaXZlci5uYW1lLCAoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1ckNvbnN0cnVjdG9yTmFtZSA9IHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBvdGhlclNlc3Npb25zRGF0YSA9IF8udG9QYWlycyh0aGlzLnNlc3Npb25zKVxuICAgICAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgPT09IGN1ckNvbnN0cnVjdG9yTmFtZSAmJiBrZXkgIT09IHNlc3Npb25JZClcbiAgICAgICAgICAgICAgLm1hcCgoWywgdmFsdWVdKSA9PiB2YWx1ZS5kcml2ZXJEYXRhKTtcbiAgICAgICAgZHN0U2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXTtcbiAgICAgICAgcHJvdG9jb2wgPSBkc3RTZXNzaW9uLnByb3RvY29sO1xuICAgICAgICBsb2cuaW5mbyhgUmVtb3Zpbmcgc2Vzc2lvbiAke3Nlc3Npb25JZH0gZnJvbSBvdXIgbWFzdGVyIHNlc3Npb24gbGlzdGApO1xuICAgICAgICAvLyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGRlbGV0ZVNlc3Npb24gY29tcGxldGVzIHN1Y2Nlc3NmdWxseSBvciBub3RcbiAgICAgICAgLy8gbWFrZSB0aGUgc2Vzc2lvbiB1bmF2YWlsYWJsZSwgYmVjYXVzZSB3aG8ga25vd3Mgd2hhdCBzdGF0ZSBpdCBtaWdodFxuICAgICAgICAvLyBiZSBpbiBvdGhlcndpc2VcbiAgICAgICAgZGVsZXRlIHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIHZhbHVlOiBhd2FpdCBkc3RTZXNzaW9uLmRlbGV0ZVNlc3Npb24oc2Vzc2lvbklkLCBvdGhlclNlc3Npb25zRGF0YSksXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy5lcnJvcihgSGFkIHRyb3VibGUgZW5kaW5nIHNlc3Npb24gJHtzZXNzaW9uSWR9OiAke2UubWVzc2FnZX1gKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3RvY29sLFxuICAgICAgICBlcnJvcjogZSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlQWxsU2Vzc2lvbnMgKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHNlc3Npb25zQ291bnQgPSBfLnNpemUodGhpcy5zZXNzaW9ucyk7XG4gICAgaWYgKDAgPT09IHNlc3Npb25zQ291bnQpIHtcbiAgICAgIGxvZy5kZWJ1ZygnVGhlcmUgYXJlIG5vIGFjdGl2ZSBzZXNzaW9ucyBmb3IgY2xlYW51cCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIGZvcmNlID0gZmFsc2UsXG4gICAgICByZWFzb24sXG4gICAgfSA9IG9wdHM7XG4gICAgbG9nLmRlYnVnKGBDbGVhbmluZyB1cCAke3V0aWwucGx1cmFsaXplKCdhY3RpdmUgc2Vzc2lvbicsIHNlc3Npb25zQ291bnQsIHRydWUpfWApO1xuICAgIGNvbnN0IGNsZWFudXBQcm9taXNlcyA9IGZvcmNlXG4gICAgICA/IF8udmFsdWVzKHRoaXMuc2Vzc2lvbnMpLm1hcCgoZHJ2KSA9PiBkcnYuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24ocmVhc29uICYmIG5ldyBFcnJvcihyZWFzb24pKSlcbiAgICAgIDogXy5rZXlzKHRoaXMuc2Vzc2lvbnMpLm1hcCgoaWQpID0+IHRoaXMuZGVsZXRlU2Vzc2lvbihpZCkpO1xuICAgIGZvciAoY29uc3QgY2xlYW51cFByb21pc2Ugb2YgY2xlYW51cFByb21pc2VzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjbGVhbnVwUHJvbWlzZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmRlYnVnKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjbWQsIC4uLmFyZ3MpIHtcbiAgICAvLyBnZXRTdGF0dXMgY29tbWFuZCBzaG91bGQgbm90IGJlIHB1dCBpbnRvIHF1ZXVlLiBJZiB3ZSBkbyBpdCBhcyBwYXJ0IG9mIHN1cGVyLmV4ZWN1dGVDb21tYW5kLCBpdCB3aWxsIGJlIGFkZGVkIHRvIHF1ZXVlLlxuICAgIC8vIFRoZXJlIHdpbGwgYmUgbG90IG9mIHN0YXR1cyBjb21tYW5kcyBpbiBxdWV1ZSBkdXJpbmcgY3JlYXRlU2Vzc2lvbiBjb21tYW5kLCBhcyBjcmVhdGVTZXNzaW9uIGNhbiB0YWtlIHVwIHRvIG9yIG1vcmUgdGhhbiBhIG1pbnV0ZS5cbiAgICBpZiAoY21kID09PSAnZ2V0U3RhdHVzJykge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U3RhdHVzKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXBwaXVtRHJpdmVyQ29tbWFuZChjbWQpKSB7XG4gICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoY21kLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZXNzaW9uSWQgPSBfLmxhc3QoYXJncyk7XG4gICAgY29uc3QgZHN0U2Vzc2lvbiA9IGF3YWl0IHNlc3Npb25zTGlzdEd1YXJkLmFjcXVpcmUoQXBwaXVtRHJpdmVyLm5hbWUsICgpID0+IHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXSk7XG4gICAgaWYgKCFkc3RTZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzZXNzaW9uIHdpdGggaWQgJyR7c2Vzc2lvbklkfScgZG9lcyBub3QgZXhpc3RgKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzID0ge1xuICAgICAgcHJvdG9jb2w6IGRzdFNlc3Npb24ucHJvdG9jb2xcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlcy52YWx1ZSA9IGF3YWl0IGRzdFNlc3Npb24uZXhlY3V0ZUNvbW1hbmQoY21kLCAuLi5hcmdzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXMuZXJyb3IgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcHJveHlBY3RpdmUgKHNlc3Npb25JZCkge1xuICAgIGNvbnN0IGRzdFNlc3Npb24gPSB0aGlzLnNlc3Npb25zW3Nlc3Npb25JZF07XG4gICAgcmV0dXJuIGRzdFNlc3Npb24gJiYgXy5pc0Z1bmN0aW9uKGRzdFNlc3Npb24ucHJveHlBY3RpdmUpICYmIGRzdFNlc3Npb24ucHJveHlBY3RpdmUoc2Vzc2lvbklkKTtcbiAgfVxuXG4gIGdldFByb3h5QXZvaWRMaXN0IChzZXNzaW9uSWQpIHtcbiAgICBjb25zdCBkc3RTZXNzaW9uID0gdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdO1xuICAgIHJldHVybiBkc3RTZXNzaW9uID8gZHN0U2Vzc2lvbi5nZXRQcm94eUF2b2lkTGlzdCgpIDogW107XG4gIH1cblxuICBjYW5Qcm94eSAoc2Vzc2lvbklkKSB7XG4gICAgY29uc3QgZHN0U2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXTtcbiAgICByZXR1cm4gZHN0U2Vzc2lvbiAmJiBkc3RTZXNzaW9uLmNhblByb3h5KHNlc3Npb25JZCk7XG4gIH1cbn1cblxuLy8gaGVscCBkZWNpZGUgd2hpY2ggY29tbWFuZHMgc2hvdWxkIGJlIHByb3hpZWQgdG8gc3ViLWRyaXZlcnMgYW5kIHdoaWNoXG4vLyBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGlzLCBvdXIgdW1icmVsbGEgZHJpdmVyXG5mdW5jdGlvbiBpc0FwcGl1bURyaXZlckNvbW1hbmQgKGNtZCkge1xuICByZXR1cm4gIWlzU2Vzc2lvbkNvbW1hbmQoY21kKSB8fCBjbWQgPT09ICdkZWxldGVTZXNzaW9uJztcbn1cblxuZXhwb3J0IHsgQXBwaXVtRHJpdmVyIH07XG4iXSwiZmlsZSI6ImxpYi9hcHBpdW0uanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
